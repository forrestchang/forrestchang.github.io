<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Lifelong Hacker</title>
    <link>http://blog.jiayuanzhang.com/categories/programming/</link>
    <description>Recent content in Programming on Lifelong Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 May 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://blog.jiayuanzhang.com/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>读《代码大全》</title>
      <link>http://blog.jiayuanzhang.com/post/notes-on-code-complete-part-1/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/notes-on-code-complete-part-1/</guid>
      <description>

&lt;p&gt;这本书最开始是大一的时候买的，买回来后翻了一些章节就成为了显示器的支架，直到最近工作了一段时间才重新开始读，这一次阅读和几年前初次阅读有很大不同，大一阅读时候的编码经验仅仅是局限于算法方面，对大型项目的构建没有特别多感触；这一次是在写了很多业务代码，积累了一定问题的基础上去阅读的，阅读的深度自然不是第一次阅读可以比较的。&lt;/p&gt;

&lt;p&gt;和这本书类似的还有一本叫做 &lt;a href=&#34;https://book.douban.com/subject/1152111/&#34;&gt;《程序员修炼之道——从小工到专家》&lt;/a&gt;（我也写过 &lt;a href=&#34;http://blog.jiayuanzhang.com/post/notes-on-the-pragmatic-programmer-part-1/&#34;&gt;笔记&lt;/a&gt;）。这本书讲了很多软件工程领域的行话和规则，比如熟悉的 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%80%E6%AC%A1%E4%B8%94%E4%BB%85%E4%B8%80%E6%AC%A1&#34;&gt;DRY 原则&lt;/a&gt;，如果觉得《代码大全》比较厚（大概九百多页），也可以先读一下这本书。&lt;/p&gt;

&lt;p&gt;《代码大全》并不是一本需要从头到尾依次阅读的书，章节和章节之间的联系也不是很大，完全可以随便挑选感兴趣的章节来阅读。这次阅读我主要遵从书上的建议，按照以下顺序来阅读：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第 11 章：变量名的力量&lt;/li&gt;
&lt;li&gt;第 8 章：防御式编程&lt;/li&gt;
&lt;li&gt;第 7 章：高质量的子程序&lt;/li&gt;
&lt;li&gt;第 18 章：表驱动法&lt;/li&gt;
&lt;li&gt;第 4 章：关键的「构建」决策&lt;/li&gt;
&lt;li&gt;第 33 章：个人性格&lt;/li&gt;
&lt;li&gt;第 32 章：自说明代码&lt;/li&gt;
&lt;li&gt;其他章节按照顺序或者兴趣度依次阅读&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个「读《代码大全》」系列的文章主要是记录一些阅读笔记。之前的阅读笔记比较喜欢把书上的内容抄下来，但是实际上发现，「抄书」可能抄完就忘了，因为「抄」其实很简单，不需要动脑，打字快的话也不会觉得很累。这次阅读笔记主要是「问题 - 回答」的模式来写，在阅读每章之前，先提出几个问题，然后在阅读的过程中解决问题。&lt;/p&gt;

&lt;h2 id=&#34;第-11-章-变量名的力量&#34;&gt;第 11 章：变量名的力量&lt;/h2&gt;

&lt;p&gt;问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;怎样给一个变量命名？&lt;/li&gt;
&lt;li&gt;长名字还是短名字？&lt;/li&gt;
&lt;li&gt;命名的最佳实践有哪些？&lt;/li&gt;
&lt;li&gt;有哪些常见的命名方法？&lt;/li&gt;
&lt;li&gt;在命名中应该要避免的东西有哪些？&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;怎样给一个变量命名&#34;&gt;怎样给一个变量命名？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;通常，对变量的描述就是最佳的变量名。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;书中举了几个简单的例子，例如表示美国奥林匹克代表团成员数量的变量 &lt;code&gt;numberOfPeopleOnTheUsOlympicTeam&lt;/code&gt;，表示某国代表团在现代奥运会上获得的最高分数的变量 &lt;code&gt;maximumNumberOfPointsInModernOlympics&lt;/code&gt;。这种变量命名的好处是一眼就能看出这个变量表示的是什么，它们都是非常明确的。而像 &lt;code&gt;nums&lt;/code&gt; 和 &lt;code&gt;maxPoints&lt;/code&gt; 就相对来说没有那么明确，至于 &lt;code&gt;n&lt;/code&gt; 和 &lt;code&gt;m&lt;/code&gt; 这样的命名就是非常差的描述，移除了上下文根本无法理解。&lt;/p&gt;

&lt;p&gt;这种对变量描述的命名方法也有一个缺点：变量名太长了，这一点会之后讨论。&lt;/p&gt;

&lt;p&gt;另外一个命名的方法是「以问题为导向（Problem Orientation）」。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一个好名字通常表达的是「什么（what）」，而不是「如何（how）」。如果一个名字反映了计算的某些方面而不是问题本省，那么它反应的就是「how」，而不是「what」了，应该避免取这样的名字。
书中也举了几个例子，例如一条员工数据记录可以称作 &lt;code&gt;inputRec&lt;/code&gt; 或者 &lt;code&gt;employeeData&lt;/code&gt;，&lt;code&gt;inputRec&lt;/code&gt; 是一个反映输入、记录这些计算概念的计算机术语，二 &lt;code&gt;employeeData&lt;/code&gt; 则直指问题领域。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;变量命名中有很多的限定词，例如 &lt;code&gt;Total&lt;/code&gt;、&lt;code&gt;Sum&lt;/code&gt;、&lt;code&gt;Average&lt;/code&gt;、&lt;code&gt;Max&lt;/code&gt;、&lt;code&gt;Min&lt;/code&gt;、&lt;code&gt;Record&lt;/code&gt; 等。使用这样的限定词的时候，最好把这些限定词加到最后，这样做的好处有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;避免歧义：&lt;code&gt;moneyTotal&lt;/code&gt; 和 &lt;code&gt;totalMoney&lt;/code&gt; 产生的歧义；&lt;/li&gt;
&lt;li&gt;一致性：&lt;code&gt;numberTotal&lt;/code&gt;、&lt;code&gt;moneyTotal&lt;/code&gt;、&lt;code&gt;costTotal&lt;/code&gt; 这样的命名具有一致性。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用好「对仗词」也可以很好得提升变量的可读性：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;begin/end&lt;/li&gt;
&lt;li&gt;first/last&lt;/li&gt;
&lt;li&gt;locked/unlocked&lt;/li&gt;
&lt;li&gt;min/max&lt;/li&gt;
&lt;li&gt;next/previous&lt;/li&gt;
&lt;li&gt;old/new&lt;/li&gt;
&lt;li&gt;opened/closed&lt;/li&gt;
&lt;li&gt;visible/invisible&lt;/li&gt;
&lt;li&gt;source/target&lt;/li&gt;
&lt;li&gt;source/destination&lt;/li&gt;
&lt;li&gt;up/down&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;个人经验：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用名词来命名变量名，可以是 &lt;code&gt;adj + noun&lt;/code&gt; 这种格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;长名字还是短名字&#34;&gt;长名字还是短名字？&lt;/h3&gt;

&lt;p&gt;上一个问题里所讲的「对变量的描述就是最佳的变量名」这种命名方法很有可能会导致变量名过长，例如 &lt;code&gt;maximumNumberOfPointsInMordernOlympics&lt;/code&gt;，虽然现代的编辑器和 IDE 都拥有非常智能的补全，这些长名字的输入也不是什么问题，但是无疑会让代码看起来过于臃肿。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Gorla 和 Benander 发现，当变量名的平均长度在 10 到 16 个字符的时候，调试程序所花费的力气是最小的（1990）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如上面的这个变量名可以简化为 &lt;code&gt;maxPointsInOlympics&lt;/code&gt; ，这样既保留了变量的原本意思（参考上下文的情况下），又缩短的变量名的长度。&lt;/p&gt;

&lt;p&gt;在编写变量名的时候还需要考虑作用域的问题，一般来说，小作用域里的变量名可以简短一些，因为只作用于几行代码，例如 Python 中的列表推导式（Python 3，Python 2 中的列表推导式不是块级作用域）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;alist&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;do_something&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;some_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;甚至在不需要使用这个变量的时候可以把它忽略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 生成一个随机数列表&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;random_numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;相反的，如果是一个全局作用域，变量名就需要取得独特一些，避免产生命名空间冲突。例如用户接口部分的雇员类可以命名为 &lt;code&gt;uiEmployee&lt;/code&gt;，数据库部分的雇员类可以命名为 &lt;code&gt;dbEmployee&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;命名的最佳实践有哪些&#34;&gt;命名的最佳实践有哪些？&lt;/h3&gt;

&lt;p&gt;程序中常见的变量类型有「循环变量」、「状态变量」、「临时变量」、「布尔变量」、「枚举变量」和「具名常量」，这一部分会针对这些不同的变量（常量）类型讨论最佳实践。&lt;/p&gt;

&lt;h4 id=&#34;循环变量&#34;&gt;循环变量&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;（不推荐）简单的循环可以使用 &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt; 来命名；&lt;/li&gt;
&lt;li&gt;复杂的循环或者循环变量需要在循环外使用的应该使用富有含义的命名。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;例如，我需要便利一个用户列表信息来对每个用户的信息做处理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_info&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_infos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;do_something&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;要注意的事，在 Python 中，&lt;code&gt;for&lt;/code&gt; 循环是不存在子作用域的，所以在循环外访问 &lt;code&gt;user_info&lt;/code&gt; 会获取 &lt;code&gt;user_infos&lt;/code&gt; 中的最后一个值。&lt;/p&gt;

&lt;p&gt;个人经验：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;便利下标可以使用 &lt;code&gt;idx&lt;/code&gt; 或者 &lt;code&gt;index&lt;/code&gt; 作为结尾，例如 &lt;code&gt;user_info_idx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;状态变量&#34;&gt;状态变量&lt;/h4&gt;

&lt;p&gt;状态变量一般用来描述程序的状态。最常用的状态变量名就是 &lt;code&gt;flag&lt;/code&gt;，但是这种命名方法缺少具体的含义，不推荐。&lt;/p&gt;

&lt;p&gt;最好的命名方法是名字中不含有 &lt;code&gt;flag&lt;/code&gt;，并且能够精准地表述状态。例如用来描述是否符合某一条件的变量名：&lt;code&gt;matched&lt;/code&gt;，它是一个布尔值。&lt;/p&gt;

&lt;p&gt;如果某个状态含有多个值，可以使用枚举值来代替。&lt;/p&gt;

&lt;h4 id=&#34;临时变量&#34;&gt;临时变量&lt;/h4&gt;

&lt;p&gt;临时变量用于存储计算的中间结果，它常被命名为 &lt;code&gt;temp&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; 等模糊且缺乏描述性的名字。&lt;/p&gt;

&lt;p&gt;虽然临时变量是「临时」使用的，但是也不应该随意给它们命名，赋予一个更有意义的名字会让程序更加可读。&lt;/p&gt;

&lt;p&gt;例如下面一段计算二元一次方程的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;answer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;answer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;虽然上面这段代码没有什么逻辑问题，但是 &lt;code&gt;temp&lt;/code&gt; 这个变量并不能很好的表述计算的中间结果，如果把 &lt;code&gt;temp&lt;/code&gt; 改为 &lt;code&gt;discriminant&lt;/code&gt;（判别式） 会更好。&lt;/p&gt;

&lt;h4 id=&#34;布尔变量&#34;&gt;布尔变量&lt;/h4&gt;

&lt;p&gt;一些常用的布尔变量：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;done：表示某件事已经完成。在完成之前把 done 的值设为 false；&lt;/li&gt;
&lt;li&gt;error：表示有错误发生。在错误发生之前把 error 的值设为 false；&lt;/li&gt;
&lt;li&gt;found：表示某个值已经找到了。在未找到之前把 found 的值设为 false；&lt;/li&gt;
&lt;li&gt;success/ok：表示某一项操作是否成功。在操作失败的情况下把它的值设为 false。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最佳实践：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;给布尔变量赋于隐含「真/假」含义的名字；&lt;/li&gt;
&lt;li&gt;使用肯定的布尔变量名。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;个人经验：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;可以在布尔变量之前添加 &lt;code&gt;is&lt;/code&gt; 前缀来区分，例如 &lt;code&gt;is_done&lt;/code&gt;，这样做法的唯一缺点是写在条件判断中不是那么清晰，&lt;code&gt;if (done)&lt;/code&gt; 要比 &lt;code&gt;if (is_done)&lt;/code&gt; 更加清晰一些。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;枚举变量&#34;&gt;枚举变量&lt;/h4&gt;

&lt;p&gt;在使用枚举类型的时候，可以通过使用组前缀，如 &lt;code&gt;Color_&lt;/code&gt;, &lt;code&gt;Planet_&lt;/code&gt; 等来明确表示该类型的成员属于同一个组。&lt;/p&gt;

&lt;h4 id=&#34;常量&#34;&gt;常量&lt;/h4&gt;

&lt;p&gt;常量应该始终大写，并使用有意义的值，避免在程序中使用魔法变量。&lt;/p&gt;

&lt;h3 id=&#34;有哪些常见的命名方法&#34;&gt;有哪些常见的命名方法？&lt;/h3&gt;

&lt;p&gt;命名规范首先应该参考项目的规范或者所编写的语言规范，例如 Java 通常使用的是驼峰命名法，Python 使用的是下划线命名法。&lt;/p&gt;

&lt;h4 id=&#34;驼峰命名法-camelcase&#34;&gt;驼峰命名法（CamelCase）&lt;/h4&gt;

&lt;p&gt;驼峰命名法来源于 Perl 语言中普遍使用的大小写混合命名，而 Larry Wall 所著的《Programming Perl》的封面就是一匹骆驼。&lt;/p&gt;

&lt;p&gt;一般来说，变量名、函数使用小驼峰命名法（lowerCamelCase）；类使用大驼峰命名法（UpperCamelCase）。&lt;/p&gt;

&lt;p&gt;驼峰命名法常在 Java、JavaScript 等语言中被使用。&lt;/p&gt;

&lt;h4 id=&#34;下划线命名法-underline-case&#34;&gt;下划线命名法（underline_case）&lt;/h4&gt;

&lt;p&gt;下划线命名法使用下划线 &lt;code&gt;_&lt;/code&gt; 来分隔多个单词。这种命名方式通常在 Python 等语言中被使用。它的缺点是会使含有多个单词的变量名的长度增加。&lt;/p&gt;

&lt;h4 id=&#34;匈牙利命名法&#34;&gt;匈牙利命名法&lt;/h4&gt;

&lt;p&gt;在匈牙利命名法中，一个变量由一个或多个小些字母开始，这些字母有助于记忆变量的类型和用途，紧跟着的就是程序员选择的任何名称。这个后半部分的首字母可以大写，以区别前面的类型指示字母。&lt;/p&gt;

&lt;p&gt;匈牙利命名法被广泛用在 Microsoft Windows 系统的开发中。但是目前这种命名方式已经被很少使用，不推荐。&lt;/p&gt;

&lt;h3 id=&#34;在命名中应该要避免的东西有哪些&#34;&gt;在命名中应该要避免的东西有哪些？&lt;/h3&gt;

&lt;p&gt;（这是《代码大全》中列出的指导原则。）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;避免使用令人误解的名字和缩写。要确保名字的含义是明确的。例如 FALSE 常用做 TRUE 的反义词，如果它用做「Fig and Almond Season」的缩写就很糟糕了；&lt;/li&gt;
&lt;li&gt;避免使用具有相似含义的名字。如果你能够交换两个变量的名字而不会妨碍对程序的理解，那么你就需要为这两个变量重新命名了。&lt;/li&gt;
&lt;li&gt;避免使用具有不同含义但却有相似名字的变量。如果你有两个名字相似但含义不同的变量，那么试着给其中之一重新命名。&lt;/li&gt;
&lt;li&gt;避免使用发音相近的名字。例如 wrap 和 rap，当你试图和别人讨论代码的时候，同音字会产生麻烦。&lt;/li&gt;
&lt;li&gt;避免在名字中使用数字。如果名字中的数字真的非常重要，可以使用数组来代替一组单个的变量。&lt;/li&gt;
&lt;li&gt;避免在名字中拼错单词。（后期要修改非常麻烦。）&lt;/li&gt;
&lt;li&gt;避免使用英语中常常拼错的单词。很多英语手册会包含一份常常拼错单词的清单，避免在你的变量名中使用这些单词。&lt;/li&gt;
&lt;li&gt;不要仅靠大小写来区分变量名。（大写仅作为常量命名。）&lt;/li&gt;
&lt;li&gt;避免使用多种自然语言。（统一使用标准现代英语，避免使用 emoji、中文和其他语言。）&lt;/li&gt;
&lt;li&gt;避免使用标准类型、变量和子程序的名字。所有的编程语言指南都会包含一份该语言保留的和预定的名字列表，不要使用列表上的名字作为变量名。&lt;/li&gt;
&lt;li&gt;不要使用与变量含义完全无关的名字。&lt;/li&gt;
&lt;li&gt;避免在名字中包含容易混淆的字符。要意识到有些字符看上去非常接近，很难把它们区分开来。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;变量的命名是程序开发中非常小的一个环节，但是却能够发展出这么多的理论，原因之一就是「程序首先是给人阅读的，其次才是给机器执行的」。良好的命名方法可以让代码更加易于维护，也可以让别人更好地理解你的代码。&lt;/p&gt;

&lt;p&gt;变量的命名规范首先应当符合团队或者项目制定的编码规范，如果没有制定规范或者是个人项目，可以沿用社区的编码规范。下面列出一些常见语言的编码规范：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python: &lt;a href=&#34;https://github.com/google/styleguide/blob/gh-pages/pyguide.md&#34;&gt;styleguide/pyguide.md at gh-pages · google/styleguide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java: &lt;a href=&#34;https://github.com/alibaba/p3c&#34;&gt;alibaba/p3c: Alibaba Java Coding Guidelines pmd implements and IDE plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JavaScript: &lt;a href=&#34;https://github.com/airbnb/javascript&#34;&gt;airbnb/javascript: JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C/C++: &lt;a href=&#34;https://google.github.io/styleguide/cppguide.html&#34;&gt;Google C++ Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Golang: &lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments&#34;&gt;CodeReviewComments · golang/go Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;编码规范也不能够完全依靠文档来约束，集成到 IDE 或者 CI 中是更好的方式。各种语言都提供了各种 format 工具，例如 Python 的 &lt;a href=&#34;https://github.com/google/yapf&#34;&gt;yapf&lt;/a&gt;，Golang 的 &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34;&gt;gofmt&lt;/a&gt; 等。&lt;/p&gt;

&lt;p&gt;IDE 和代码编辑器也提供了很好的格式化代码的功能，例如 Jebbrains 的 IDE 就可以通过导入 XML 格式的文件来进行配置格式化代码的风格。&lt;/p&gt;

&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;Don&amp;rsquo;t repeat yourself - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Camel_case&#34;&gt;Camel case - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hungarian_notation&#34;&gt;Hungarian notation - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670&#34;&gt;Code Complete: A Practical Handbook of Software Construction, Second Edition: Steve McConnell: 0790145196705: Amazon.com: Books&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SFTP 使用详解</title>
      <link>http://blog.jiayuanzhang.com/post/linux-command-sftp/</link>
      <pubDate>Thu, 06 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/linux-command-sftp/</guid>
      <description>

&lt;p&gt;「Linux 命令详解」这个系列的文章将会介绍 Linux/Unix/macOS 系统中使用到的常用命令，包括该命令的简单介绍、常用参数解释以及最佳实践，如果需要快速使用这个命令，直接跳到最佳实践部分即可。&lt;/p&gt;

&lt;p&gt;「Linux 命令详解」系列文章：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://jiayuanzhang.com/linux-command-sftp/&#34;&gt;Linux命令详解：SFTP&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;一-介绍&#34;&gt;一、介绍&lt;/h2&gt;

&lt;p&gt;SFTP（Secure File Transfer Protocol，安全文件传输协议）是一种基于可靠数据流（data stream），提供文件存取和管理的网络传输协议，它在网络协议层的结构如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/sftp-layer.png&#34; alt=&#34;sftp-layer&#34; /&gt;&lt;/p&gt;

&lt;p&gt;与 FTP 协议相比，SFTP 在客户端与服务器间提供了一种更为安全的文件传输方式，如果你还在使用 FTP 来进行文件传输，强烈建议切换到更为安全的 SFTP 上来。&lt;/p&gt;

&lt;p&gt;本篇文章将会介绍 SFTP 的链接，以及在交互式命令行中的一些常用命令，并对一些参数进行解释，最后给出实际使用中的最佳实践。目前已经有很多 GUI 客户端支持 SFTP 协议，但是不在本篇文章的讨论范围之内。&lt;/p&gt;

&lt;h2 id=&#34;二-使用-sftp-进行连接&#34;&gt;二、使用 SFTP 进行连接&lt;/h2&gt;

&lt;p&gt;因为 SFTP 是基于 SSH 协议的，所以默认的身份认证方法与 SSH 协议保持一致。通常我们使用 SSH Key 来进行连接，如果你已经可以使用 SSH 连接到远程服务器上，那么可以使用以下命令来连接 SFTP：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp user_name@remote_server_address&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:path&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果远程服务器自定义了连接的端口，可以使用 &lt;code&gt;-P&lt;/code&gt; 参数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp -P remote_port user_name@remote_server_address&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;:path&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;连接成功后将进入一个 SFTP 的解释器，可以发现命令行提示符变成了 &lt;code&gt;sftp&amp;gt;&lt;/code&gt;，使用 &lt;code&gt;exit&lt;/code&gt; 命令可以退出连接。&lt;/p&gt;

&lt;p&gt;如果连接地址存在 &lt;code&gt;path&lt;/code&gt; 并且 &lt;code&gt;path&lt;/code&gt; 不是一个目录，那么 SFTP 会直接从服务器端取回这个文件。&lt;/p&gt;

&lt;h2 id=&#34;三-连接参数详解&#34;&gt;三、连接参数详解&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-B&lt;/code&gt;: buffer_size，制定传输 buffer 的大小，更大的 buffer 会消耗更多的内存，默认为 32768 bytes；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-P&lt;/code&gt;: port，制定连接的端口号；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-R&lt;/code&gt;: num_requests，制定一次连接的请求数，可以略微提升传输速度，但是会增加内存的使用量。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;四-目录管理&#34;&gt;四、目录管理&lt;/h2&gt;

&lt;p&gt;在 SFTP 解释器中可以使用 &lt;code&gt;help&lt;/code&gt; 命令来查看帮助文档。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp&amp;gt; &lt;span class=&#34;nb&#34;&gt;help&lt;/span&gt;
Available commands:
bye                                Quit sftp
&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; path                            Change remote directory to &lt;span class=&#34;s1&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;
chgrp grp path                     Change group of file &lt;span class=&#34;s1&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt; to &lt;span class=&#34;s1&#34;&gt;&amp;#39;grp&amp;#39;&lt;/span&gt;
chmod mode path                    Change permissions of file &lt;span class=&#34;s1&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt; to &lt;span class=&#34;s1&#34;&gt;&amp;#39;mode&amp;#39;&lt;/span&gt;
chown own path                     Change owner of file &lt;span class=&#34;s1&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt; to &lt;span class=&#34;s1&#34;&gt;&amp;#39;own&amp;#39;&lt;/span&gt;
df &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-hi&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;path&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;                    Display statistics &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; current directory or
                                   filesystem containing &lt;span class=&#34;s1&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt;                               Quit sftp
get &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-afPpRr&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; remote &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;local&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;       Download file
reget &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-fPpRr&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; remote &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;local&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;      Resume download file
reput &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-fPpRr&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;local&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; remote      Resume upload file
&lt;span class=&#34;nb&#34;&gt;help&lt;/span&gt;                               Display this &lt;span class=&#34;nb&#34;&gt;help&lt;/span&gt; text
lcd path                           Change &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; directory to &lt;span class=&#34;s1&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;
lls &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;ls-options &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;path&lt;span class=&#34;o&#34;&gt;]]&lt;/span&gt;            Display &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; directory listing
lmkdir path                        Create &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; directory
ln &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-s&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; oldpath newpath            Link remote file &lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;-s &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; symlink&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
lpwd                               Print &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; working directory
ls &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-1afhlnrSt&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;path&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;             Display remote directory listing
lumask &lt;span class=&#34;nb&#34;&gt;umask&lt;/span&gt;                       Set &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;umask&lt;/span&gt; to &lt;span class=&#34;s1&#34;&gt;&amp;#39;umask&amp;#39;&lt;/span&gt;
mkdir path                         Create remote directory
progress                           Toggle display of progress meter
put &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;-afPpRr&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;remote&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;       Upload file
&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;                                Display remote working directory
quit                               Quit sftp
rename oldpath newpath             Rename remote file
rm path                            Delete remote file
rmdir path                         Remove remote directory
symlink oldpath newpath            Symlink remote file
version                            Show SFTP version
!command                           Execute &lt;span class=&#34;s1&#34;&gt;&amp;#39;command&amp;#39;&lt;/span&gt; in &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; shell
!                                  Escape to &lt;span class=&#34;nb&#34;&gt;local&lt;/span&gt; shell
?                                  Synonym &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; help&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SFTP 解释器中预置了常用的命令，但是没有自带的 Bash 来得丰富。&lt;/p&gt;

&lt;p&gt;1）显示当前的工作目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp&amp;gt; &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
Remote working directory: /&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2）查看当前目录的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp&amp;gt; ls
Summary.txt     info.html       temp.txt        testDirectory&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3）使用 &lt;code&gt;-la&lt;/code&gt; 参数可以以列表形式查看，并显示隐藏文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp&amp;gt; ls -la
drwxr-xr-x    &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; demouser   demouser       &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;:11 .
drwxr-xr-x    &lt;span class=&#34;m&#34;&gt;3&lt;/span&gt; root       root           &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;:02 ..
-rw-------    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; demouser   demouser          &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;:04 .bash_history
-rw-r--r--    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; demouser   demouser        &lt;span class=&#34;m&#34;&gt;220&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;:02 .bash_logout
-rw-r--r--    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; demouser   demouser       &lt;span class=&#34;m&#34;&gt;3486&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;:02 .bashrc
drwx------    &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; demouser   demouser       &lt;span class=&#34;m&#34;&gt;4096&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;:04 .cache
-rw-r--r--    &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; demouser   demouser        &lt;span class=&#34;m&#34;&gt;675&lt;/span&gt; Aug &lt;span class=&#34;m&#34;&gt;13&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;15&lt;/span&gt;:02 .profile
. . .&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4）切换目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp&amp;gt; &lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; testDirectory&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5）建立文件夹：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp&amp;gt; mkdir anotherDirectory&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;以上的命令都是用来操作远程服务器的，如果想要操作本地目录呢？只需要在每个命令前添加 &lt;code&gt;l&lt;/code&gt; 即可，例如显示本地操作目录下的文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp&amp;gt; lls
localFiles&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 &lt;code&gt;!&lt;/code&gt; 可以直接运行 Shell 中的指令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp&amp;gt; !df -h
Filesystem      Size   Used  Avail Capacity iused               ifree %iused  Mounted on
/dev/disk1s1   466Gi  360Gi  101Gi    &lt;span class=&#34;m&#34;&gt;79&lt;/span&gt;% &lt;span class=&#34;m&#34;&gt;3642919&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9223372036851132888&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;%   /
devfs          336Ki  336Ki    0Bi   &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;%    &lt;span class=&#34;m&#34;&gt;1162&lt;/span&gt;                   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;%   /dev
/dev/disk1s4   466Gi  &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;.0Gi  101Gi     &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;%       &lt;span class=&#34;m&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9223372036854775802&lt;/span&gt;    &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;%   /private/var/vm
map -hosts       0Bi    0Bi    0Bi   &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;%       &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;                   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;%   /net
map auto_home    0Bi    0Bi    0Bi   &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;%       &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;                   &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;  &lt;span class=&#34;m&#34;&gt;100&lt;/span&gt;%   /home&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;五-传输文件&#34;&gt;五、传输文件&lt;/h2&gt;

&lt;h3 id=&#34;5-1-从远程服务器拉取文件&#34;&gt;5.1 从远程服务器拉取文件&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;get&lt;/code&gt; 命令可以从远程服务器拉取文件到本地：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp&amp;gt; get remoteFile &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;newName&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;如果不指定 &lt;code&gt;newName&lt;/code&gt;，将使用和远程服务器相同的文件名。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;-r&lt;/code&gt; 参数可以拉取整个目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp&amp;gt; get -r remoteDirectory&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;5-2-从本地上传文件到服务器&#34;&gt;5.2 从本地上传文件到服务器&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;put&lt;/code&gt; 命令可以从本地上传文件到服务器：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp&amp;gt; put localFile&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样的，可以使用 &lt;code&gt;-r&lt;/code&gt; 参数来上传整个目录，但是有一点要注意，&lt;strong&gt;如果服务器上不存在这个目录需要首先新建&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp&amp;gt; mkdir folderName
sftp&amp;gt; put -r folderName&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;六-最佳实践&#34;&gt;六、最佳实践&lt;/h2&gt;

&lt;p&gt;1）连接远程服务器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp remote_user@remote_host&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;2）使用端口进行连接&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sftp -P remote_port remote_user@remote_host&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;3）从远程服务器拉取文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;get /path/remote_file&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;4）上传本地文件到服务器&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;put local_file&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;5）查看远程服务器目录内容&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;ls&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;6）查看本地目录内容&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bassh&#34; data-lang=&#34;bassh&#34;&gt;lls&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;7）执行本地 Shell 命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;!&lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;command&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/SSH_File_Transfer_Protocol&#34;&gt;SSH File Transfer Protocol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-use-sftp-to-securely-transfer-files-with-a-remote-server&#34;&gt;How To Use SFTP to Securely Transfer Files with a Remote Server&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>跨域资源共享（CORS）详解</title>
      <link>http://blog.jiayuanzhang.com/post/cors-tutorial/</link>
      <pubDate>Sun, 02 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/cors-tutorial/</guid>
      <description>

&lt;p&gt;Web 后端开发者很少会去充分了解跨域问题，原因是他们很少和 JavaScript 打交道。但是作为一个 Web 开发者，知道跨域请求和如何解决跨域问题可以和前端开发者在沟通上变得更为顺畅。&lt;/p&gt;

&lt;p&gt;这篇文章会介绍和跨域请求相关的一些概念，以及如何在后端（Python）解决浏览器的跨域请求问题。&lt;/p&gt;

&lt;h2 id=&#34;一-什么是跨域请求&#34;&gt;一、什么是跨域请求&lt;/h2&gt;

&lt;p&gt;首先，我们要了解什么是跨域请求。简单来说，当一台服务器资源从另一台服务器（不同的域名或者端口）请求一个资源时，就会发起一个跨域 HTTP 请求。&lt;/p&gt;

&lt;p&gt;举个简单的例子，&lt;code&gt;http://example-a.com/index.html&lt;/code&gt; 这个 HTML 页面请求了 &lt;code&gt;http://example-b.com/resource/image.jpg&lt;/code&gt; 这个图片资源时（发起 Ajax 请求，非 &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 标签），就是发起了一个跨域请求。&lt;/p&gt;

&lt;p&gt;在不做任何处理的情况下，这个跨域请求是无法被成功请求的，因为浏览器基于&lt;strong&gt;同源策略&lt;/strong&gt;会对跨域请求做一定的限制。&lt;/p&gt;

&lt;h2 id=&#34;二-浏览器同源策略&#34;&gt;二、浏览器同源策略&lt;/h2&gt;

&lt;p&gt;这就引出了&lt;strong&gt;浏览器的同源策略（Same-origin policy）&lt;/strong&gt;，同源策略限制了从同一个源加载的文档或者脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的重要安全机制。&lt;/p&gt;

&lt;p&gt;什么是同源？同源需要同时满足三个条件：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;请求的协议相同（例如同为 http 协议）&lt;/li&gt;
&lt;li&gt;请求的域名相同（例如同为 &lt;code&gt;www.example.com&lt;/code&gt;）&lt;/li&gt;
&lt;li&gt;请求的端口相同（例如同为 80 端口）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;第 2 点需要注意的是，必须是域名完全相同，比如说 &lt;code&gt;blog.example.com&lt;/code&gt; 和 &lt;code&gt;mail.example.com&lt;/code&gt; 这两个域名，虽然它们的顶级域名和二级域名（均为 &lt;code&gt;example.com&lt;/code&gt;）都相同，但是三级域名（&lt;code&gt;blog&lt;/code&gt; 和 &lt;code&gt;mail&lt;/code&gt;）不相同，所以也不能算作域名相同。&lt;/p&gt;

&lt;p&gt;如果不同时满足这上面三个条件，那就不符合浏览器的同源策略。&lt;/p&gt;

&lt;p&gt;修改 &lt;code&gt;document.domain&lt;/code&gt; 参数可以更改当前的源，例如 &lt;code&gt;blog.example.com&lt;/code&gt; 想要访问父域 &lt;code&gt;example.com&lt;/code&gt; 的资源时，可以执行以下 JavaScript 脚本来进行修改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;domain&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;example.com&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;但是 &lt;code&gt;document.domain&lt;/code&gt; 不能被设置为 &lt;code&gt;foo.com&lt;/code&gt; 或者是 &lt;code&gt;bar.com&lt;/code&gt;，因为它们不是 &lt;code&gt;blog.example.com&lt;/code&gt; 的超级域。&lt;/p&gt;

&lt;p&gt;当然，也不是所有的交互都会被同源策略拦截下来，下面两种交互就不会触发同源策略：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;跨域写操作（Cross-origin writes），例如超链接、重定向以及表单的提交操作，特定少数的 HTTP 请求需要添加预检请求（preflight）；&lt;/li&gt;
&lt;li&gt;跨域资源嵌入（Cross-origin embedding）：

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; 标签嵌入的跨域脚本；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 标签嵌入的 CSS 文件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; 标签嵌入图片；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; 标签嵌入多媒体资源；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;embed&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;applet&amp;gt;&lt;/code&gt; 的插件；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@font-face&lt;/code&gt; 引入的字体，一些浏览器允许跨域字体（cross-origin fonts），一些需要同源字体（same-origin fonts）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;frame&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 载入的任何资源，站点可以使用 &lt;code&gt;X-Frame-Options&lt;/code&gt; 消息头来组织这种形式的跨域交互。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果浏览器缺失同源策略这种安全机制会怎么样呢？设想一下，当你登陆了 &lt;code&gt;www.bank.com&lt;/code&gt; 银行网站进行操作时，浏览器保存了你登录时的 Cookie 信息，如果没有同源策略，在访问其他网站时，其他网站就可以读取还未过期的 Cookie 信息，从而伪造登陆进行操作，造成财产损失。&lt;/p&gt;

&lt;h2 id=&#34;三-cors-cross-origin-resource-sharing-跨域资源共享&#34;&gt;三、CORS（Cross-origin resource sharing，跨域资源共享）&lt;/h2&gt;

&lt;p&gt;虽然同源策略一定程度上保证了安全性，但是如果是一个正常的请求需要跨域该怎么做呢？&lt;/p&gt;

&lt;p&gt;常见的方法有四种：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;JSONP&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 标签&lt;/li&gt;
&lt;li&gt;CORS（Cross-origin resource sharing，跨域资源共享）&lt;/li&gt;
&lt;li&gt;代理服务器&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;前两种方式本质上是利用浏览器同源策略的漏洞来进行跨域请求，不是推荐的做法，只能作为低版本浏览器的缓兵之计。&lt;/p&gt;

&lt;p&gt;代理服务器的做法是让浏览器访问同源服务器，再由同源服务器去访问目标服务器，这样虽然可以避免跨域请求的问题，但是原本只需要一次的请求被请求了两次，无疑增加了时间的开销。&lt;/p&gt;

&lt;p&gt;目前主流的方法是使用 CORS 的方式，这也是下面主要讲的内容。&lt;/p&gt;

&lt;h3 id=&#34;3-1-什么是-cors&#34;&gt;3.1 什么是 CORS&lt;/h3&gt;

&lt;p&gt;CORS 其实是浏览器制定的一个规范，它的实现则主要在服务端，它通过一些 HTTP Header 来限制可以访问的域，例如页面 A 需要访问 B 服务器上的数据，如果 B 服务器上声明了允许 A 的域名访问，那么从 A 到 B 的跨域请求就可以完成。&lt;/p&gt;

&lt;p&gt;对于那些会对服务器数据产生副作用的 HTTP 请求，浏览器会使用 &lt;code&gt;OPTIONS&lt;/code&gt; 方法发起一个预检请求（preflight request），从而可以获知服务器端是否允许该跨域请求，服务器端确认允许后，才会发起实际的请求。在预检请求的返回中，服务器端也可以告知客户端是否需要身份认证信息。&lt;/p&gt;

&lt;h3 id=&#34;3-2-简单请求-simple-requests&#34;&gt;3.2 简单请求（Simple requests）&lt;/h3&gt;

&lt;p&gt;某些请求不会触发 CORS 预检请求，我们称这样的请求为简单请求。&lt;/p&gt;

&lt;p&gt;若请求满足下面所有条件，则该请求可视为简单请求：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; 方法之一；&lt;/li&gt;
&lt;li&gt;Header 仅有以下字段：

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Accept-Language&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Language&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Type&lt;/code&gt; 为下面三者之一：&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text / plain&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipart / form-data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;application / x-www.form-urlencoded&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DPR&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Downloadlink&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Save-Data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Viewport-Width&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Width&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;请求中的任意 &lt;code&gt;XMLHttpRequestUpload&lt;/code&gt; 对象均没有注册任何事件监听器，&lt;code&gt;XMLHttpRequestUpload&lt;/code&gt; 对象可以使用 &lt;code&gt;XMLHttpRequest.upload&lt;/code&gt; 属性访问；&lt;/li&gt;
&lt;li&gt;请求中没有使用 &lt;code&gt;ReadableStream&lt;/code&gt; 对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;举一个例子&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;，例如站点 &lt;code&gt;http://foo.example&lt;/code&gt; 的网页应用想要访问 &lt;code&gt;http://bar.other&lt;/code&gt; 的资源，&lt;code&gt;http://foo.example&lt;/code&gt; 的网页中可能包含类似于下面的 JavaScript 代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://bar.other/resources/public-data/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callOtherDomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;    
    &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; 
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;熟悉 JavaScript 的同学可能发现这段代码向 &lt;code&gt;http://bar.other/resources/public-data/&lt;/code&gt; 发起了一个 &lt;code&gt;GET&lt;/code&gt; 请求，请求和响应的报文如下。&lt;/p&gt;

&lt;p&gt;请求报文：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190505164610.png&#34; alt=&#34;2018-12-02-request-msg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;响应报文：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ws1.sinaimg.cn/large/006tNbRwgy1fxsiwz302wj31uo0rsn0i.jpg&#34; alt=&#34;2018-12-02-response-msg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在请求报文中，&lt;code&gt;Origin&lt;/code&gt; 字段表明该请求来源于 &lt;code&gt;http://foo.example&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在响应报文中，&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 字段被设置为 &lt;code&gt;*&lt;/code&gt;，表明该资源可以被任意的域访问。&lt;/p&gt;

&lt;p&gt;使用 &lt;code&gt;Origin&lt;/code&gt; 和 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 就能完成最简单访问控制。如果服务端仅允许来自 &lt;code&gt;http://foo.example&lt;/code&gt; 域的访问，应该把 进行如下设置：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Origin: http://foo.example&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;3-3-预检请求-preflight-request&#34;&gt;3.3 预检请求（Preflight Request）&lt;/h3&gt;

&lt;p&gt;和简单请求不同，「需预检的请求」要求必须先使用 &lt;code&gt;OPTIONS&lt;/code&gt; 方法发送一个预检请求到服务器，以获知服务器是否允许该请求，或者是否需要携带身份认证信息。「预检请求」的使用，可以避免跨域请求对服务器的用户数据产生未预期的影响。&lt;/p&gt;

&lt;p&gt;当一个请求满足以下任一条件时，该请求需要首先发送预检请求。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用了下面任一 HTTP 方法：&lt;code&gt;PUT&lt;/code&gt;、&lt;code&gt;DELETE&lt;/code&gt;、&lt;code&gt;CONNECT&lt;/code&gt;、&lt;code&gt;OPTIONS&lt;/code&gt;、&lt;code&gt;TRACE&lt;/code&gt;、&lt;code&gt;PATCH&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;Header 中设置了除简单请求 Header 字段外的其他字段（见简单请求中的 Header 字段说明）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Content-Type&lt;/code&gt; 的值不属于下列之一：

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;multipart/form-data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;text/plain&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;请求中的 &lt;code&gt;XMLHttpRequestUpload&lt;/code&gt; 对象注册了任意多个事件监听器；&lt;/li&gt;
&lt;li&gt;请求中使用了 &lt;code&gt;ReadableStream&lt;/code&gt; 对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;例如下面这个例子&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://bar.other/resources/post-here/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt;&amp;lt;person&amp;gt;&amp;lt;name&amp;gt;Arun&amp;lt;/name&amp;gt;&amp;lt;/person&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callOtherDomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setRequestHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;X-PINGOTHER&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;pingpong&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;setRequestHeader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;application/xml&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; 
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面的代码使用 POST 请求发送一个 XML 文档，该请求中包含了一个自定义的 Header 字段 &lt;code&gt;X-PINGOTHER: pingpong&lt;/code&gt;。另外，该请求的 &lt;code&gt;Content-Type&lt;/code&gt; 为 &lt;code&gt;application/xml&lt;/code&gt;，因此，该请求需要首先发起「预检请求」。&lt;/p&gt;

&lt;p&gt;OPTIONS 请求报文：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ws4.sinaimg.cn/large/006tNbRwgy1fxtit1a99sj31uo0rs0yi.jpg&#34; alt=&#34;2018-12-03-option-request-msg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;OPTIONS 响应报文：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://ws1.sinaimg.cn/large/006tNbRwgy1fxtiwydue5j31uo0rsjwi.jpg&#34; alt=&#34;2018-12-03-option-response-msg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;OPTIONS 方法是 HTTP/1.1 中定义的方法，用以从服务器获取更多的信息，该方法不会对服务器资源产生影响。预检请求的 Headers 中携带了两个字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Request-Method: POST
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Request-Headers: X-PINGOTHER, Content-Type&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;Access-Control-Request-Method: POST&lt;/code&gt; 字段告诉服务器，实际请求将使用 &lt;code&gt;POST&lt;/code&gt; 方法；&lt;code&gt;Access-Control-Request-Headers&lt;/code&gt; 字段告诉服务器，实际请求将携带两个自定义请求的 Header 字段：&lt;code&gt;X-PINGOTHER&lt;/code&gt; 和 &lt;code&gt;Content-Type&lt;/code&gt;，服务器根据此决定，该实际请求是否被允许。&lt;/p&gt;

&lt;p&gt;OPTIONS 响应报文表明服务器将接受后续的实际请求，其中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Origin: http://foo.example
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Methods: POST, GET, OPTIONS
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Allow-Headers: X-PINGOTHER, Content-Type
&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;Access-Control-Max-Age: 86400&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;表示允许 &lt;code&gt;http://foo.example&lt;/code&gt; 的域进行访问；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Methods&lt;/code&gt; 表明允许客户端发送 &lt;code&gt;POST&lt;/code&gt;，&lt;code&gt;GET&lt;/code&gt;，&lt;code&gt;OPTIONS&lt;/code&gt; 请求；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Headers&lt;/code&gt; 表明语序客户端携带 &lt;code&gt;X-PINGOTHER&lt;/code&gt; 和 &lt;code&gt;Content-Type&lt;/code&gt; Header 字段；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Max-Age&lt;/code&gt; 表明该响应的有效时间为 86400 秒（24 小时），在有效时间内，浏览器无需为同一请求再次发起预检请求。（注，浏览器自身维护了一个最大有效时间，如果该 Header 字段超过了最大有效时间，将不会生效）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;预检请求完成之后，发送实际的请求，请求报文如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;nf&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;/resources/post-here/&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.1&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;bar.other&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;User-Agent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1b3pre) Gecko/20081130 Minefield/3.1b3pre&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Accept&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Accept-Language&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;en-us,en;q=0.5&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Accept-Encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;gzip,deflate&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Accept-Charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;ISO-8859-1,utf-8;q=0.7,*;q=0.7&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;keep-alive&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;X-PINGOTHER&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;pingpong&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;text/xml; charset=UTF-8&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Referer&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;http://foo.example/examples/preflightInvocation.html&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Content-Length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;55&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Origin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;http://foo.example&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Pragma&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;no-cache&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Cache-Control&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;no-cache&lt;/span&gt;

&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=&amp;#34;1.0&amp;#34;?&amp;gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;person&amp;gt;&amp;lt;name&amp;gt;&lt;/span&gt;Arun&lt;span class=&#34;nt&#34;&gt;&amp;lt;/name&amp;gt;&amp;lt;/person&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;响应报文：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span class=&#34;kr&#34;&gt;HTTP&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1.1&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;ne&#34;&gt;OK&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;Mon, 01 Dec 2008 01:15:40 GMT&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Server&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;Apache/2.0.61 (Unix)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;http://foo.example&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Vary&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;Accept-Encoding, Origin&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Content-Encoding&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;gzip&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Content-Length&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;235&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Keep-Alive&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;timeout=2, max=99&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Connection&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;Keep-Alive&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;l&#34;&gt;text/plain&lt;/span&gt;

[Some GZIP&amp;#39;d payload]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;3-4-附带身份认证的请求&#34;&gt;3.4 附带身份认证的请求&lt;/h3&gt;

&lt;p&gt;一般而言，对于跨域 &lt;code&gt;XMLHTTPRequest&lt;/code&gt; 或者 &lt;code&gt;Fetch&lt;/code&gt; 请求，浏览器不会发送身份凭证信息，如果需要发送身份凭证信息，需要把 &lt;code&gt;XMLHTTPRequest&lt;/code&gt; 的 &lt;code&gt;withCredentials&lt;/code&gt; 属性设置为 &lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;举个例子，下面这段代码表示 &lt;code&gt;http://foo.example&lt;/code&gt; 向 &lt;code&gt;http://bar.other&lt;/code&gt; 发送一个 &lt;code&gt;GET&lt;/code&gt; 请求，并且设置 &lt;code&gt;Cookies&lt;/code&gt;。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://bar.other/resources/credentialed-content/&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    
&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callOtherDomain&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;withCredentials&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;onreadystatechange&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;invocation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; 
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;通过把 &lt;code&gt;withCredentials&lt;/code&gt; 设置为 &lt;code&gt;true&lt;/code&gt;，从而向服务器发送一个携带 &lt;code&gt;Cookies&lt;/code&gt; 的请求。因为这是一个简单的 &lt;code&gt;GET&lt;/code&gt; 请求，所以浏览器不会发起预检请求，但是，服务端的响应中如果未携带 &lt;code&gt;Access-Control-Allow-Credentials: true&lt;/code&gt; ，浏览器不会把响应内容返回给请求的发送者。&lt;/p&gt;

&lt;p&gt;对于携带身份认证的请求，服务器不得设置 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 的值为 &lt;code&gt;*&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;3-5-用于-cors-的-headers&#34;&gt;3.5 用于 CORS 的 Headers&lt;/h3&gt;

&lt;p&gt;下面列出所有用于 HTTP 请求和响应中的 Header 字段，具体的使用请查阅&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#The_HTTP_response_headers&#34;&gt;相关文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;HTTP 请求 Headers：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Origin&lt;/code&gt;：表明预检请求或实际请求的源站，它不包含任何路径信息，只是服务器名称（URI）；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Request-Method&lt;/code&gt;：用于预检请求，作用是将实际请求所使用 HTTP 方法告诉服务器；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Request-Headers&lt;/code&gt;：用于预检请求，作用是将实际请求所使用的 Header 字段告诉服务器；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP 响应 Headers：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt;：指定了允许访问该资源的外域 URI；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Expose-Headers&lt;/code&gt;：让服务器把允许浏览器访问的头放入白名单，这样浏览器就能使用 &lt;code&gt;getResponseHeader&lt;/code&gt; 方法来访问了；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Max-Age&lt;/code&gt;：指定了预检请求的结果能够被缓存多久；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Credentials&lt;/code&gt;：指定了当浏览器的&lt;code&gt;credentials&lt;/code&gt;设置为 true 时是否允许浏览器读取 response 的内容；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Access-Control-Allow-Headers&lt;/code&gt;：用于预检请求的响应。其指明了实际请求中允许携带的首部字段。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;四-服务器端实现&#34;&gt;四、服务器端实现&lt;/h2&gt;

&lt;p&gt;为了实现 CORS，在服务器端需要做一些工作，最主要的就是在响应 Header 中添加指定的字段。&lt;/p&gt;

&lt;p&gt;如果是使用 Python + Flask 的开发的话，可以在 &lt;code&gt;after_app_request&lt;/code&gt; 钩子函数中添加指定的响应头：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;nd&#34;&gt;@app.after_app_request&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;after_request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;正常请求结束后的处理&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
    &lt;span class=&#34;c1&#34;&gt;# ... some code here&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Access-Control-Allow-Origin&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;http://example.com&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Access-Control-Allow-Methods&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;GET, PUT, POST, DELETE, HEAD, OPTIONS&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Access-Control-Allow-Headers&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;
        &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type, Authorization, X-Requested-With&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    
    &lt;span class=&#34;c1&#34;&gt;# ... some code here&lt;/span&gt;
    
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其他语言在对应的钩子函数中处理即可。&lt;/p&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&#34;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy&#34;&gt;Same-origin policy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/2016/04/same-origin-policy.html&#34;&gt;浏览器同源政策及其规避方法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;这个例子的来源：&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS&#34;&gt;Cross-Origin Resource Sharing (CORS)&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>读《程序员修炼之道》（二）</title>
      <link>http://blog.jiayuanzhang.com/post/notes-on-the-pragmatic-programmer-part-2/</link>
      <pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/notes-on-the-pragmatic-programmer-part-2/</guid>
      <description>

&lt;h3 id=&#34;重复的危害&#34;&gt;重复的危害&lt;/h3&gt;

&lt;p&gt;系统中的每一项知识都必须具有单一、无歧义、权威的表示。（感觉翻译得怪怪的）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 11
DRY - Don&amp;rsquo;t Repeat Yourself
不要重复你自己&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;重复是怎样发生的&#34;&gt;重复是怎样发生的&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;强加的重复（imposed duplication）：开发者觉得他们无可选择 —— 环境似乎要求重复。&lt;/li&gt;
&lt;li&gt;无意的重复（inadvertent duplication）：开发者没有意识到他们在重复信息。&lt;/li&gt;
&lt;li&gt;无耐性的重复（impatient duplication）：开发者偷懒，他们重复，因为那样似乎更容易。&lt;/li&gt;
&lt;li&gt;开发者之间的重复（interdeveloper duplication）：同一团队（或不同团队）的几个人重复了同样的信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;强加的重复&#34;&gt;强加的重复&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;信息的多种表示&lt;/p&gt;

&lt;p&gt;我们也许在编写客户-服务器应用，在客户和服务器端使用了不同的语言，并且需要在两端都表示某种共有的结构。我们或许需要一个类，其属性是某个数据库表的 schema。&lt;/p&gt;

&lt;p&gt;解决办法是编写简单的过滤器或代码生成器。可以在每次构建（build）软件时，使用简单的代码生成器，根据公共的元数据表示构建多种语言下的结构。可以用最初用于构建 schema 的元数据，自动生成类定义。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码中的文档&lt;/p&gt;

&lt;p&gt;代码为什么需要注释：糟糕的代码才需要许多注释。&lt;/p&gt;

&lt;p&gt;DRY 法则告诉我们，要把低级的知识放在代码中，它属于那里；把注释保留给其他高级说明。否则，我们就是在重复知识，而每一次改变都意味着既要改变代码，也要改变注释。注释将不可避免地变得过时，而不可信任的注释比完全没有注释更糟。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;文档与代码&lt;/p&gt;

&lt;p&gt;你撰写文档，然后编写代码。有些东西变了，你修订文档、更新代码。文档和代码都含有同一知识表示。&lt;/p&gt;

&lt;p&gt;可以根据文档来生成测试。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;语言问题&lt;/p&gt;

&lt;p&gt;许多语言会在源码中强加可观的重复。如果语言使模块的接口与其实现分离，就常常会出现这样的情况。C/C++ 有头文件，在其中重复了被导出变量、函数和（C++）类的名称和类型信息。&lt;/p&gt;

&lt;p&gt;再思考一下头文件和实现文件中的注释。绝对没有理由在这两种文件之间重复函数或类头注释（head comment）。应该用头文件记载接口问题，用实现文件记载代码的使用者无需了解的实际细节。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;无意的重复&#34;&gt;无意的重复&lt;/h5&gt;

&lt;p&gt;有时，重复来自设计中的错误。&lt;/p&gt;

&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lenght&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;第一眼看上去这个类似乎是合理的。线段显然有起点和终点，并总是有长度的。但这里有重复，长度是由起点和终点决定的：改变其中一个，长度就会变化。最好是让长度编程计算字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lenght&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;distanceTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id=&#34;无耐性的重复&#34;&gt;无耐性的重复&lt;/h5&gt;

&lt;p&gt;每个项目都有时间压力。&lt;/p&gt;

&lt;p&gt;如果你觉得受到了诱惑，想一想古老的格言「欲速则不达」。你现在也许可以节省几秒钟（感觉不止），但以后可能损失几小时。（如果一个人不打算在公司长久待下去的话是会写出重复的代码的，所以 code review 要做好）&lt;/p&gt;

&lt;p&gt;无耐性的重复是一种容易检测和处理的重复形式，但那需要你接受训练，并愿意为避免以后的痛苦而预先话一些时间。&lt;/p&gt;

&lt;h5 id=&#34;开发者之间的重复&#34;&gt;开发者之间的重复&lt;/h5&gt;

&lt;p&gt;或许最难检测和处理的重复发生在项目的不同开发者之间。处理这个问题的最佳方式是鼓励开发者进行主动地交流。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 12
Make It Easy to Reuse
让复用变得容易&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你所要做的就是营造一种环境，在其中找到并复用已有的东西，比自己编写更容易。&lt;/p&gt;

&lt;h3 id=&#34;正交性&#34;&gt;正交性&lt;/h3&gt;

&lt;p&gt;如果你想要制作易于设计、构建、测试及扩展的系统，正交性是一个十分关键的概念。&lt;/p&gt;

&lt;h4 id=&#34;什么是正交性&#34;&gt;什么是正交性&lt;/h4&gt;

&lt;p&gt;「正交性」是从几何学中借来的术语。如果两条直线相交成直角，它们就是正交的。&lt;/p&gt;

&lt;p&gt;在计算机技术中，该术语用于表示某种不相依赖性和解耦性。如果两个或更多事物中的一个发生变化，不会影响到其他事物，这些事物就是正交的。&lt;/p&gt;

&lt;h4 id=&#34;正交的好处&#34;&gt;正交的好处&lt;/h4&gt;

&lt;p&gt;非正交系统的改变与控制更复杂是其固有的性质。当任何系统的各组件互相高度依赖时，就不在具有局部修正这样的事情。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 13
Eliminate Effects Between Unrelated Things
消除无关事物之间的影响&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们想要设计自足（self-contained）的组件：独立、具有单一、良好定义的目的（内聚）。如果组件是相互隔离的，你就知道你能够改变其中之一，而不用担心其余组件。只要你不改变组件的外部接口。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;提高生产率

&lt;ul&gt;
&lt;li&gt;改动得以局部化，所以开发实践和测试时间得以降低。编写多个相对较小的、自足的组件更为容易，你可以设计、编写简单的组间，对其进行单元测试。当你增加新代码时，无需不断改动已有的代码。&lt;/li&gt;
&lt;li&gt;正交的途径还能够促进复用。如果组间具有明确而具体的、良好定义的责任，就可以把它们和新组件整合到一起。&lt;/li&gt;
&lt;li&gt;如果你对正交的组件进行组合，生产效率会有相当微妙的提高（M x N &amp;gt; M * (N - i), i 为 M、N 重复内容）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;降低风险

&lt;ul&gt;
&lt;li&gt;有问题的代码区域被隔离开来。&lt;/li&gt;
&lt;li&gt;所得的系统更健壮。&lt;/li&gt;
&lt;li&gt;政教系统很可能得到更好的测试。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;项目团队&#34;&gt;项目团队&lt;/h4&gt;

&lt;p&gt;怎样把团队划分为责任得到了良好定义的小组，并使重叠降至最低呢？没有简单的答案。我们的偏好是从使基础设施与应用分离开始。每个主要的基础设施组间（数据库、通信接口、中间件层等）有自己的子团队。如果应用功能的划分显而易见，那就照此划分。然后我们考察现有的人员，并对分组进行相应的调整。&lt;/p&gt;

&lt;p&gt;在讨论每个所需改动时需要涉及多少人。人数越多，团队的正交性就越差。&lt;/p&gt;

&lt;h4 id=&#34;设计&#34;&gt;设计&lt;/h4&gt;

&lt;p&gt;对于正交设计，有一种简单的测试方法。一旦设计好组件，问问你自己：如果我显著地改变了某个特定功能背后的需求，有多少模块会受到影响？在正交系统中，大难应该是「一个」。&lt;/p&gt;

&lt;p&gt;不要依赖你无法控制的事物属性。&lt;/p&gt;

&lt;h4 id=&#34;工具箱与库&#34;&gt;工具箱与库&lt;/h4&gt;

&lt;p&gt;在你引入第三方工具箱和库时，要注意保持系统的正交性。要明智地选择技术。它是否会迫使你对代码进行不必要的改动。如果对象持久模型（object persistence scheme）是透明的，那么它就是正交的。如果它要求你以一种特殊的方式创建或访问对象，那么它就不是正交的。&lt;/p&gt;

&lt;p&gt;正交性的另一个有趣的变体是面向切片编程（Aspect-Oriented Programming, AOP）。AOP 能让你在一个地方表达本来会分散在源码各处的某种行为。例如，日志消息通常是在源码各处、通过显式地调用某个日志函数生成的。通过 AOP，你可以把日志功能正交地实现到要进行日志记录的代码中。（Python 中的装饰器就可以实现这个功能）&lt;/p&gt;

&lt;h4 id=&#34;编码&#34;&gt;编码&lt;/h4&gt;

&lt;p&gt;你可以将若干技术用于维持正交性：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;让你的代码保持「解耦」：编写不会没有必要地向其他模块暴露任何事情、也不依赖其他模块具体实现的模块。&lt;/li&gt;
&lt;li&gt;避免使用全局数据&lt;/li&gt;
&lt;li&gt;避免编写相似的函数：使用 Strategy（策略）模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;养成不断地批判对待自己打的代码的习惯，寻找任何重新进行组织、以改善其结构和正交性的机会。这个过程叫重构（refactoring）。&lt;/p&gt;

&lt;h4 id=&#34;测试&#34;&gt;测试&lt;/h4&gt;

&lt;p&gt;正交地设计和实现的系统也更易于测试，因为系统的各组件间的交互是形式化和有限的，更多的系统测试可以在单个的模块进行。&lt;/p&gt;

&lt;h3 id=&#34;可撤销性&#34;&gt;可撤销性&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;如果某个想法是你唯一的想法，再没有什么比这更危险的事了。 —— Emil-Auguste Chartier&lt;/p&gt;

&lt;p&gt;Tip 14
There Are No Final Decisions
不存在最终决策&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通常，你可以把第三方产品隐藏在定义良好的抽象接口后面。&lt;/p&gt;

&lt;h3 id=&#34;曳光弹&#34;&gt;曳光弹&lt;/h3&gt;

&lt;p&gt;为了在代码中获得「曳光弹」的效果，我们要找到某种东西，让我们能快速、直观和可重复地从需求出发，满足最终系统的某个方面要求。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 15
Use Tracer Bullets to Find the Target
用曳光弹找到目标&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;曳光弹告诉你击中的是什么，那不一定总是目标，于是你调整准心，直到完全击中目标为止，这正是要点所在。&lt;/p&gt;

&lt;h3 id=&#34;原型与便笺&#34;&gt;原型与便笺&lt;/h3&gt;

&lt;p&gt;你可以为下列事物制作原型：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;架构&lt;/li&gt;
&lt;li&gt;已有系统中的新功能&lt;/li&gt;
&lt;li&gt;外部数据的结构或内容&lt;/li&gt;
&lt;li&gt;第三方工具或组件&lt;/li&gt;
&lt;li&gt;性能问题&lt;/li&gt;
&lt;li&gt;用户界面设计&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;原型制作是一种学习经验。其价值并不在于所产生的代码，而在于所学到的经验教训。那才是原型制作的要点所在。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 16
Prototype to Learn
为了学习而制作原型&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;怎样使用原型&#34;&gt;怎样使用原型&lt;/h4&gt;

&lt;p&gt;在构建原型时，你可以忽略哪些细节？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;正确性：你也许可以在适当的地方使用虚假的数据；&lt;/li&gt;
&lt;li&gt;完整性：原型也许只能在非常有限的意义上工作；&lt;/li&gt;
&lt;li&gt;健壮性：错误检查很有可能不完整。如果你偏离预定路径，原型就可能崩溃，这没有关系；&lt;/li&gt;
&lt;li&gt;风格：原型代码可能没有多少注释或文档。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为原型应该遮盖细节，并聚焦于所考虑系统的某些具体方面，你可以用非常高级的语言实现原型。高级的脚本语言能让你推迟考虑许多细节，并且仍然能制作出可以工作的代码。&lt;/p&gt;

&lt;h4 id=&#34;制作架构原型&#34;&gt;制作架构原型&lt;/h4&gt;

&lt;p&gt;一些你可以在架构原型中寻求解答的具体问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主要组间的责任是否得到了良好的定义？是否适当？&lt;/li&gt;
&lt;li&gt;主要组间间的协作是否得到了良好的定义？&lt;/li&gt;
&lt;li&gt;耦合是否得以最小化？&lt;/li&gt;
&lt;li&gt;你能否确定重复的潜在来源？&lt;/li&gt;
&lt;li&gt;接口定义和各项约束是否可接受？&lt;/li&gt;
&lt;li&gt;每个模块在执行过程中是否能访问到其所需的数据？能够在需要时进行访问？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;领域语言&#34;&gt;领域语言&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 17
Program Close to the Problem domain
靠近问题领域编程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;无论适用于配置和控制应用程序的简单语言，还是用于指定规则或过程的更为复杂的语言，我们认为，你都应该考虑让你的项目更靠近问题领域。通过在更高的抽象层面上编码，你获得了专心解决领域问题的自由，并且可以忽略琐碎的实现细节。&lt;/p&gt;

&lt;h3 id=&#34;估算&#34;&gt;估算&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 18
Estimate to Avoid Surprises
估算，以避免发生意外&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;估算来自哪里&#34;&gt;估算来自哪里&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;理解提问内容：任何估算练习的第一步都是建立对提问内容的理解。除了上面讨论的精确度以外，你还需要把我问题域的范围。这常常隐含在问题中，但你需要养成在开始猜想之前先思考范围的习惯。&lt;/li&gt;
&lt;li&gt;建立系统的模型：根据你对所提问题的理解，建立粗略、就绪的思维模型骨架。&lt;/li&gt;
&lt;li&gt;把模型分解为组件：你需要找出描述这些组件怎样交互的数学规则。你将会发现，在典型的情况下，每个组件都有一些参数，会对它给整个模型带来什么造成影响。在这一阶段，只要确定每个参数就行了。&lt;/li&gt;
&lt;li&gt;给每个参数指定值：一旦你分解出各个参数，你就可以逐一给每个参数赋值。在这个步骤中你可能会引入一些错误。诀窍是找出哪些参数对结果的影响最大，并致力于让它们大致正确。&lt;/li&gt;
&lt;li&gt;计算答案：在计算阶段，你可能会得到看起来很奇怪的答案。不哟啊太快放弃它们，如果你的运算是正确的，那你对问题或模型的理解就很可能是错的。这是非常宝贵的信息。&lt;/li&gt;
&lt;li&gt;追踪你的估算能力&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;估算项目进度&#34;&gt;估算项目进度&lt;/h4&gt;

&lt;p&gt;在面对相当大的应用开发的各种复杂问题与反复无常的情况时，普通的估算规则可能会失效。为项目确定进度表的唯一途径常常是在相同的项目上获取经验。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;检查需求&lt;/li&gt;
&lt;li&gt;分析风险&lt;/li&gt;
&lt;li&gt;设计、实现、继承&lt;/li&gt;
&lt;li&gt;向用户确认&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 19
Iterate the Schedule with the Code
通过代码对进度表进行迭代&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;第二章其实更多的再讲团队和产品设计方面的问题，自己在这两方面并没有什么经验。不过 DRY 和正交性的概念还是比较重要的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>读《程序员修炼之道》（一）</title>
      <link>http://blog.jiayuanzhang.com/post/notes-on-the-pragmatic-programmer-part-1/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/notes-on-the-pragmatic-programmer-part-1/</guid>
      <description>

&lt;p&gt;实习到现在差不多两个月了，博客也一直荒废了没写。这次更新就先来写写读书笔记好了。&lt;/p&gt;

&lt;p&gt;这本书从书名来看其实很像那种鸡汤类的书，英文名「The Pragmatic Programmer」（注重实效的程序员）看上去就好了许多。&lt;a href=&#34;https://book.douban.com/subject/1152111/&#34;&gt;豆瓣评分&lt;/a&gt; 8.6 分。大一的时候买的书，之前随意地写过几年的玩具代码，所以初读这本书的时候觉得很有道理，但是读完了之后发现什么也没有记住。用&lt;a href=&#34;http://blog.youxu.info&#34;&gt;徐宥&lt;/a&gt;的话来说就是「读者如果没有类似的经历，看到这些珠玑，也只是觉得把玩颇为有趣而已，极少能有同感。」大一的时候读这是这种感觉。&lt;/p&gt;

&lt;p&gt;出来实习之后，接触到实际生产中的代码，在代码量比较大的情况下（几十万行），之前书中所讲的一些问题都一一浮现了。为了写出优雅的代码，有必要把这本书再读一遍，可能以后还要反复读很多遍（不是所有的内容看一遍就能内化在心里的），所以每读一部分就记一点笔记，留作日后复习用。&lt;/p&gt;

&lt;p&gt;给自己制定以下阅读的计划，因为这本书每一张的内容读起来都比较轻松，所以预计用两周的时间读完：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;每 1-2 天阅读一章（共 8 章）&lt;/li&gt;
&lt;li&gt;每一章都写一篇笔记，读的时候可以做一些摘录，读完一章之后写一篇总结性的笔记；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面是「序言」和「第一章」的笔记。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;序&#34;&gt;序&lt;/h2&gt;

&lt;h3 id=&#34;注重实效的程序员都有哪些特征&#34;&gt;注重实效的程序员都有哪些特征&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;早期的采纳者/快速的改编者：给你一样新东西，你很快能把握它，并把它与你的知识的其余部分结合在一起（尝试新技术）；&lt;/li&gt;
&lt;li&gt;好奇：你喜欢提问，你是收集小知识的林鼠（建立自己的知识 wiki）；&lt;/li&gt;
&lt;li&gt;批判的思考者：你会首先抓住事实，而不是照搬别人所说的；&lt;/li&gt;
&lt;li&gt;有现实感：你会设法理解你面临的每个问题的内在本质（事情有多困难，需要花多长时间完成？）&lt;/li&gt;
&lt;li&gt;多才多艺：你尽力熟悉广泛的技术和环境；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（审视一下自己，上面几点好像都没有做到，或者说有的做到了但是并不到位。）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 1
Care About Your Craft
关心你的技艺&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如何做到上面所说的？&lt;strong&gt;在你做某件事情的时候思考你在做什么&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 2
Think! About Your Work
思考！你的工作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;它是一个持续的过程&#34;&gt;它是一个持续的过程&lt;/h3&gt;

&lt;p&gt;每天为提炼你所拥有的技能而工作，为把新的工具增加到你的技能列表中二工作。草坪不是一天修成的。&lt;/p&gt;

&lt;h2 id=&#34;第一章-注重实效的哲学&#34;&gt;第一章：注重实效的哲学&lt;/h2&gt;

&lt;h3 id=&#34;我的源码让猫给吃了&#34;&gt;我的源码让猫给吃了&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在所有的弱点中，最大的弱点就是害怕暴露弱点。—— J.B.Bossuet&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果你确实同意要为某个结果负责，你就应该切实负起责任。当你犯错误的时候，不要责备别人或别的东西，或是拼凑借口。你可以选择提供解决方案，而不是寻找借口。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 3
Provide Options, Don&amp;rsquo;t Make Lame Excuses
提供各种选择，不要找蹩脚的借口&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在你走向任何人，告诉他们为何某件事做不到、为何耽搁、为何出现问题之前，先停下来，听一听你心里的声音。在你去告诉他们坏消息之前，是否还有其他你可以再试一试的办法？有时，你其实知道他们会说什么，所以还是不要给他们添麻烦。&lt;/p&gt;

&lt;p&gt;（这一点深有感触，在实习的这一段时间里面，经常因为一些小事去麻烦 leader，比如说环境跑步起来，某个莫名其妙的报错等，这虽然有文档不全的原因在，不过自己也没想着去补全文档这种解决办法。）&lt;/p&gt;

&lt;h3 id=&#34;软件的熵&#34;&gt;软件的熵&lt;/h3&gt;

&lt;p&gt;软件中的无序增长时，程序员们称之为「软件腐烂」（software rot）。&lt;/p&gt;

&lt;p&gt;「破窗理论」：以一幢有少许破窗的建筑为例，如果那些窗不被修理好，可能将会有破坏者破坏更多的窗户。最终他们甚至会闯入建筑内，如果发现无人居住，也许就在那里占领、定居或者纵火。又或想像一条人行道有些许纸屑，如果无人清理，不久后就会有更多垃圾，最终人们会视为理所当然地将垃圾顺手丢弃在地上。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 4
Don&amp;rsquo;t Live with Broken Windows
不要容忍破窗户&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不要留着「破窗户」（低劣的设计、错误决策、或是糟糕的代码）不修，发现一个修一个。&lt;/p&gt;

&lt;p&gt;如果没有足够的时间进行适当的修理，可以把出现问题的代码放到注释中，或者是用虚拟的数据来代替。&lt;strong&gt;采取某种行动防止进一步破坏，并说明情势处在你的控制之下&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;如果你发现自己在有好些破窗户的项目里工作，会很容易产生这样的想法：「这些代码的其余部分也是垃圾，我只要照着做就行了。」&lt;/p&gt;

&lt;h3 id=&#34;石头汤与煮青蛙&#34;&gt;石头汤与煮青蛙&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 5
Be a Catalyst for Change
做变化的催化剂&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（有的时候想要做出一个新功能，可以先开发一个简单的版本，然后诱导别人往其中添加新功能。）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 6
Remember the Big Picture
记住大图景&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当你设法催生变化时，你能否确定你是在做石头汤还是青蛙汤？决策是主观的还是客观的？&lt;/p&gt;

&lt;h3 id=&#34;足够好的软件&#34;&gt;足够好的软件&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 7
Make Quality a Requirements Issue
使质量称为需求问题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不要因为过度修饰和过于精于求精而破坏完好的程序。继续前进，让你的代码凭借自己的质量站立一会儿，它也许不完美，但不用担心：它不可能完美。&lt;/p&gt;

&lt;h3 id=&#34;你的知识资产&#34;&gt;你的知识资产&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;知识上的投资总能得到最好的回报。—— 本杰明·富兰克林&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;管理知识资产与管理金融资产非常相似：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;严肃的投资者定期投资&lt;/li&gt;
&lt;li&gt;多元化是长期成功的关键：你知道的不同的事情越多，你就越有价值。作为底线，你需要知道你目前所用的特定技术的各种特性，但不要就此止步。&lt;/li&gt;
&lt;li&gt;聪明的投资者在保守的投资和高风险、高回报的投资之间平衡他们的资产&lt;/li&gt;
&lt;li&gt;投资者设法低买高卖，以获取最大回报：在新兴的技术流行之前学习它可能就和找到被低估的股票一样困难，但所得到的就和那样的股票带来的收益一样。&lt;/li&gt;
&lt;li&gt;应周期性地重新评估和平衡资产&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 8
Invest Regularly in YOur Knowledge Portfolio
定期为你的知识资产投资&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;每年至少学习一种新语言&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每季度阅读一本技术书籍&lt;/strong&gt;。一旦你养成习惯，就一个月读一本书。在你掌握了你正在使用的技术之后，扩宽范围，阅读一些与你的项目无关的书籍。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;也要阅读非技术书籍&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上课&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参加本地用户组织&lt;/strong&gt;。不要只是去听讲，而要主动参与。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;试验不同的环境&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跟上潮流&lt;/strong&gt;。订阅商务杂志和其他期刊。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上网&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;持续投入非常重要，一旦你熟悉了某种新语言或技术，继续前进，学习另外一种。设法把你学到的东西应用到你当前的项目当中，即使你的项目没有使用该技术，你或许也能借鉴一些想法。&lt;/p&gt;

&lt;p&gt;所有阅读和研究都需要时间，而时间已经很短缺。所以你需要预先规划。让自己在空闲的片刻时间里总有东西可读。&lt;/p&gt;

&lt;p&gt;最后一个药店是，批判地思考你读到的和听到的。你需要确保你的资产中的知识是准确的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 9
Critically Analyze What You Read and Hear
批判地分析你读到的和听到的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;交流&#34;&gt;交流&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 10
It&amp;rsquo;s Both What You Say and the Way You Say It
你说什么和你怎么说同样重要&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;除非你生活在真空中，你猜不需要交流，交流越有效，你就越有影响力。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;大概花了两个多小时的时间把第一章的内容看了一遍，顺便摘录了一些内容。这一章其实更多的是讲「道」层面上的内容，与技术内容关联不大，但又是至关重要的，做好了上面几点可以从「码农」蜕变成「程序员」，能有自己的思考，能够与他人交流，能够对自己进行投资，而不是一味地按照要求写代码。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016 音乐总结</title>
      <link>http://blog.jiayuanzhang.com/post/digital-life-in-2016-music-part/</link>
      <pubDate>Fri, 24 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/digital-life-in-2016-music-part/</guid>
      <description>

&lt;p&gt;最近知乎上的一个朋友和我私信聊了一些关于效率工具以及 Workflow（此处指的是「工作流」）方面的一些问题。聊的内容比较碎片，所以还是打算写一篇文章来具体讨论一下。考虑到会涉及很多不同的主题，所以还是一个主题写一篇，这样也可以控制文章的长度。暂定按照以下主题来写：音乐篇、阅读篇、写作篇和时间管理篇。&lt;/p&gt;

&lt;p&gt;音乐对我来说，应该算是日常生活中比较重要的一项内容了，除了一些需要特别 Focus 的工作（例如看数学）不会听音乐外，其他时间都会戴着耳机。2016 年彻底地转入到 Apple Music 中来，期间试用过一段时间的 Spotify，网易云音乐几乎没怎么打开过。这篇打算讨论一下所有（尽量）听音乐方面相关的问题。&lt;/p&gt;

&lt;h2 id=&#34;用什么设备听&#34;&gt;用什么设备听&lt;/h2&gt;

&lt;p&gt;我的大多数电子设备都是 Apple 系的，包括 rMBP、iPhone、iPad，所以听音乐也都是围绕着这些设备来。严格的来说，并不能算一个「音乐发烧友」，我对设备的要求并不是太高，甚至对音源也没有太高的要求，Apple Music 的音质已经完全能够满足了，无损音源内容几乎不听，其一是没有购买 CD 的习惯，所以没有合法的途径获取无损资源；其二是一直都是拿 iTunes 听音乐，无损还需要转格式编辑信息，过于麻烦。&lt;/p&gt;

&lt;p&gt;主力播放器是 Macbook，几乎 80% 的时间都是在 Macbook 上听（写代码、阅读、写作等）。另外便是新购入的 iPhone 7，主要是外出坐车、跑步或是睡前听一下（之前是用 5s）。iPad 很少用来听音乐。&lt;/p&gt;

&lt;p&gt;使用的耳机是 &lt;a href=&#34;https://www.amazon.com/Westone-Pro30-Performance-Universal-Earphones/dp/B00FKY3IFA&#34;&gt;Westone UM Pro 30&lt;/a&gt;，使用体验很好，对比 Apple 自带的耳机有惊艳的提升，而且长时间佩戴也没有不适感（几乎没有戴着耳机的感觉）。想要具体了解得可以去搜相关的评测来看。&lt;/p&gt;

&lt;p&gt;耳机是在 7 发售之前买的，传闻 7 要去掉耳机接口的时候其实我是不信的，结果还真去掉了。这导致了插 7 上需要多接一根转接线，略显累赘，所以现在在 iPhone 上听歌就直接拿自带的耳机了。&lt;/p&gt;

&lt;h2 id=&#34;为什么不用网易云音乐&#34;&gt;为什么不用网易云音乐&lt;/h2&gt;

&lt;p&gt;我知道，我也很讨厌类似「我为什么不 xxx」的说法，「不用就不用，还要批判一番」，但是还是要写一写。&lt;/p&gt;

&lt;p&gt;其实我很早就开始使用网易云音乐了，那个时候一些热门的歌曲下评论还只有几百条，不像现在，动辄上千上万条评论。也安利过身边好多人用，曾经是长期的会员用户，所以还是有一些资格来谈论一下这个音乐服务的。&lt;/p&gt;

&lt;p&gt;很明显，网易云音乐最初就是模仿 Spotify 的，包括界面设计，几乎一模一样。除了借鉴 Spotify 之外，网易云音乐还加入了很多自己的「创新」，而正是这些所谓的创新，让我开始慢慢得不想用它。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;评论：其实我是赞成加入评论功能的，但是网易云的评论已经偏离了音乐评论的范围，变成了编故事、讲段子、骗赞评论的聚集地。认真评论音乐的几乎没有，我不知道如果想看段子为什么不上微博？这一点实际上让一个音乐软件变成了社交软件，不好意思，我只想好好听音乐。&lt;/li&gt;
&lt;li&gt;歌曲：网易云上很多歌曲的信息混乱不堪，包括专辑信息、专辑封面、年份等，很多单曲甚至没有专辑信息，直接被编排到「热门歌曲串烧」这样的专辑里，我有强迫症，看着挺 low 的。并且很多的歌来源都不明确，大多数都是网友上传，甚至很多 Bilibili 鬼畜区的音乐也被上传上来，哪天听推荐就冷不丁得听到。&lt;/li&gt;
&lt;li&gt;专辑封面不完整：网易云的一大特色就是模仿唱片机旋转，想看一下专辑封面是什么样还要点到专辑列表里面去看。在我看来，在电子设备上「拟物」是一种很没有效率的事，就像之前电子书的模拟翻页一样，「翻页」这个动作本来就是一个三维的过程，在手机上再怎么模拟也达不到现实中的效果，「瀑布式」的阅读方式才是正确的选择。所以我推崇「反拟物化」、「扁平化」和「极简化」的设计风格。&lt;/li&gt;
&lt;li&gt;歌单：几乎所有的歌单都是由用户创建，和 Apple Music 与 Spotify 专门的音乐编辑创建的歌单相比，高下立判。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在我看来，听音乐是一件很纯粹的事，而网易云给这件纯粹的事加了太多的东西。&lt;/p&gt;

&lt;h2 id=&#34;apple-music-之痛&#34;&gt;Apple Music 之痛&lt;/h2&gt;

&lt;p&gt;Apple Music 自从 2015 年 6 月发布以来，到现在已经有接近两年的时间了，从发布当天付费到现在，中间用了一段时间的国区，由于曲库原因，现在还换回了港区，每月 48 港币，虽然比国区每月 10 ￥（学生 5 ￥）贵了不少，不过依然很值，想想一张专辑的钱就可以听一个月。&lt;/p&gt;

&lt;p&gt;虽说经过这么长时间的发展，Apple Music 依然可以说做得很烂，我在一年前的一篇文章（&lt;a href=&#34;http://forrestchang.github.io/14824082548997.html&#34;&gt;《Apple Music，古典音乐，阅读》&lt;/a&gt;）中已经吐槽过了，除了网络问题有了明显改善之外，其他的并没有太大的改进。以至于现在每年的 WWDC 最期待的不是发布什么新产品，而是 Apple Music 有什么大的改进，加了些什么功能。&lt;/p&gt;

&lt;p&gt;我在 V2EX 上也发过&lt;a href=&#34;https://www.v2ex.com/t/336425&#34;&gt;一篇帖子&lt;/a&gt;吐槽过 Apple Music。&lt;/p&gt;

&lt;p&gt;这些问题肯定和 iTunes 的历史因素有关，iTunes 本身就是作为一个音乐商店，在没有 Apple Music 之前，听音乐的流程就是从商店中购买数字音乐（或者从 CD 中导入），然后添加到 Library 中，之后对这些音乐做什么事都与商店中的音乐无关了。而到了 Apple Music，它依然延续着之前的流程，当把音乐添加到 Library 中后，你对音乐做出的评分、加心实际上都和云端的数据无关了，所有数据都存放在本地的 &lt;code&gt;iTunes Library.xml&lt;/code&gt; 文件中，所以这才会导致一部分音乐明明加过心了，到了手机上一看却是没有加过心的，并且由于存放在本地的原因，云端的数据也不会更新，这也会影响到每天推荐给你的音乐。&lt;/p&gt;

&lt;p&gt;Medium 上的一个设计师专门帮 Apple Music 重新设计了一下：&lt;a href=&#34;https://medium.com/product-design-ux-ui/apple-music-redesign-part-1-526c4c4c4777#.lopgpvt41&#34;&gt;Apple Music Redesign&lt;/a&gt;，在我看来，比原版的 Apple Music 好太多。&lt;/p&gt;

&lt;p&gt;很难想象，把 iPhone 做得只有 7 mm 厚的科技公司，竟然连 iTunes 中遗留的种种问题也解决不好。&lt;/p&gt;

&lt;h2 id=&#34;听什么&#34;&gt;听什么&lt;/h2&gt;

&lt;p&gt;我并不打算讲太多「听什么」的内容，音乐本来就是一个很个人的事情，但是，音乐真的没有好坏吗？实际上，Apple Music 与网易云一个很大的不同点就是，前者有意得引导你听，而后者是根据你听歌的记录推荐相似的（尽管并不准）歌曲。&lt;/p&gt;

&lt;p&gt;相比较网易云的每日推荐，Apple Music 只有一个最爱精选（My Favorites Mix），里面有很多你之前就已经喜欢的歌，每周更新一次。而更多的每天推荐是类似「朴树：音乐灵感」、「古典音乐：混音和改编歌曲」这样的人工手动编辑的歌单，而一般这样的歌单都会附带编辑的一些评语，让你能够大体得了解这张歌单内容，比如今天推荐给我的「古典音乐：混音和改编歌曲」：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;古典樂的經典旋律恆久不變，但同樣的旋律放在此歌單中卻可讓你帶來驚喜！耳熟能詳的柴可夫斯基、韋瓦第等大師作品，換上電子工程師 Max Richer、CFCF 及 DJ Spooky 的混音和改編，令幾百年前的作品添上時代感，即使充滿實驗性和玩味，趣味滿分。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;相比没有目的、仅仅根据自己的喜好乱听，这种引导的方式会慢慢影响你的音乐品味。&lt;/p&gt;

&lt;p&gt;另一方面，它还会每天给你推荐不一样的专辑，比如我喜欢听 Imagine Dragons，它今天就给我基于此推荐了《An Awesome Wave》、《Skying》、《Megalithic Symphony》等专辑。&lt;/p&gt;

&lt;p&gt;快餐音乐时代，很多歌曲单独从专辑中拿出来听也不会有什么问题，但是按照专辑来听，依然是严肃欣赏音乐的唯一方式。&lt;/p&gt;

&lt;h2 id=&#34;怎么听&#34;&gt;怎么听&lt;/h2&gt;

&lt;p&gt;用过两种方法。&lt;/p&gt;

&lt;p&gt;1）类似于 Spotify，添加到 Library 的歌曲就算是你想以后继续听的，「加心」的行为只是用来作为推荐的参考。这种方式就不需要再本地再建一个智能播放列表专门用来过滤加心的歌曲了，因为 Library 中的所有的歌都是你想听的。&lt;/p&gt;

&lt;p&gt;2）添加到 Library 中只是作为一个「稍后听」的过程，一般这种情况是按照专辑来添加到 Library 中，然后把这张专辑从头到尾（或者以你喜欢的方式）听一遍，把喜欢的歌加心，并给歌曲评分（可选），然后建立智能播放列表过滤出加心的歌，例如，我除了有一个 「Favorites」 歌单（自动更新 Library 中加心的歌曲），还有一个「古典精选」歌单，其中内容是类型为「Classical」并且已经加心了的歌曲。智能播放列表可以使用很复杂的过滤器。这种听歌方式也是现在我用的，这其实和之前在 iTunes Store 上购买音乐再听并没有什么区别，除了改成了订阅的方式并且附带了推荐功能。&lt;/p&gt;

&lt;p&gt;不过听音乐这种事各有各的方法，这里也仅仅是提供参考。&lt;/p&gt;

&lt;h2 id=&#34;一些辅助工具&#34;&gt;一些辅助工具&lt;/h2&gt;

&lt;p&gt;其实写到这里基本已经写完了。如果你不是一个强迫症、数据控、偏执狂或是一个完美主义者，最后这部分并没有什么太多帮助。&lt;/p&gt;

&lt;p&gt;我使用 &lt;a href=&#34;https://www.last.fm&#34;&gt;last.fm&lt;/a&gt; 来记录自己听了什么，Mac 上使用的是官方的 Last.fm Scrobbler 这个软件，不过它只能记录离线的歌曲，对于 Radio 就无能为力了，所以我辅助 &lt;a href=&#34;http://bowtieapp.com/&#34;&gt;Bowtie&lt;/a&gt; 这个小软件来记录，为了防止重复记录，需要把 Last.fm Scrobbler 中的 Enable Scrobbling 选项关闭。&lt;/p&gt;

&lt;p&gt;记录数据可以让你更好得知道平常的音乐喜好，以及某张专辑、某首歌、某个艺人听了多少次等等。并且 last.fm 提供通用的 API 来方便导出这些数据，说不定以后有什么用。&lt;/p&gt;

&lt;p&gt;过去一周我的听歌记录可以在 &lt;a href=&#34;https://www.last.fm/user/Tisoga/listening-report/week&#34;&gt;这里&lt;/a&gt; 看到。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>推荐系统笔记</title>
      <link>http://blog.jiayuanzhang.com/post/notes-on-recommandation-system/</link>
      <pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/notes-on-recommandation-system/</guid>
      <description>

&lt;p&gt;开始学习机器学习/数据挖掘相关的内容，打算每学习一部分知识就写一篇博客总结一下，当做学习过程中的笔记，也为以后看的时候提供存档。&lt;/p&gt;

&lt;p&gt;这一篇笔记是关于推荐系统的，主要讲了两种推荐算法（基于用户和基于物品的协同过滤）。&lt;/p&gt;

&lt;h2 id=&#34;基于用户的协同过滤&#34;&gt;基于用户的协同过滤&lt;/h2&gt;

&lt;h3 id=&#34;协同过滤-collaborative-filtering&#34;&gt;协同过滤（Collaborative filtering）&lt;/h3&gt;

&lt;p&gt;一个协作型过滤算法通常的做法是对一大群人进行搜索，并从中找出与我们品味相近的一小群人。算法会对这些人所偏爱的其他内容进行考察，并将它们组合起来构造出一个经过排名的推荐列表。&lt;/p&gt;

&lt;h3 id=&#34;测试数据集&#34;&gt;测试数据集&lt;/h3&gt;

&lt;p&gt;为了演示一些算法，我们需要从&lt;a href=&#34;http://grouplens.org/datasets/movielens/&#34;&gt;这个网站&lt;/a&gt;上下载一份数据集。这里因为是作为演示使用，所以只需要下载&lt;a href=&#34;http://files.grouplens.org/datasets/movielens/ml-latest-small.zip&#34;&gt;ml-latest-small.zip&lt;/a&gt;这一份简单的数据集就可以了。&lt;/p&gt;

&lt;h3 id=&#34;相似度计算&#34;&gt;相似度计算&lt;/h3&gt;

&lt;p&gt;在有了数据之后，我们需要有一种方法来确定人们在品味方面的相似程度。为此，我们可以将每个人与所有其他人进行对比，并计算他们的&lt;strong&gt;相似度评价值&lt;/strong&gt;。&lt;/p&gt;

&lt;h4 id=&#34;欧几里德距离评价-euclidean-distance-score&#34;&gt;欧几里德距离评价（Euclidean Distance Score）&lt;/h4&gt;

&lt;p&gt;欧几里德距离是指多维空间中两点间的距离，这是一种用直尺测量出来的距离。如果我们将两个点分别记作$(p_1, p_2, p_3, p_4, &amp;hellip;)$和$(q_1, q_2, q_3, q_4, &amp;hellip;)$，则欧几里德距离的计算公式为：&lt;/p&gt;

&lt;p&gt;$$
\sqrt{((p_1-q_1)^2+(p_2-q_2)^2+&amp;hellip;+(p_n-q&lt;em&gt;n)^2)} = \sqrt{(\sum&lt;/em&gt;{i=1}^n(p_i-q_i)^2)}
$$&lt;/p&gt;

&lt;p&gt;创建 &lt;code&gt;recommendations.py&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;用代码表示：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;math&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;# 返回一个有关 person1 与 person2 的基于距离的相似度评价&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sim_distance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# 得到 shared_items 的列表&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;shared_items&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;shared_items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	
	&lt;span class=&#34;c1&#34;&gt;# 如果两者没有共同之处，则返回 0&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
		
	&lt;span class=&#34;c1&#34;&gt;# 计算所有差值的平方和&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;sum_of_squares&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;pow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]])&lt;/span&gt;
	
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sum_of_squares&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;欧几里德距离计算公式可以计算出距离值，偏好越相似的人，其距离就越短。不过，我们还需要一个函数，来对偏好越相近的情况给出越大的值，为此，我们可以将函数的值加 1（这样就可以避免遇到被 0 整除的错误了），并取其倒数，入上面代码最后一行所示。&lt;/p&gt;

&lt;p&gt;好了，现在我们需要先将数据读取进来，在 &lt;code&gt;recommendations.py&lt;/code&gt; 中添加如下代码:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;loadMovieLens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;movies&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;/movies.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;movies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;title&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;/ratings.csv&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movieid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rating&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setdefault&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;movies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;movieid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rating&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 ipython 交互环境中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;recommendations&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loadMovieLens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 比较 10 号用户 和 20 号用户的相似度评价&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sim_distance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;10&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;20&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.23371479611805132&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;皮尔逊相关系数-pearson-correlation-coefficient&#34;&gt;皮尔逊相关系数（Pearson Correlation Coefficient）&lt;/h4&gt;

&lt;p&gt;皮尔逊相关系数是一种度量两个变量间相关程度的方法，它是一个介于 1 和 -1 之间的值，其中，1 表示变量完全正相关，0 表示无关， -1 则表示完全负相关（一个变量的值越大，则另一个变量的值反而会越小）。&lt;/p&gt;

&lt;p&gt;计算公式：&lt;/p&gt;

&lt;p&gt;$$
r = \frac{\sum{XY}-\frac{\sum X \sum Y}{N}}{\sqrt{(\sum X^2 - \frac{(\sum X)^2}{N})(\sum Y^2 - \frac{(\sum Y)^2}{N})}}
$$&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;recommendations.py&lt;/code&gt; 中添加如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sim_pearson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	  &lt;span class=&#34;c1&#34;&gt;# 得到双方都曾评价过的物品列表&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;shared_items&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;shared_items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
	  &lt;span class=&#34;c1&#34;&gt;# 得到物品列表元素的个数&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shared_items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

	  &lt;span class=&#34;c1&#34;&gt;# 如果两者没有共同元素，则返回0&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;

	  &lt;span class=&#34;c1&#34;&gt;# 计算 person1 和 person2 的皮尔逊相关系数&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sumxy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sumx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sumy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sumx2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;sumy2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shared_items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;

    &lt;span class=&#34;n&#34;&gt;zahler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sumxy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sumx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sumy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;nenner&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sumx2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sumx&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sumy2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sumy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nenner&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;zahler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;nenner&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;r&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 ipython 交互环境中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;reload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loadMovieLens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sim_pearson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;10&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;20&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.4908806936738162&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;可以看到和上面使用欧几里德距离评价计算出来的相似度是不一样的。&lt;/p&gt;

&lt;h4 id=&#34;关于该使用哪一种相似性度量方法&#34;&gt;关于该使用哪一种相似性度量方法&lt;/h4&gt;

&lt;p&gt;除了这两种计算相似度的方法，实际上还有许多别的计算相似度的算法，例如&lt;strong&gt;Tanimoto 分值&lt;/strong&gt;。使用哪一种方法，完全取决于具体的应用。&lt;/p&gt;

&lt;p&gt;下面的代码中，将使用一个通用的相似性函数来计算相似度，只要它满足以下条件：拥有同样的函数签名，以一个浮点数作为返回值，其数值越大代表相似度越大。&lt;/p&gt;

&lt;h3 id=&#34;寻找相似的用户&#34;&gt;寻找相似的用户&lt;/h3&gt;

&lt;p&gt;既然我们已经有了对两个人进行比较的函数，下面我们就可以编写，根据指定人员对每个人进行打分，并找出最接近的匹配结果了。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 从反映偏好的字典中返回最佳匹配者&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 返回结果的个数和相似度函数均为可选参数&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;topMatches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;similarity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sim_pearson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;similarity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	
	&lt;span class=&#34;c1&#34;&gt;# 对列表进行排序，评价值最高者排在最前面&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[:&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 ipython 交互环境中测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;reload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loadMovieLens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 与 40 号用户相似的 10 个用户&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topMatches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;40&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;63&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;582&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;326&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;260&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;220&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;198&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;153&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;116&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.9999999999999947&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;474&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.9999999999999947&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;215&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;推荐物品&#34;&gt;推荐物品&lt;/h3&gt;

&lt;p&gt;有的时候我们可能不需要寻找相似的用户，例如在购物网站中，我们需要的是一份可能会想要购买的物品列表，一种方法是从相似的用户所购买的物品列表中选出没有购买的，但是这种方法不确定的因素太多，例如可能相似用户还未购买某些物品，而这些物品恰恰就是我们所需要的。&lt;/p&gt;

&lt;p&gt;为了解决上面的问题，我们需要通过一个经过加权的评价值来为影片打分，评论者的评分结果因此而形成了先后的排名。为此，我们需要取得所有其他评论者的评价结果，借此得到相似度之后，再乘以他们为每部影片所给的评价值。&lt;/p&gt;

&lt;p&gt;以以下数据集为例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;{&amp;#39;Lisa Rose&amp;#39;: {&amp;#39;Lady in the Water&amp;#39;: 2.5,
               &amp;#39;Snakes on a Plane&amp;#39;: 3.5,
               &amp;#39;Just My Luck&amp;#39;: 3.0,
               &amp;#39;Superman Returns&amp;#39;: 3.5,
               &amp;#39;You, Me and Dupree&amp;#39;: 2.5,
               &amp;#39;The Night Listener&amp;#39;: 3.0},
 &amp;#39;Gene Seymour&amp;#39;: {&amp;#39;Lady in the Water&amp;#39;: 3.0,
                  &amp;#39;Snakes on a Plane&amp;#39;: 3.5,
                  &amp;#39;Just My Luck&amp;#39;: 1.5,
                  &amp;#39;Superman Returns&amp;#39;: 5.0,
                  &amp;#39;The Night Listener&amp;#39;: 3.0,
                  &amp;#39;You, Me and Dupree&amp;#39;: 3.5},
 &amp;#39;Michael Phillips&amp;#39;: {&amp;#39;Lady in the Water&amp;#39;: 2.5,
                      &amp;#39;Snakes on a Plane&amp;#39;: 3.0,
                      &amp;#39;Superman Returns&amp;#39;: 3.5,
                      &amp;#39;The Night Listener&amp;#39;: 4.0},
 &amp;#39;Claudia Puig&amp;#39;: {&amp;#39;Snakes on a Plane&amp;#39;: 3.5,
                  &amp;#39;Just My Luck&amp;#39;: 3.0,
                  &amp;#39;The Night Listener&amp;#39;: 4.5,
                  &amp;#39;Superman Returns&amp;#39;: 4.0,
                  &amp;#39;You, Me and Dupree&amp;#39;: 2.5},
 &amp;#39;Mick LaSalle&amp;#39;: {&amp;#39;Lady in the Water&amp;#39;: 3.0,
                  &amp;#39;Snakes on a Plane&amp;#39;: 4.0,
                  &amp;#39;Just My Luck&amp;#39;: 2.0,
                  &amp;#39;Superman Returns&amp;#39;: 3.0,
                  &amp;#39;The Night Listener&amp;#39;: 3.0,
                  &amp;#39;You, Me and Dupree&amp;#39;: 2.0},
 &amp;#39;Jack Matthews&amp;#39;: {&amp;#39;Lady in the Water&amp;#39;: 3.0,
                   &amp;#39;Snakes on a Plane&amp;#39;: 4.0,
                   &amp;#39;The Night Listener&amp;#39;: 3.0,
                   &amp;#39;Superman Returns&amp;#39;: 5.0,
                   &amp;#39;You, Me and Dupree&amp;#39;: 3.5},
 &amp;#39;Toby&amp;#39;: {&amp;#39;Snakes on a Plane&amp;#39;: 4.5,
          &amp;#39;You, Me and Dupree&amp;#39;: 1.0,
          &amp;#39;Superman Returns&amp;#39;: 4.0}}&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;假设我们需要给 Toby 提供影片推荐，我们可以根据上面的算法得出一张表：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;评论者&lt;/th&gt;
&lt;th&gt;相似度&lt;/th&gt;
&lt;th&gt;Night&lt;/th&gt;
&lt;th&gt;S.xNight&lt;/th&gt;
&lt;th&gt;Lady&lt;/th&gt;
&lt;th&gt;S.xLady&lt;/th&gt;
&lt;th&gt;Luck&lt;/th&gt;
&lt;th&gt;S.xLuck&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Rose&lt;/td&gt;
&lt;td&gt;0.99&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;2.97&lt;/td&gt;
&lt;td&gt;2.5&lt;/td&gt;
&lt;td&gt;2.48&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;2.97&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Seymour&lt;/td&gt;
&lt;td&gt;0.38&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;1.14&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;1.14&lt;/td&gt;
&lt;td&gt;1.5&lt;/td&gt;
&lt;td&gt;0.57&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Puig&lt;/td&gt;
&lt;td&gt;0.89&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;4.02&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;2.68&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;LaSalle&lt;/td&gt;
&lt;td&gt;0.92&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;2.77&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;2.77&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Matthews&lt;/td&gt;
&lt;td&gt;0.66&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;1.99&lt;/td&gt;
&lt;td&gt;3.0&lt;/td&gt;
&lt;td&gt;1.99&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;总计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;12.89&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8.38&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;8.07&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Sim.Sum&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3.84&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.95&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3.18&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;总计/Sim.Sum&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3.35&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.83&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.53&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;表中列出来每位评论者的相关度评价值，以及他们对三部影片的评分情况。以 S.x 打头的列给出了乘以评价值之后的相似度。如此一来，相比于与我们不相近的人，那些与我们相近的人将会对整体评价拥有更多的贡献。总计所有加权评价值的和。&lt;/p&gt;

&lt;p&gt;我们也可以选择利用总计值来计算排名，但是这其中有一个问题，一部受更多人评论的影片会对结果产生很大影响。为了修正这一问题，我们需要除以表总名为 Sim.Sum 的那一行，它代表了&lt;strong&gt;所有对这部电影有过评论的评论者的相似度之和&lt;/strong&gt;。对于影片《Lady in the Water》来说，Puig 并未做过评论，所以我们将这部影片的总计值除以所有其他人的相似度之和。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;recommendations.py&lt;/code&gt; 中添加如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 利用所有其他人评价值得加权平均，为某人提供建议&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getRecommendations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;similarity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sim_pearson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;totals&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;simSums&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;# 不要和自己做比较&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;sim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;similarity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		
		&lt;span class=&#34;c1&#34;&gt;# 忽略评价值为零或者小于零的情况&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
			
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
			&lt;span class=&#34;c1&#34;&gt;# 只对自己还未看过的影片进行评价&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
				&lt;span class=&#34;c1&#34;&gt;# 相似度*评价值&lt;/span&gt;
				&lt;span class=&#34;n&#34;&gt;totals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setdefault&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
				&lt;span class=&#34;n&#34;&gt;totals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;other&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sim&lt;/span&gt;
				&lt;span class=&#34;c1&#34;&gt;# 相似度之和&lt;/span&gt;
				&lt;span class=&#34;n&#34;&gt;simSums&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setdefault&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
				&lt;span class=&#34;n&#34;&gt;simSums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sim&lt;/span&gt;
		
		&lt;span class=&#34;c1&#34;&gt;# 建立一个归一化的列表&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;rankings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;simSums&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;total&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;totals&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()]&lt;/span&gt;
		
		&lt;span class=&#34;c1&#34;&gt;# 返回经过排序的列表&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;rankings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rankings&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 ipython 中测试一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;relaod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;loadMovieLens&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getRecommendations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;10&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.000000000000001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;s1&#34;&gt;&amp;#39;The Slipper and the Rose: The Story of Cinderella (1976)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.000000000000001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hands on a Hard Body (1996)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.000000000000001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;For the Birds (2000)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.000000000000001&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Diva (1981)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Zorba the Greek (Alexis Zorbas) (1964)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Zerophilia (2005)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Zelary (2003)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Z Channel: A Magnificent Obsession (2004)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Yossi (Ha-Sippur Shel Yossi) (2012)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;World of Tomorrow (2015)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Woody Allen: A Documentary (2012)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Woman on Top (2000)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Without a Clue (1988)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Withnail &amp;amp; I (1987)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Wild Zero (2000)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;War Room (2015)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Walker (1987)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Voices from the List (2004)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Videodrome (1983)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Victoria (2015)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;匹配商品&#34;&gt;匹配商品&lt;/h3&gt;

&lt;p&gt;现在我们已经可以为指定人员寻找品味相近的用户，以及如何向其推荐商品。假如我们想要了解哪些物品是相近的，那又该如何呢？&lt;/p&gt;

&lt;p&gt;在我们浏览 Amazon 的时候，经常会看到页面底部会推荐与当前浏览的物品相似的商品。这种情况，我们可以通过查看哪些人喜欢某一特定物品，以及这些人喜欢哪些其他物品来决定相似度。事实上，这和我们之前用来计算人与人之间的相似度是一样的，只需要把人和物品相互调换就行了。&lt;/p&gt;

&lt;p&gt;我们来编写这个翻转字典的函数：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;transformPrefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setdefault&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}]&lt;/span&gt;
			&lt;span class=&#34;c1&#34;&gt;# 将物品和人对调&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;有了这个方法之后，我们就可以复用之前所写的方法了。&lt;/p&gt;

&lt;p&gt;在 ipython 环境中测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;movies&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;transformPrefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;topMatches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;movies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;For the Birds (2000)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.000000000000016&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#34;Silence of the Lambs&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;World War Z (2013)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Wallace &amp;amp; Gromit in The Curse of the Were-Rabbit (2005)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Tron: Legacy (2010)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Transcendence (2014)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们还可以为影片推荐评论者：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getRecommendations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;movies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;For the Birds (2000)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;668&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;618&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;543&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;541&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;536&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;52&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;464&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;46&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;409&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;357&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;308&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;296&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;29&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;28&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;197&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;196&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;190&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;131&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;113&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.999999999999999&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;465&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;基于物品的协同过滤&#34;&gt;基于物品的协同过滤&lt;/h2&gt;

&lt;p&gt;当前所完成的推荐系统，要求我们使用每一位用户的全部评分来构建数据集，这种方法对于小规模的数据集是没有问题的，但是对于像 Amazon 这样有着上百万用户和商品的大型网站而言，讲一个用户同其他所有用户进行比较，然后再对每位用户评过分的商品进行比较，时间花费上是巨大的。&lt;/p&gt;

&lt;p&gt;目前为止我们所使用的技术被称为&lt;strong&gt;基于用户的协同过滤&lt;/strong&gt;（user-based collaborative filtering）。除此以外，还有一种可供选择的方法被称为&lt;strong&gt;基于物品的协同过滤&lt;/strong&gt;（item-based collaborative filtering）。在拥有大量数据集的情况下，基于物品的协同过滤能够得出更好的结论，而且它允许我们将大量的计算任务预先执行，从而使需要给予推荐的用户能够更快地得到他们所要的结果。&lt;/p&gt;

&lt;p&gt;基于物品的协同过滤总体思路就是为每件物品预先计算好最为相近的其他物品。然后，当我们想为某位用户提供推荐的时候，就可以查看他曾经评过分的物品，并从中选出排名靠前者，再构造一个加权列表，其中包含了与这些选中物品最相近的其他物品。此处最显著的区别在于，尽管第一步要求我们检查所有的数据，但是物品间的比较不会像用户间比较那么频繁变化。&lt;/p&gt;

&lt;h3 id=&#34;构造物品比较数据集&#34;&gt;构造物品比较数据集&lt;/h3&gt;

&lt;p&gt;为了对物品进行比较，我们要做的第一件事就是编写一个函数，构造一个包含相近物品的完整数据集。构建完数据集之后，我们就可以在需要的时候重复使用它。&lt;/p&gt;

&lt;p&gt;将下面代码添加到 &lt;code&gt;recommendations.py&lt;/code&gt; 中：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;calculateSimilarItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;c1&#34;&gt;# 建立字典，以给出与这些物品最为相近的其他物品&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	
	&lt;span class=&#34;c1&#34;&gt;# 以物品为中心最偏好矩阵进行倒置处理&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;itemPrefs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;transformPrefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;itemPrefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;c1&#34;&gt;# 针对大数据集更新状态变量&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; / &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;itemPrefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tomMatchs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;itemPrefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;similarity&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sim_pearson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;result&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;该函数首先利用了此前定义过得 &lt;code&gt;transformPrefs&lt;/code&gt; 函数，对反映评价的字典进行倒置处理，从而得到一个有关物品及其用户评价情况的列表，然后程序又循环遍历每项物品，并将转换了的字典传入 &lt;code&gt;tomMatches&lt;/code&gt; 函数中，求得最为相近的物品及其相似度评价值，最后，它建立并返回了一个包含物品及其最相近物品列表的字典。&lt;/p&gt;

&lt;p&gt;在 ipython 交互环境中测试：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;reload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;itemsim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;calculateSimilarItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;300&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;400&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;500&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;600&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;700&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;800&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;900&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1100&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1200&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1300&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1400&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1500&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1600&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1700&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1800&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1900&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8963&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;首次运行需要等待一段时间进行计算。&lt;/p&gt;

&lt;p&gt;只有频繁执行该函数，才能令物品的相似度不至于过期。通常我们需要在用户基数和评分数量不是很大的时候执行这一函数，但是随着用户数量的不断增长，物品间的相似度评价通常会变得越来越稳定。&lt;/p&gt;

&lt;h3 id=&#34;获得推荐&#34;&gt;获得推荐&lt;/h3&gt;

&lt;p&gt;现在，我们可以利用反映物品相似度的字典来给出推荐了，我们可以去到用户评价过得所有物品，并找出其相近的物品，根据相似度对其进行加权。&lt;/p&gt;

&lt;p&gt;下表给出了利用基于物品的方法寻找推荐的过程，所用到的数据可以在上面&lt;strong&gt;推荐物品&lt;/strong&gt;一节中找到。&lt;/p&gt;

&lt;p&gt;为 Toby 提供基于物品的推荐：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;影片&lt;/th&gt;
&lt;th&gt;评分&lt;/th&gt;
&lt;th&gt;Night&lt;/th&gt;
&lt;th&gt;R.xNight&lt;/th&gt;
&lt;th&gt;Lady&lt;/th&gt;
&lt;th&gt;R.xLady&lt;/th&gt;
&lt;th&gt;Luck&lt;/th&gt;
&lt;th&gt;R.xLuck&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Snakes&lt;/td&gt;
&lt;td&gt;4.5&lt;/td&gt;
&lt;td&gt;0.182&lt;/td&gt;
&lt;td&gt;0.818&lt;/td&gt;
&lt;td&gt;0.222&lt;/td&gt;
&lt;td&gt;0.999&lt;/td&gt;
&lt;td&gt;0.105&lt;/td&gt;
&lt;td&gt;0.474&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Superman&lt;/td&gt;
&lt;td&gt;4.0&lt;/td&gt;
&lt;td&gt;0.103&lt;/td&gt;
&lt;td&gt;0.412&lt;/td&gt;
&lt;td&gt;0.091&lt;/td&gt;
&lt;td&gt;0.363&lt;/td&gt;
&lt;td&gt;0.065&lt;/td&gt;
&lt;td&gt;0.258&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;Dupree&lt;/td&gt;
&lt;td&gt;1.0&lt;/td&gt;
&lt;td&gt;0.148&lt;/td&gt;
&lt;td&gt;0.148&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;0.4&lt;/td&gt;
&lt;td&gt;0.182&lt;/td&gt;
&lt;td&gt;0.182&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;总计&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;0.433&lt;/td&gt;
&lt;td&gt;1.378&lt;/td&gt;
&lt;td&gt;0.713&lt;/td&gt;
&lt;td&gt;1.762&lt;/td&gt;
&lt;td&gt;0.352&lt;/td&gt;
&lt;td&gt;0.914&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;归一化结果&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;3.183&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.473&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;2.598&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;此处每一行都列出了一部我们曾经观看过的影片，以及对该片的个人评价。对于每一部我们还未曾看过的影片，相应有一列会指出它与已观看影片的相似程度。以 R.x 打头的列给出了我们队影片的评价值乘以相似度之后的结果。&lt;/p&gt;

&lt;p&gt;总计一行给出了每部影片相似度评价值的总和以及 R.x 列的总和，为了预测我们对每一部影片的评分情况，只要将 R.x 列的总计值除以相似度一列的总计值即可。&lt;/p&gt;

&lt;p&gt;在 &lt;code&gt;recommendations.py&lt;/code&gt; 中添加如下代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getRecommendedItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;itemMatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;userRatings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;totlaSim&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
	
	&lt;span class=&#34;c1&#34;&gt;# 循环遍历由当前用户评分的物品&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rating&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;userRatings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;():&lt;/span&gt;
		
		&lt;span class=&#34;c1&#34;&gt;# 循环遍历与当前物品相近的物品&lt;/span&gt;
		&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;similarity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;itemMatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]:&lt;/span&gt;
		
			&lt;span class=&#34;c1&#34;&gt;# 如果该用户已经对当前物品做过评价，则将其忽略&lt;/span&gt;
			&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item2&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;userRatings&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
				&lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
			
			&lt;span class=&#34;c1&#34;&gt;# 评价值与相似度加权之和&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setdefault&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;similarity&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rating&lt;/span&gt;
			
			&lt;span class=&#34;c1&#34;&gt;# 全部相似度之和&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;totalSim&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setdefault&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
			&lt;span class=&#34;n&#34;&gt;totalSim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;similarity&lt;/span&gt;
			
	&lt;span class=&#34;c1&#34;&gt;# 将每个合计值除以加权和，求出平均值&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;rankings&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;totalSim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;scores&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()]&lt;/span&gt;
	
	&lt;span class=&#34;c1&#34;&gt;# 按最高值到最低值的顺序，返回评分结果&lt;/span&gt;
	&lt;span class=&#34;n&#34;&gt;rankings&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;rankings&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在 ipython 中测试一下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;reload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;recommendations&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getRecommendedItems&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prefs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;itemsim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;20&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)[:&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Zoot Suit (1981)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Zoolander (2001)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Zack and Miri Make a Porno (2008)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;You&amp;#39;ve Got Mail (1998)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;X-Men: The Last Stand (2006)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;X-Men: Apocalypse (2016)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;X-Men (2000)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Von Ryan&amp;#39;s Express (1965)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.75&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Willow (1988)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.75&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;White Men Can&amp;#39;t Jump (1992)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;基于用户进行过滤还是基于物品进行过滤&#34;&gt;基于用户进行过滤还是基于物品进行过滤&lt;/h2&gt;

&lt;p&gt;在数据集大小上，基于物品进行过滤的方式要比基于用户进行过滤更快；在数据的稀疏程度上，稀疏的数据集使用基于物品的过滤方法更优，而对于秘密集的数据集而言，两者的效果几乎一样。&lt;/p&gt;

&lt;p&gt;基于用户的过滤方法更加易于实现，而且无需额外步骤，因此它通常更适用于规模较小的变化非常频繁的数据集。在一些应用中，告诉用户还有哪些人与自己有着相近偏好是有一定价值的——也许对于一个购物网站而言，我们并不想这么做，但是对于一个音乐分享类或者电影评分类网站而言，这种潜在的需求却是存在的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>搭建 Python 科学计算环境</title>
      <link>http://blog.jiayuanzhang.com/post/build-python-scienfic-computing-environment/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/build-python-scienfic-computing-environment/</guid>
      <description>

&lt;p&gt;最近在看《Python for Data Analysis》（利用 Python 进行数据分析）这本书，贴一点笔记，这一篇是关于环境搭建的。另外吐槽一下，书中还是有不少错误的，语法错误就发现了好多处，大概读完了之后会整理出一份勘误表出来，可能是因为写书的时候是 14 年，两年过去了，pandas 库也有了一些变化。&lt;/p&gt;

&lt;h2 id=&#34;安装虚拟环境&#34;&gt;安装虚拟环境&lt;/h2&gt;

&lt;p&gt;不想把系统的 python 库搞得乱乱的（其实已经很乱了），所以还是建一个独立虚拟环境专门来做科学计算吧。具体的方法我在&lt;a href=&#34;http://forrestchang.github.io/2016/07/17/virtualenv-notes/&#34;&gt;virtualenv 相关笔记&lt;/a&gt;这篇博客中已经详细写了，建议将启动虚拟环境的命令添加到终端的配置文件中去（使用&lt;code&gt;alias&lt;/code&gt;），这样就避免每次一打开就输入一长串命令了。&lt;/p&gt;

&lt;p&gt;因为科学计算社区的一些库还是基于 Python 2.x 版本的，所以这里我们使用的 Python 版本为 2.7。&lt;/p&gt;

&lt;p&gt;然后使用以下命令一键安装所需要的库：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;sudo pip install numpy pandas matplotlib jupyter scikit-learn&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;安装不上的请检查是不是需要翻墙。&lt;/p&gt;

&lt;h2 id=&#34;ipython&#34;&gt;IPython&lt;/h2&gt;

&lt;p&gt;熟悉 Python 的同学应该对这个解释器不陌生，自带的 Python 解释器实在是太弱了。它与传统的“edit-compile-run”（编辑-编译-运行）方式的区别在于，它鼓励使用“execute-explore”（执行-探索），所以特别适合用在计算和数据分析领域，可以方便得使用「试错法」和「迭代法」进行开发。这里主要介绍它基于 Web 的交互式笔记本功能（命令行中大同小异）。&lt;/p&gt;

&lt;h3 id=&#34;开启-ipython-notebook&#34;&gt;开启 IPython Notebook&lt;/h3&gt;

&lt;p&gt;使用以下命令来打开 IPython Notebook：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;ENV2.7&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;$ jupyter notebook&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样 server 就启动了，浏览器会自动打开一个目录树。&lt;/p&gt;

&lt;p&gt;Note：记住在启动了虚拟环境的状态下使用这条命令，要不然就会使用系统的 IPython 版本来运行。&lt;/p&gt;

&lt;p&gt;然后我们新建一个 IPython Notebook 用作演示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326145820.png&#34; alt=&#34;14776647413275&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;In [1]&lt;/code&gt; 中的命令是为了能让我们直接在 IPython Notebook 中集成显示 &lt;code&gt;matplotlib&lt;/code&gt; 画的图片，所以如果是用作科学计算的话，首先先执行以下这条命令再说。&lt;/p&gt;

&lt;h3 id=&#34;内省&#34;&gt;内省&lt;/h3&gt;

&lt;p&gt;在变量的前面或后面加上一个 &lt;code&gt;?&lt;/code&gt; 就可以将有关该对象的一些通用信息显示出来。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326145843.png&#34; alt=&#34;14776649884990&#34; /&gt;&lt;/p&gt;

&lt;p&gt;基本上什么都能看。&lt;/p&gt;

&lt;h3 id=&#34;run-命令&#34;&gt;&lt;code&gt;%run&lt;/code&gt; 命令&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;%run&lt;/code&gt; 可以运行本地的 Python 脚本，并可以在 IPython 中访问脚本中定义的所有变量。&lt;/p&gt;

&lt;p&gt;如果想要脚本能够访问 IPython 中的命名空间，可以使用 &lt;code&gt;%run -i&lt;/code&gt; 命令。&lt;/p&gt;

&lt;h3 id=&#34;测试代码的执行时间&#34;&gt;测试代码的执行时间&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;%time&lt;/code&gt; 和 &lt;code&gt;%timeit&lt;/code&gt; 可以用来测试代码的执行时间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326150005.png&#34; alt=&#34;14776653395450&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;下面使用一个具体的例子来演示 IPython Notebook 的使用。&lt;/p&gt;

&lt;p&gt;使用到的数据可以在&lt;a href=&#34;https://www.ssa.gov/oact/babynames/limits.html&#34;&gt;Beyond the Top 1000 Names&lt;/a&gt;下载到，这是一份包含1880-2015年每年出生婴儿姓名出现次数的数据表。&lt;/p&gt;

&lt;p&gt;由于该数据按年份被分割成了好多文件，所以第一步我们需要把所有数据组装到一个 DataFrame 中去。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326150028.png&#34; alt=&#34;14776659007521&#34; /&gt;&lt;/p&gt;

&lt;p&gt;不知道这些 Python 代码没关系，因为这里只是用来演示 IPython Notebook。&lt;/p&gt;

&lt;p&gt;然后我们按照性别和年度统计总出生数：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326150107.png&#34; alt=&#34;14776660937109&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后绘制出表格：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326150149.png&#34; alt=&#34;14776661445090&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>virtualenv 相关笔记</title>
      <link>http://blog.jiayuanzhang.com/post/notes-on-virtualenv/</link>
      <pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/notes-on-virtualenv/</guid>
      <description>

&lt;h2 id=&#34;安装&#34;&gt;安装&lt;/h2&gt;

&lt;p&gt;直接使用 pip 来进行安装：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ sudo pip install virtualenv&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;用途&#34;&gt;用途&lt;/h2&gt;

&lt;p&gt;主要用来创建隔离的 Python 开发环境，比如说一个项目需要用到 2.7 的库，另一个项目需要用到 3.0 的库，我们就可以使用  virtualenv 来分别给这两个项目创建虚拟的 Python 环境，这样可以有效的避免冲突。&lt;/p&gt;

&lt;p&gt;virtualenv 会创建一个拥有独立安装目录的 Python 环境，该隔离环境不会与其他 virtualenv 环境共享模块（可以选择是否访问全局安装目录）。&lt;/p&gt;

&lt;h2 id=&#34;使用&#34;&gt;使用&lt;/h2&gt;

&lt;h3 id=&#34;创建虚拟环境&#34;&gt;创建虚拟环境&lt;/h3&gt;

&lt;p&gt;最基本的使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ virtualenv ENV&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 &lt;code&gt;ENV&lt;/code&gt; 是用来存放虚拟环境的目录。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$tree -L 1 ENV
ENV
├── bin
├── include
├── lib
└── pip-selfcheck.json&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 &lt;code&gt;lib&lt;/code&gt; 和 &lt;code&gt;include&lt;/code&gt; 目录是用来存放新的虚拟 Python 环境的依赖库，Package 被安装到 &lt;code&gt;lib/pythonX.X/site-packages/&lt;/code&gt; 中，&lt;code&gt;bin&lt;/code&gt; 目录中是新的 Python 解释器。&lt;code&gt;pip&lt;/code&gt; 和 &lt;code&gt;setuptools&lt;/code&gt; 默认被安装的。&lt;/p&gt;

&lt;h3 id=&#34;active-script&#34;&gt;active script&lt;/h3&gt;

&lt;p&gt;进入虚拟环境：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ source ENV/bin/active&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;（如果 &lt;code&gt;source&lt;/code&gt; 命令不存在可以使用 &lt;code&gt;.&lt;/code&gt; 命令。）&lt;/p&gt;

&lt;p&gt;退出虚拟环境：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ deactivate&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;removing-an-environment&#34;&gt;Removing an Environment&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;(ENV)$ deactivate
$ rm -r /path/to/ENV&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;system-site-packages-选项&#34;&gt;&lt;code&gt;--system-site-packages&lt;/code&gt; 选项&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;virtualenv --system-site-packages ENV&lt;/code&gt; 将会继承全局 packages。并不是很常用的功能。&lt;/p&gt;

&lt;h3 id=&#34;指定-python-版本&#34;&gt;指定 Python 版本&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;-p PYTHON_EXE&lt;/code&gt; 选项在创建虚拟环境的时候制定 Python 版本。&lt;/p&gt;

&lt;p&gt;Python 2.7:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ virtualenv -p /usr/bin/python2.7 ENV2.7&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Python 3.5:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ virtualenv -p /usr/local/bin/python3.5 ENV3.5&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;生成可打包环境&#34;&gt;生成可打包环境&lt;/h3&gt;

&lt;p&gt;某些情况下，我们可能需要在别的地方使用这个已经配置好的虚拟环境，可以使用 &lt;code&gt;virtualenv --relocatable&lt;/code&gt; 将 ENV 修改为可迁移的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;(ENV)$ virutalenv --relocatable ./&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Swift 中的内存管理</title>
      <link>http://blog.jiayuanzhang.com/post/garbage-collection-in-swift-lang/</link>
      <pubDate>Fri, 15 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/garbage-collection-in-swift-lang/</guid>
      <description>&lt;p&gt;这篇文章是在阅读《The Swift Programming Language》Automatic Reference Counting（ARC，自动引用计数）一章时做的一些笔记，同时参考了其他的一些资料。&lt;/p&gt;

&lt;p&gt;在早期的 iOS 开发中，内存管理是由开发者手动来完成的。因为传统的垃圾回收机制对于移动平台来说十分低效，苹果采用的是引用计数（RC，Reference Counting）的方式来管理内存，开发者需要通过手工的方式增加或减少一个实例的引用计数。在 iOS 5 之后，引入了 ARC 自动引用计数，使得开发者不需要手动地调用 &lt;code&gt;retain&lt;/code&gt; 和 &lt;code&gt;release&lt;/code&gt; 来管理引用计数，但是实际上这些方法还是会被调用，只不过是交给了编译器来完成，编译器会在合适的地方帮我们加入这些方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么是自动引用计数？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每当你创建一个类的实例的时候，ARC 便会自动分配一块内存空间来存放这个实例的信息，当这个实例不再被使用的时候，ARC 便释放实例所占用的内存。一般每个被管理的实例都会与一个引用计数器相连，这个计数器保存着当前实例被引用的次数，一旦创建一个新的引用指向这个实例，引用计数器便加 1，每当指向该实例的引用失效，引用计数器便减 1，当某个实例的引用计数器变成 0 的时候，这个实例就会被立即销毁。&lt;/p&gt;

&lt;p&gt;在 Swift 中，对引用描述的关键字有三个：&lt;code&gt;strong&lt;/code&gt;，&lt;code&gt;weak&lt;/code&gt; 和 &lt;code&gt;unowned&lt;/code&gt;，所有的引用没有特殊说明都是 &lt;code&gt;strong&lt;/code&gt; 强引用类型。在 ARC 中，只有指向一个实例的所有 &lt;code&gt;strong&lt;/code&gt; 强引用都断开了，这个实例才会被销毁。&lt;/p&gt;

&lt;p&gt;举一个简单的例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;A&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;deinit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;A deinit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;a2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;a2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt;

&lt;span class=&#34;n&#34;&gt;a1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;上面这个例子中，虽然 &lt;code&gt;a1&lt;/code&gt; 这个 &lt;code&gt;strong&lt;/code&gt; 强引用断开了，但是还有 &lt;code&gt;a2&lt;/code&gt; 这个强引用指向这个实例，所以不会在命令行中输出 &lt;code&gt;A deinit&lt;/code&gt;，当我们把 &lt;code&gt;a2&lt;/code&gt; 也设置为 &lt;code&gt;nil&lt;/code&gt; 时，与这个实例关联的所有强引用均断开了，这个实例便会被销毁，在命令行中打印 &lt;code&gt;A deinit&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;循环强引用（Strong Reference Cycles）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;但是，在某些情况下，一个类实例的强引用数永远不能变为 0，例如两个类实例互相持有对方的强引用，因而每个类实例都让对方一直存在，这就是所谓的强引用循环（Strong Reference Cycles）。&lt;/p&gt;

&lt;p&gt;这里引用 TSPL 中的例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;apartment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Apartment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;deinit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; is being deinitialized&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Apartment&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;unit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tenant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;deinit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Apartment &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unit&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; is being deinitialized&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;每一个 &lt;code&gt;Person&lt;/code&gt; 实例有一个可选的初始化为 &lt;code&gt;nil&lt;/code&gt; 的 &lt;code&gt;Apartment&lt;/code&gt; 类型，因为一个人并不总是拥有公寓。同样，每一个 &lt;code&gt;Apartment&lt;/code&gt; 实例都有一个可选的初始化为 &lt;code&gt;nil&lt;/code&gt; 的 &lt;code&gt;Person&lt;/code&gt; 类型，因为一个公寓并不总是属于一个人。&lt;/p&gt;

&lt;p&gt;接下来的代码片段定义了两个可选类型的变量 &lt;code&gt;john&lt;/code&gt; 和 &lt;code&gt;unit4A&lt;/code&gt;，并分别设定为下面的 &lt;code&gt;Person&lt;/code&gt; 和 &lt;code&gt;Apartment&lt;/code&gt; 的实例，这两个变量都备受设定为 &lt;code&gt;nil&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;john&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;unit4A&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Apartment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;现在可以创建特定的 &lt;code&gt;Person&lt;/code&gt; 和 &lt;code&gt;Apartment&lt;/code&gt; 实例，并将它们赋值给 &lt;code&gt;john&lt;/code&gt; 和 &lt;code&gt;unit4A&lt;/code&gt; 变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;john&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;John Appleseed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;unit4A&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Apartment&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;4A&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;下面一段代码将这两个实例关联起来：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;n&#34;&gt;john&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;apartment&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unit4A&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;unit4A&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tenant&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;john&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;将两个实例关联在一起后，强引用的关系如图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326144231.png&#34; alt=&#34;14607053938205&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这两个实例关联之后，会产生一个循环强引用，当断开 &lt;code&gt;john&lt;/code&gt; 和 &lt;code&gt;unit4A&lt;/code&gt; 所持有的强引用时，引用计数器并不会归零，所以这两块空间也得不到释放，这就导致了内存泄漏。&lt;/p&gt;

&lt;p&gt;可以将其中一个类中的变量设定为 &lt;code&gt;weak&lt;/code&gt; 弱引用来打破这种强引用循环：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Apartment&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;unit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;weak&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tenant&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;deinit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Apartment &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unit&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; is being deinitialized&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326144320.png&#34; alt=&#34;14607057294969&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当断开 &lt;code&gt;john&lt;/code&gt; 和 &lt;code&gt;unit4A&lt;/code&gt; 所持有的强引用时，&lt;code&gt;Person instance&lt;/code&gt; 的引用计数器变成 0，实例被销毁，从而 &lt;code&gt;Apartment instance&lt;/code&gt; 的引用计数器也变为 0，实例被销毁。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么时候使用 &lt;code&gt;weak&lt;/code&gt;？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当两个实例是 optional 关联在一起时，确保其中的一个使用 &lt;code&gt;weak&lt;/code&gt; 弱引用，就像上面所说的那个例子一样。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;code&gt;unowned&lt;/code&gt; 无主引用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在某些情况下，声明的变量总是有值得时候，我们需要使用 &lt;code&gt;unowned&lt;/code&gt; 无主引用。&lt;/p&gt;

&lt;p&gt;同样借用一下 TSPL 中的例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Customer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;card&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CreditCard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;deinit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; is being deinitialized&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;CreditCard&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;UInt64&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;unowned&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;customer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Customer&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;UInt64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;customer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Customer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;
        &lt;span class=&#34;kc&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;customer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;customer&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;deinit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Card #&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;\(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; is being deinitialized&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这里定义了两个类，&lt;code&gt;Customer&lt;/code&gt; 和 &lt;code&gt;CreditCard&lt;/code&gt;，模拟了银行客户和客户的信用卡，在这个例子中，每一个类都是将另一个类的实例作为自身的属性，所以会产生循环强引用。&lt;/p&gt;

&lt;p&gt;和之前那个例子不同的是，&lt;code&gt;CreditCard&lt;/code&gt; 类中有一个非可选类型的 &lt;code&gt;customer&lt;/code&gt; 属性，因为，一个客户可能有或者没有一张信用卡，但是一张信用卡总是关联着一个用户。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;john&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Customer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;john&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Customer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;John Appleseed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;john&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;card&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CreditCard&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;number&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1234_5678_9012_3456&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;customer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;john&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关联两个实例后，它们的引用关系如图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326144333.png&#34; alt=&#34;14607068387297&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当断开 &lt;code&gt;john&lt;/code&gt; 变量持有的强引用时，再也没有指向 &lt;code&gt;Customer&lt;/code&gt; 的强引用了，所以该实例被销毁了，其后，再也没有指向 &lt;code&gt;CreditCard&lt;/code&gt; 的强引用了，该实例也被销毁了。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;什么时候使用 &lt;code&gt;unowned&lt;/code&gt; 无主引用？&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;两个实例 A 和 B，如果实例 A 必须在实例 B 存在的前提下才能存在，那么实例 A 必须用 &lt;code&gt;unowned&lt;/code&gt; 无主引用指向实例 B。也就是说，有强制依赖性的那个实例必须对另一个实例持有无主引用。&lt;/p&gt;

&lt;p&gt;例如上面那个例子所说，银行客户可能没有信用卡，但是每张信用卡总是绑定着一个银行客户，所以信用卡这个类就需要用 &lt;code&gt;unowned&lt;/code&gt; 无主引用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;无主引用以及隐市解析可选属性&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;还有一种情况，两个属性都必须有值，并且初始化完成之后永远不会为 &lt;code&gt;nil&lt;/code&gt;。在这种情况下，需要一个类使用 &lt;code&gt;unowned&lt;/code&gt; 无主引用，另一个类使用&lt;a href=&#34;http://wiki.jikexueyuan.com/project/swift/chapter2/01_The_Basics.html#implicityly_unwrapped_optionals&#34;&gt;隐式解析可选属性&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;闭包引起的循环强引用&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在 Swift 中，闭包和函数都属于引用类型。并且闭包还有一个特性：可以在其定义的上下文中捕获常量或者变量。所以，在一个类中，闭包被赋值给了一个属性，而这个闭包又使用了这个类的实例的时候，就会引起循环强引用。&lt;/p&gt;

&lt;p&gt;Swift 提供了一种方法来解决这个问题：闭包捕获列表（closure capture list）。在定义闭包的同时定义捕获列表作为闭包的一部分，捕获列表定义了闭包体内捕获一个或者多个引用类型的规则。跟解决两个类实例之间的循环强引用一样，声明每个捕获的引用为弱引用或者无主引用。&lt;/p&gt;

&lt;p&gt;捕获列表中的每一项都由一对元素组成，一个元素是 &lt;code&gt;weak&lt;/code&gt; 或者 &lt;code&gt;unowned&lt;/code&gt; 关键字，另一个元素是类实例的引用（例如最常见得是 &lt;code&gt;self&lt;/code&gt;），这些在方括号内用逗号隔开。&lt;/p&gt;

&lt;p&gt;具体的使用方法请参考&lt;a href=&#34;http://wiki.jikexueyuan.com/project/swift/chapter2/16_Automatic_Reference_Counting.html#resolving_strong_reference_cycles_for_closures&#34;&gt;官方文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;何时使用 &lt;code&gt;weak&lt;/code&gt;，何时使用 &lt;code&gt;unowned&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在闭包和捕获的实例总是相互引用并且总是同时销毁的时候，将闭包内的捕获定义为 &lt;code&gt;unowned&lt;/code&gt; 无主引用。&lt;/p&gt;

&lt;p&gt;在被捕获的实例可能变成 &lt;code&gt;nil&lt;/code&gt; 的情况下，使用 &lt;code&gt;weak&lt;/code&gt; 弱引用。如果被捕获的引用绝对不会变成 &lt;code&gt;nil&lt;/code&gt;，应该使用 &lt;code&gt;unowned&lt;/code&gt; 无主引用，而不是 &lt;code&gt;weak&lt;/code&gt; 弱引用。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Garbage Collection（GC，垃圾回收）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;其实 ARC 应该也算 GC 的一种，不过我们一谈到 GC，大多都会想到 Java 中的垃圾回收机制，相比较 GC，ARC 简单得许多。以后有机会可以讨论一下 Java 中的内存管理。&lt;/p&gt;

&lt;p&gt;另外，需要注意的一点是，这里所讲的都是针对于&lt;code&gt;引用类型&lt;/code&gt;，&lt;code&gt;结构体&lt;/code&gt;和&lt;code&gt;枚举&lt;/code&gt;在 Swift 中属于值类型，不在 ARC 的考虑范围之内。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux 基础笔记</title>
      <link>http://blog.jiayuanzhang.com/post/linux-basic-notes/</link>
      <pubDate>Wed, 23 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/linux-basic-notes/</guid>
      <description>

&lt;h2 id=&#34;shell-的基本操作&#34;&gt;Shell 的基本操作&lt;/h2&gt;

&lt;h3 id=&#34;常用快捷键&#34;&gt;常用快捷键&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;按键&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Tab&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;命令补全&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Ctrl+c&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;强行终止当前程序&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Ctrl+d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;键盘输入结束或退出终端&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Ctrl+s&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;暂定当前程序，暂停后按下任意键恢复运行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Ctrl+z&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将当前程序放到后台运行，恢复到前台命令 &lt;code&gt;fg&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Ctrl+a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将光标移动到行首&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Ctrl+e&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将光标移动到行尾&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Ctrl+k&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除从光标所在位置到行末&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Alt+Backspace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;向前删除一个单词&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;常用通配符&#34;&gt;常用通配符&lt;/h3&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;字符&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配0或多个字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;?&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配任意一个字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[list]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配 list 中的任意单一字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[!list]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配除 list 中的任意单一字符以外的字符&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;[c1-c2]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配c1-c2中的任意单一字符，如[0-9][a-z]&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{string1,string2,...}&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配其中一个字符串&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;{c2..c2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;匹配c1-c2中全部字符，如{1..10}&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;用户管理&#34;&gt;用户管理&lt;/h2&gt;

&lt;h3 id=&#34;查看用户&#34;&gt;查看用户&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ who am i&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ who mon likes&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;who&lt;/code&gt; 命令其他常用参数&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-a&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;打印能打印的全部&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-d&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;打印死掉的进程&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-m&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;同 &lt;code&gt;am i&lt;/code&gt;, &lt;code&gt;mom likes&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-q&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;打印当前登陆用户数及用户名&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-u&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;打印当前登陆用户登陆信息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-r&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;打印运行等级&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;创建用户&#34;&gt;创建用户&lt;/h3&gt;

&lt;p&gt;创建用户需要 &lt;code&gt;root&lt;/code&gt; 用户的权限，所以需要使用 &lt;code&gt;sudo&lt;/code&gt; 这个命令。使用 &lt;code&gt;sudo&lt;/code&gt; 名利需要满足两个条件：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;知道当前登陆用户的密码&lt;/li&gt;
&lt;li&gt;当前用户必须在 &lt;code&gt;sudo&lt;/code&gt; 用户组&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ su &amp;lt;user&amp;gt; # 切换用户到 user&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ sudo &amp;lt;cmd&amp;gt; # 以 root 权限运行命令&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ su - &amp;lt;user&amp;gt; # 切换用户，并且环境变量同时改变到目标用户的环境变量&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;新建用户命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ sudo adduser &amp;lt;username&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;创建用户的同时会为用户创建 home 目录。&lt;/p&gt;

&lt;h3 id=&#34;用户组&#34;&gt;用户组&lt;/h3&gt;

&lt;p&gt;在 Linux 中每个用户都有一个用户组，它们共享一些资源和权限，同时拥有私有资源。&lt;/p&gt;

&lt;h4 id=&#34;查看自己的用户组&#34;&gt;查看自己的用户组&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ groups &amp;lt;username&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;或者，查看&lt;code&gt;/etc/group&lt;/code&gt;文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ cat /etc/group | sort&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;sort&lt;/code&gt; 表示将读取的文本进行一个字典排序再输出。&lt;/p&gt;

&lt;h5 id=&#34;etc-group-文件格式说明&#34;&gt;&lt;code&gt;etc/group&lt;/code&gt; 文件格式说明&lt;/h5&gt;

&lt;p&gt;/etc/group 的内容包括用户组（Group）、用户组口令、GID 及该用户组所包含的用户（User），每个用户组一条记录。格式如下：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;group_name:password:GID:user_list&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;将其他用户加入-sudo-用户组&#34;&gt;将其他用户加入 sudo 用户组&lt;/h4&gt;

&lt;p&gt;使用 &lt;code&gt;usermod&lt;/code&gt; 命令可以为用户组添加用户，使用该命令需要有 root 权限。&lt;/p&gt;

&lt;p&gt;使用一个具有 root 权限的用户为一个不具有 root 权限的用户添加 &lt;code&gt;sudo&lt;/code&gt; 权限：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ sudo usermod -G sudo &amp;lt;username&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;删除用户&#34;&gt;删除用户&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ sudo deluser &amp;lt;username&amp;gt; --remove-home&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;文件权限&#34;&gt;文件权限&lt;/h2&gt;

&lt;h3 id=&#34;查看文件权限&#34;&gt;查看文件权限&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ ls -l&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326143412.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326143425.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326143435.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h4 id=&#34;文件类型&#34;&gt;文件类型&lt;/h4&gt;

&lt;p&gt;Linux 里面一切皆文件。&lt;/p&gt;

&lt;h4 id=&#34;文件权限-1&#34;&gt;文件权限&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;读权限：可以读取某个文件的内容&lt;/li&gt;
&lt;li&gt;写权限：可以编辑和修改某个文件&lt;/li&gt;
&lt;li&gt;执行权限：通常指可以运行的二进制程序文件或者脚本文件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;注：一个目录要同时具有读权限和执行权限才可以打开，要有写权限才允许在其中创建其他文件。Linux 不是用过文件的后缀名来区分文件的类型。&lt;/p&gt;

&lt;h4 id=&#34;链接数&#34;&gt;链接数&lt;/h4&gt;

&lt;p&gt;链接到该文件所在的 inode 结点的文件名数目。&lt;/p&gt;

&lt;h3 id=&#34;修改文件权限&#34;&gt;修改文件权限&lt;/h3&gt;

&lt;h4 id=&#34;方法1-二进制数字表示&#34;&gt;方法1：二进制数字表示&lt;/h4&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326143447.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改 &lt;code&gt;&amp;lt;filename&amp;gt;&lt;/code&gt; 只能自己使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ chmod 700 &amp;lt;filename&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;方法2-加减赋值操作&#34;&gt;方法2：加减赋值操作&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ chmod go-rw &amp;lt;filename&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&amp;lsquo;g&amp;rdquo;o&amp;rsquo;还有&amp;rsquo;u&amp;rsquo;，分别表示group，others，user，&amp;rsquo;+&amp;lsquo;，&amp;rsquo;-&amp;rsquo; 就分别表示增加和去掉相应的权限。&lt;/p&gt;

&lt;h2 id=&#34;目录结构&#34;&gt;目录结构&lt;/h2&gt;

&lt;p&gt;Windows 是以存储介质为主的，之下才是目录；而 Unix 是以目录为主的，存储介质是挂载在目录上的。Linux 以树形目录结构的形式来构建整个系统。&lt;/p&gt;

&lt;h3 id=&#34;fhs-标准&#34;&gt;FHS 标准&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;FHS（英文：Filesystem Hierarchy Standard 中文：文件系统层次结构标准），多数 Linux 版本采用这种文件组织形式，FHS 定义了系统中每个区域的用途、所需要的最小构成的文件和目录同时还给出了例外处理与矛盾处理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;FHS 定义了两层规范，第一层是，/下面的各个目录应该要放什么文件数据，例如 /etc 应该要放设置文件，/bin 与 /sbin 则应该要放置可执行文件等等。&lt;/p&gt;

&lt;p&gt;第二层则是针对 /usr 及 /var 这两个目录的子目录来定义。例如 /var/log 放置系统登录文件，/usr/share 放置共享数据等等。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326143513.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;FSH 是根据以往无数 Linux 用户和开发者的经验总结出来的，并且会持续更新，FSH 依据文件系统使用的频繁与否以及是否允许用户随意改动，将目录定义为四中交互作用的形态，如下表示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326143527.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;目录路径&#34;&gt;目录路径&lt;/h3&gt;

&lt;h4 id=&#34;绝对路径&#34;&gt;绝对路径&lt;/h4&gt;

&lt;p&gt;以根目录为起点的完整路径。&lt;/p&gt;

&lt;h4 id=&#34;相对路径&#34;&gt;相对路径&lt;/h4&gt;

&lt;p&gt;相对于你当前目录的路径。&lt;/p&gt;

&lt;h2 id=&#34;文件的基本操作&#34;&gt;文件的基本操作&lt;/h2&gt;

&lt;h3 id=&#34;新建&#34;&gt;新建&lt;/h3&gt;

&lt;h4 id=&#34;新建空白文件&#34;&gt;新建空白文件&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ touch test&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;关于 &lt;code&gt;touch&lt;/code&gt; 命令，其主要是用来更改文件时间戳的。&lt;/p&gt;

&lt;h4 id=&#34;新建目录&#34;&gt;新建目录&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ mkdir testDir&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;使用 &lt;code&gt;-p&lt;/code&gt; 参数，可以创建一个多级目录，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ mkdir -p father/son/grandson&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;复制&#34;&gt;复制&lt;/h3&gt;

&lt;h4 id=&#34;复制文件&#34;&gt;复制文件&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ cp test testDir&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;复制目录&#34;&gt;复制目录&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ cp -r father family&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;删除&#34;&gt;删除&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ rm test&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;参数 &lt;code&gt;-f&lt;/code&gt; 可以强制删除一些为只读权限的文件。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ rm -f test&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;删除一个目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ rm -r testDir&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;移动文件&#34;&gt;移动文件&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ mv testFile testDir&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;重命名文件&#34;&gt;重命名文件&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;mv&lt;/code&gt; 命令还有重命名的作用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ mv oldName newName&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;查看文件&#34;&gt;查看文件&lt;/h3&gt;

&lt;h4 id=&#34;cat-与-tac&#34;&gt;&lt;code&gt;cat&lt;/code&gt; 与 &lt;code&gt;tac&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;这两个命令都是用来打印文件内容到标准输出（终端），其中&lt;code&gt;cat&lt;/code&gt; 为正序显示，&lt;code&gt;tac&lt;/code&gt; 为倒序显示。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;标准输入输出：当我们执行一个 shell 命令行时通常会自动打开三个标准文件，即标准输入文件（stdin），默认对应终端的键盘；标准输出文件（stdout）和标准错误输出文件（stderr），这两个文件都对应被重定向到终端的屏幕，以便我们能直接看到输出内容。进程将从标准输入文件中得到输入数据，将正常输出数据输出到标准输出文件，而将错误信息送到标准错误文件中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以使用&lt;code&gt;-n&lt;/code&gt; 参数来显示行号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ cat -n &amp;lt;filename&amp;gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&#34;nl&#34;&gt;&lt;code&gt;nl&lt;/code&gt;&lt;/h4&gt;

&lt;p&gt;添加行号并打印，比 &lt;code&gt;cat&lt;/code&gt; 更加强大，参数说明：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;-b : 指定添加行号的方式，主要有两种：
    -b a:表示无论是否为空行，同样列出行号(&amp;#34;cat -n&amp;#34;就是这种方式)
    -b t:只列出非空行的编号并列出（默认为这种方式）
-n : 设置行号的样式，主要有三种：
    -n ln:在行号字段最左端显示
    -n rn:在行号字段最右边显示，且不加 0
    -n rz:在行号字段最右边显示，且加 0
-w : 行号字段占用的位数(默认为 6 位)&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;查看文件类型&#34;&gt;查看文件类型&lt;/h3&gt;

&lt;p&gt;使用 &lt;code&gt;file&lt;/code&gt; 命令来查看文件类型：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ file /bin/ls&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326143553.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这表示这是一个可执行文件。&lt;/p&gt;

&lt;h2 id=&#34;环境变量&#34;&gt;环境变量&lt;/h2&gt;

&lt;h3 id=&#34;变量&#34;&gt;变量&lt;/h3&gt;

&lt;p&gt;使用&lt;code&gt;declare&lt;/code&gt;命令可以创建一个变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ declare tmp&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;读取变量的值，使用&lt;code&gt;echo&lt;/code&gt;命令和&lt;code&gt;$&lt;/code&gt;符号：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ echo $tmp&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;环境变量-1&#34;&gt;环境变量&lt;/h3&gt;

&lt;p&gt;环境变量就是作用域比自己定义的变量要大，如 Shell 的环境变量作用于自身和它的子进程。例如 Shell 环境变量作用于自身和它的子进程。在类 UNIX 系统中，每个进程都有其各自的环境变量设置，当一个进程被创建时，处理创建过程中明确指定的话，它将继承其父进程的绝大部分环境设置。&lt;/p&gt;

&lt;p&gt;通常我们会涉及到的环境变量有三种：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当前 Shell 进程私有用户自定义变量，只在当前 Shell 中有效&lt;/li&gt;
&lt;li&gt;Shell 本身内建的变量&lt;/li&gt;
&lt;li&gt;从自定义变量导出的环境变量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;set&lt;/code&gt;, &lt;code&gt;env&lt;/code&gt;, &lt;code&gt;export&lt;/code&gt;这三个命令可以用来打印相关环境变量，区别在于涉及的是不同范围的环境变量：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;命令&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;set&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示当前 shell 所有环境变量，包括其内建环境变量、用户自定义变量及导出的环境变量&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;env&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示与当前用户相关的环境变量，还可以让命令在制定环境中运行&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;export&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;显示从 Shell 中导出成环境变量的变量，也能通过它将自定义变量导出为环境变量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326143605.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;命令的查找路径与顺序&#34;&gt;命令的查找路径与顺序&lt;/h3&gt;

&lt;p&gt;Shell 通过环境变量&lt;code&gt;PATH&lt;/code&gt;来搜索命令。&lt;/p&gt;

&lt;p&gt;查看 &lt;code&gt;PATH&lt;/code&gt; 环境变量的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ echo $PATH&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;输出的内容为：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这些目录下面存放的都是可执行文件。&lt;/p&gt;

&lt;h3 id=&#34;添加自定义路径到-path-环境变量&#34;&gt;添加自定义路径到&lt;code&gt;PATH&lt;/code&gt; 环境变量&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;PATH&lt;/code&gt;里面的路径是以&lt;code&gt;:&lt;/code&gt;作为分隔符，所以可以这样添加自定义路径：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ PATH=$PATH:/home/xxxx&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意到这里一定要使用绝对路径。&lt;/p&gt;

&lt;p&gt;这种修改的方式只对当前的 Shell 有效，要想让每个用户都讷讷够使用，需要更改相应的配置文件，例如&lt;code&gt;zsh&lt;/code&gt;需要修改相应的&lt;code&gt;.zshrc&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;修改和删除已有变量&#34;&gt;修改和删除已有变量&lt;/h3&gt;

&lt;p&gt;可以使用&lt;code&gt;unset&lt;/code&gt;命令来删除一个环境变量：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ unset temp&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;如何让环境变量立即生效&#34;&gt;如何让环境变量立即生效&lt;/h3&gt;

&lt;p&gt;在修改了配置文件后，可以使用&lt;code&gt;source&lt;/code&gt;命令来让其立即生效：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ source .zshrc&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;搜索文件&#34;&gt;搜索文件&lt;/h2&gt;

&lt;h3 id=&#34;whereis-简单快速&#34;&gt;&lt;code&gt;whereis&lt;/code&gt;简单快速&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ whereis who&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;whereis&lt;/code&gt;只能搜索二进制文件(-b)，man 帮助文件(-m)和源代码文件(-s)。&lt;/p&gt;

&lt;h3 id=&#34;locate-快而全&#34;&gt;&lt;code&gt;locate&lt;/code&gt;快而全&lt;/h3&gt;

&lt;p&gt;通过&lt;code&gt;/var/lib/mlocate/mlocate.db&lt;/code&gt;数据库查找，不过这个数据库也不是实时更新的，系统会使用定时任务每天自动执行&lt;code&gt;updatedb&lt;/code&gt;命令更新一次，所以有时候你刚添加的文件，它可能会找不到，需要手动执行一次&lt;code&gt;updatedb&lt;/code&gt;命令。他可以用来查找指定目录下的不同文件类型，例如查找/usr/share/下所有的 jpg 文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ locate /usr/share/\*.jpg&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;注意要添加&lt;code&gt;*&lt;/code&gt;号前面的反斜杠转义，否则会无法找到&lt;/p&gt;

&lt;h3 id=&#34;which-小而精&#34;&gt;&lt;code&gt;which&lt;/code&gt;小而精&lt;/h3&gt;

&lt;p&gt;我们通常使用&lt;code&gt;which&lt;/code&gt;来确定是否安装了某个指定的软件，因为它只从&lt;code&gt;PATH&lt;/code&gt; 环境变量指定的路径中去搜索命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ which man&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;find-精而细&#34;&gt;&lt;code&gt;find&lt;/code&gt; 精而细&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;find&lt;/code&gt;命令应该是这几个命令中最强大的了，它不但可以通过文件类型、文件名进行查找，而且可以根据文件的属性（如文件的时间戳，文件的权限等）进行搜索。&lt;/p&gt;

&lt;p&gt;在指定目录下搜索指定文件名的文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ find /etc/ -name interface&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;find&lt;/code&gt; 命令的基本参数格式为：&lt;code&gt;find [path] [option] [action]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;与时间相关的命令参数：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-atime&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最后访问时间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-ctime&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建时间&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-mtime&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;最后修改时间&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
    </item>
    
    <item>
      <title>学院派编程自学指南</title>
      <link>http://blog.jiayuanzhang.com/post/self-learning-programer-manual-college-part/</link>
      <pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/self-learning-programer-manual-college-part/</guid>
      <description>

&lt;p&gt;由于本人目前也处在学习的阶段，文章中列出来的内容也并未全部学习过，所以文章的客观性可能存在一些问题，还望读者自行判断。&lt;/p&gt;

&lt;p&gt;这份指南会不定期更新，有好的建议也可以留言或者给我发邮件。&lt;/p&gt;

&lt;h1 id=&#34;准备&#34;&gt;准备&lt;/h1&gt;

&lt;p&gt;需要的所有工具就是一台可以连接上网络的电脑以及你本人。&lt;/p&gt;

&lt;h2 id=&#34;科学上网&#34;&gt;科学上网&lt;/h2&gt;

&lt;p&gt;很可惜，即使是现在，大部分学习计算机的学生还是不会科学上网。在当前的网络环境下，不会科学上网，意味着你不能用 Google 查资料，不能在 Hacker News 查看最新资讯，需要忍受龟速的 GitHub，云云。然而，科学上网本身却是一件成本非常低的事情，不想折腾的话，一年花个几百块钱买个现成的服务；有折腾精神的人，可以买个服务器自己假设架设上网工具。这一步很重要，不能跳过，否则后面指南中的许多内容都无法进行访问。&lt;/p&gt;

&lt;p&gt;关于科学上网的具体内容，就不再多说了，给你一个关键词：&lt;strong&gt;Lantern&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;学会使用-google-搜索&#34;&gt;学会使用 Google 搜索&lt;/h2&gt;

&lt;p&gt;学会了科学上网，你就能够使用 Google 了，为什么不是 Baidu？相信你用了 Google 之后就自然明白了。&lt;/p&gt;

&lt;p&gt;当了一个学期的助教之后发现，很多的同学其实是没有使用搜索引擎的意识的，遇到问题要么自己死磕，或者就直接求助于他人。这两种都不是很好的办法，正确的做法是&lt;strong&gt;在自己思考后没有结果，然后使用搜索引擎查找问题&lt;/strong&gt;，现阶段，你遇到的所有问题（几乎）都能在 Google 上找到现成的答案，如果没找到，肯定是你搜索的方式不正确。&lt;/p&gt;

&lt;p&gt;使用Google的基本搜索功能就能够解决大部分问题了，当然，如果想要学习更加高级的技巧，这里有一份指南：&lt;a href=&#34;https://www.zhihu.com/question/20161362&#34;&gt;如何用好Google等搜索引擎？&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;英语&#34;&gt;英语&lt;/h2&gt;

&lt;p&gt;你不得不承认，目前为止，编程世界的主流语言还是英文，所以英语能力的好坏决定了你编程能力的上界。中文资料和英文资料相比，实在是太匮乏了，就质量而言，也相对较低。比如我后面提到的很多的课程，都是英文的内容。&lt;/p&gt;

&lt;p&gt;值得庆幸的是，阅读编程资料所需要的英文水平并不需要很高，就个人经验来说，基本上四级水平就足够了，可能还会存在一些生词，但是基本上并不妨碍理解。&lt;/p&gt;

&lt;p&gt;英文的学习应该一直贯穿于编程的学习之中，作为一门工具语言，只需要花少量时间就可以带来比较大的收益（2/8法则）。&lt;/p&gt;

&lt;p&gt;本人的英文水平也不算好，但是基本上能够阅读技术书籍和文档，能够听懂公开课，所以还是有一些简单的经验可以分享一下。&lt;/p&gt;

&lt;h3 id=&#34;把系统换成英文的&#34;&gt;把系统换成英文的&lt;/h3&gt;

&lt;p&gt;有些同学可能看到英文就头疼，这很正常，因为在中文的环境下面生活的太久了。为此，可以试着将平常用的系统换成英文的，虽说不能学到几个单词（Copy/Paste 之类的词），但是可以让你不那么排斥英文。&lt;/p&gt;

&lt;h3 id=&#34;安装电子词典&#34;&gt;安装电子词典&lt;/h3&gt;

&lt;p&gt;OS X下推荐欧路词典，在APP Store中购买完整版的，因为需要添加外部的词典。&lt;/p&gt;

&lt;p&gt;这里推荐一部比较好的词典：《Collins 英汉双解词典》，它是这个样子的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326142830.png&#34; alt=&#34;eudi&#34; /&gt;&lt;/p&gt;

&lt;p&gt;主要看它的英文解释，一个词看得次数多了也就记住了。&lt;/p&gt;

&lt;h3 id=&#34;每天阅读英文的资料&#34;&gt;每天阅读英文的资料&lt;/h3&gt;

&lt;p&gt;一些个人经常阅读的网站：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://quora.com/&#34;&gt;Quora&lt;/a&gt;：一个类似于知乎的问答类网站，可以挑自己感兴趣的内容来阅读。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/&#34;&gt;Hacker News&lt;/a&gt;：互联网资讯，业界发生的最新的事件都会在上面。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/programming/&#34;&gt;PROGRAMMING&lt;/a&gt;：Reddit 的 Programming 板块，和 Hacker News 类似，不过更加专注于技术内容方面。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;不要花太多时间在上面，每天浏览一下就行。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;英文学习的总结&#34;&gt;英文学习的总结&lt;/h2&gt;

&lt;p&gt;英语不是能够速成的东西，也不是三言两语能够讲完的东西，这里只是提供一个简单的指导，具体的学习计划还请自行搜索更加专业的学习指南。&lt;/p&gt;

&lt;h1 id=&#34;编程基础&#34;&gt;编程基础&lt;/h1&gt;

&lt;p&gt;完成了这一部分内容的学习后你应该具备：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;了解什么是 Computer Science&lt;/li&gt;
&lt;li&gt;基本的计算机数学能力&lt;/li&gt;
&lt;li&gt;基本的程序开发能力&lt;/li&gt;
&lt;li&gt;基本的算法与数据结构的知识&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;计算机科学导论&#34;&gt;计算机科学导论&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00sc-introduction-to-computer-science-and-programming-spring-2011/&#34;&gt;Introduction to Computer Science and Programming&lt;/a&gt;：面向&lt;strong&gt;无编程基础或者只有一点基础的人群&lt;/strong&gt;，使用&lt;strong&gt;Python&lt;/strong&gt;作为教学语言。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.extension.harvard.edu/open-learning-initiative/intensive-introduction-computer-science&#34;&gt;Intensive Introduction to Computer Science Open Learning Course&lt;/a&gt;：CS50，哈佛很火的一门课，在网易公开课上可以找到翻译的视频内容。涵盖的主题有算法（设计、应用、分析）；软件开发（抽象、封装、数据结构、Debug、测试）；计算机体系结构等等。基本上是一门大杂烩的导论课。使用的语言是&lt;strong&gt;C&lt;/strong&gt;、&lt;strong&gt;PHP&lt;/strong&gt;、&lt;strong&gt;JavaScript&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/view_play_list?p=FE6E58F856038C69&#34;&gt;Programming Abstractions&lt;/a&gt;：介绍了更加高级的编程主题（递归、算法分析、数据抽象等等），使用C++作为教学语言。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;数学&#34;&gt;数学&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-fall-2010/&#34;&gt;Mathematics for Computer Science&lt;/a&gt;：介绍了学习计算机所需要的一些数学知识，内容包括集合、关系、证明方法、数论、图论等等。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=h_9WjWENWV8&amp;amp;feature=share&amp;amp;list=PLTdIp1DywMlUpLHEg3ADhE6rrxhW_T5Rx&#34;&gt;Discrete Mathematics&lt;/a&gt;：离散数学。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;编程语言&#34;&gt;编程语言&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/course/programming1&#34;&gt;Learn to Program: The Fundamentals&lt;/a&gt;：面向&lt;strong&gt;无编程基础或者只有一点基础的人群&lt;/strong&gt;，使用&lt;strong&gt;Python&lt;/strong&gt;作为教学语言。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/course/programming2&#34;&gt;Learn to Program: Crafting Quality Code&lt;/a&gt;：如何编写高效与正确的代码。需要有&lt;a href=&#34;https://www.coursera.org/course/programming1&#34;&gt;Learn to Program: The Fundamentals&lt;/a&gt;的基础。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cs61a.org/&#34;&gt;The Structure and Interpretation of Computer Programs&lt;/a&gt;：经典的 SICP 的 Python 版。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;计算理论&#34;&gt;计算理论&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL601FC994BDD963E4&#34;&gt;Introduction to the Theory of Computation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/course/principlescomputing1&#34;&gt;Principles of Computing (Part 1)&lt;/a&gt;：介绍了 CS 中基本的数学和编程理论，需要有&lt;strong&gt;Python&lt;/strong&gt;基础。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;算法与数据结构&#34;&gt;算法与数据结构&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/&#34;&gt;Introduction to Algorithms&lt;/a&gt;：MIT的算法导论课，用《算法导论》作为教材，网上可以找到视频资源，网易公开课上有老版的翻译。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;核心课程&#34;&gt;核心课程&lt;/h1&gt;

&lt;p&gt;学完了「编程基础」部分的内容后，应该已经可以开发一些复杂的程序了，「核心课程」的内容将深入学习计算机科学理论的几个重要的内容。&lt;/p&gt;

&lt;h2 id=&#34;数学-1&#34;&gt;数学&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/course/matrix&#34;&gt;Coding the Matrix: Linear Algebra through Computer Science Applications&lt;/a&gt;：线性代数以及在计算机中的应用。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://inst.eecs.berkeley.edu/~cs70/sp16/&#34;&gt;Discrete Mathematics and Probability Theory&lt;/a&gt;：离散数学与概率论。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;计算理论-1&#34;&gt;计算理论&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLslgisHe5tBM8UTCt1f66oMkpmjCblzkt&#34;&gt;Theory of Computation - Fall 2011&lt;/a&gt;：介绍了机器模型、上下文无关文法、图灵机等，使用的教材是 Michael Sipser 的 &lt;a href=&#34;http://www.amazon.com/Introduction-Theory-Computation-Michael-Sipser/dp/113318779X&#34;&gt;Introduction to the Theory of Computation&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;算法与数据结构-1&#34;&gt;算法与数据结构&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www-inst.eecs.berkeley.edu/~cs61b/fa15/&#34;&gt;Data Structures and Advanced Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.berkeley.edu/~jrs/170/&#34;&gt;Efficient Algorithms and Intractable Problems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;操作系统&#34;&gt;操作系统&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cs162.eecs.berkeley.edu/&#34;&gt;Operating Systems and Systems Programming&lt;/a&gt;：UCB 经典的操作系统课程，介绍了操作系统的基本概念、系统编程、网络、分布式系统、内存分配、多线程等等。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-2#!&#34;&gt;Introduction to Linux&lt;/a&gt;：介绍了 Linux 以及一些简单的命令行使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;程序语言理论&#34;&gt;程序语言理论&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL9D558D49CA734A02&#34;&gt;Programming Paradigms&lt;/a&gt;：编程范式。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/course/compilers&#34;&gt;Compilers&lt;/a&gt;：Stanford 的编译原理课。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://freevideolectures.com/Course/2249/Principles-of-Programming-Languages/1&#34;&gt;Principles of Programming Languages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;计算机体系结构&#34;&gt;计算机体系结构&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL5PHm2jkkXmgVhh8CHAu9N76TShJqfYDt&#34;&gt;Computer Architecture&lt;/a&gt;：CMU&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/course/comparch&#34;&gt;Computer Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;计算机网络&#34;&gt;计算机网络&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.berkeley.edu/~istoica/classes/cs268/10/&#34;&gt;Computer Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCb1OiccPJ0wbMZMOleCvhWQ&#34;&gt;Fundamentals of Computer Networking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;编程工具&#34;&gt;编程工具&lt;/h1&gt;

&lt;h2 id=&#34;ide&#34;&gt;IDE&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Python: &lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;PyCharm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java:&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C/C++: &lt;a href=&#34;https://www.visualstudio.com/en-us/visual-studio-homepage-vs.aspx&#34;&gt;Visual Studio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;编辑器&#34;&gt;编辑器&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Emacs/Vim&lt;/li&gt;
&lt;li&gt;Sublime Text 3&lt;/li&gt;
&lt;li&gt;VS Code&lt;/li&gt;
&lt;li&gt;Atom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;并不一定要用 Emacs 或者 Vim，Sublime Text 其实已经很强大了，足够做日常简单的编辑工作。（这里黑一下 Atom，启动速度太感人了，所以放在最后一个。）&lt;/p&gt;

&lt;h2 id=&#34;git-github&#34;&gt;Git &amp;amp; GitHub&lt;/h2&gt;

&lt;p&gt;使用版本控制来管理自己平时写的代码。&lt;/p&gt;

&lt;p&gt;推荐阅读：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/geeeeeeeeek/git-recipes/wiki&#34;&gt;git-recipes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com/book/zh/v2?f=tt&amp;amp;hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&#34;&gt;Pro Git 2nd Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&#34;&gt;Git教程 - 廖雪峰&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;如何克服拖延&#34;&gt;如何克服拖延&lt;/h1&gt;

&lt;p&gt;资料是有了，但是拖延症不去学怎么办？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pomodorotechnique.com/&#34;&gt;番茄工作法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/prakhar1989/awesome-courses&#34;&gt;https://github.com/prakhar1989/awesome-courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.agupieware.com/2014/05/online-learning-bachelors-level.html&#34;&gt;http://blog.agupieware.com/2014/05/online-learning-bachelors-level.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1_kdHrT8izbROJNaxGflpcZm2ivsjRGF8j1hMzl3b8O0/htmlview&#34;&gt;https://docs.google.com/spreadsheets/d/1_kdHrT8izbROJNaxGflpcZm2ivsjRGF8j1hMzl3b8O0/htmlview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/programming/wiki/faq&#34;&gt;https://www.reddit.com/r/programming/wiki/faq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>使用Emacs Org-mode &#43; GitHub Pages 来写博客</title>
      <link>http://blog.jiayuanzhang.com/post/how-to-use-emacs-and-org-mode-to-build-a-blog/</link>
      <pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/how-to-use-emacs-and-org-mode-to-build-a-blog/</guid>
      <description>

&lt;p&gt;这个博客就是使用Emacs org-mode + GitHub Pages搭建的，博客的主题是org-mode官网的主题，非常的简洁；评论采用的disqus，访问统计使用的是Google和Baidu的统计代码。&lt;/p&gt;

&lt;p&gt;另外，本文中进行操作的环境是在OSX下完成的，Windows用户请自行参考脑补:)&lt;/p&gt;

&lt;h2 id=&#34;起因&#34;&gt;起因&lt;/h2&gt;

&lt;p&gt;之前也折腾过好多的博客，Jekyll、Hexo、Farbox等，这些静态博客生成器都有一个共同点，都是采用的Markdown语法来进行书写的，而自己平时记笔记都是使用的Emacs org-mode，这样就导致了记笔记和写博客两个过程分裂开来了。&lt;/p&gt;

&lt;p&gt;昨晚偶然看到&lt;a href=&#34;http://dirlt.com/&#34;&gt;dirtysalt&amp;rsquo;s homepage&lt;/a&gt;，被深深的震撼了，博主写了很多的干货，专注与博客的内容而不是博客的外观。而自己也是一个极简主义者，觉得这样的博客样式还是挺好看的（很有Web1.0时代的复古风啊）。恰巧博主也是使用的Emacs来写博客，于是便花了一个上午的时间搜集相关的资料并把博客搭建起来了。&lt;/p&gt;

&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;

&lt;h3 id=&#34;github帐号与github-pages&#34;&gt;GitHub帐号与GitHub Pages&lt;/h3&gt;

&lt;p&gt;首先你需要一个存放博客的地方，这里采用的是GitHub，当让也可以使用其他的服务，只要支持静态页面展示即可。&lt;/p&gt;

&lt;p&gt;GitHub的注册过程省略。&lt;/p&gt;

&lt;p&gt;注册完GitHub帐号之后建立一个新的仓库，命名为 &lt;code&gt;xxx.github.io&lt;/code&gt; ，其中 &lt;code&gt;xxx&lt;/code&gt; 为你的用户名。&lt;/p&gt;

&lt;h3 id=&#34;emacs环境&#34;&gt;Emacs环境&lt;/h3&gt;

&lt;p&gt;我使用的是最近比较火的&lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;spacemacs&lt;/a&gt; ，很多功能都配置好了，基本上手即用。&lt;/p&gt;

&lt;p&gt;如果不是用的spacemacs，确保你的Emacs版本为24，org-mode版本为8.0以上，不排除可能因为版本的原因出现各种各样的错误。&lt;/p&gt;

&lt;p&gt;什么，你还不知道Emacs是什么，那先去下载一个Emacs吧，使用org-mode基本不需要什么Emacs的基础，只需要记住几个快捷键就可以了。&lt;/p&gt;

&lt;h2 id=&#34;建立目录结构&#34;&gt;建立目录结构&lt;/h2&gt;

&lt;p&gt;随便在哪里建一个心得目录，这个目录就是存放你的org文件和html文件的地方。假设我们已经有了这么一个目录 &lt;code&gt;org&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ mkdir notes
$ mkdir public_html
$ mkdir gtd&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，那个gtd目录你可以不要，那是用来做时间管理的，如果你不想用Emacs做时间管理的话，可以不用建那个目录。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;notes: 这个目录就是用来存放元数据的地方，你的org文件、图片、CSS文件、PDF等全都是存放在这里的。&lt;/li&gt;
&lt;li&gt;public_html: 这个目录是用来存放导出的HTML文件的，那些非org格式的文件还会原封不动地拷贝过来。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;配置emacs&#34;&gt;配置Emacs&lt;/h2&gt;

&lt;p&gt;这一步有一些复杂，没有Elisp基础的同学可能看不怎么懂，不过没关系，照着做就是了，现在看不懂可以以后学嘛。&lt;/p&gt;

&lt;p&gt;Emacs org-mode自带了很强大的导出功能，可以导出成HTML、markdown、PDF等格式的文件，我们这里使用自带的导出Project的功能，只不过在导出之前，要做一些配置，告诉Emacs要导出哪些东西，导出到哪里，采用什么规则。&lt;/p&gt;

&lt;p&gt;首先我们在配置文件中添加以下代码（普通的在.emacs中添加，spacemacs用户在.spacemacs中添加）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;ox-publish&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-publish-project-alist&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;

          &lt;span class=&#34;c1&#34;&gt;;; 把各部分的配置文件写到这里面来&lt;/span&gt;

          &lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后把其他的配置文件依次添加进来就可以了，主要有生成HTML的部分和原样拷贝的部分。&lt;/p&gt;

&lt;p&gt;下面来配置需要转换成HTML的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;  (&amp;#34;blog-notes&amp;#34;
   :base-directory &amp;#34;~/org/notes&amp;#34;
   :base-extension &amp;#34;org&amp;#34;
   :publishing-directory &amp;#34;~/org/public_html/&amp;#34;
   :recursive t
   :publishing-function org-html-publish-to-html
   :headline-levels 4             ; Just the default for this project.
   :auto-preamble t
   :section-numbers nil
   :author &amp;#34;Yourname&amp;#34;
   :email &amp;#34;example@test.com&amp;#34;
   :auto-sitemap t                ; Generate sitemap.org automagically...
   :sitemap-filename &amp;#34;sitemap.org&amp;#34;  ; ... call it sitemap.org (it&amp;#39;s the default)...
   :sitemap-title &amp;#34;Sitemap&amp;#34;         ; ... with title &amp;#39;Sitemap&amp;#39;.
   :sitemap-sort-files anti-chronologically
   :sitemap-file-entry-format &amp;#34;%d %t&amp;#34;
   )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;:base-directory - 你存放笔记的目录（想将哪里的org文件导出成HTML）&lt;/li&gt;
&lt;li&gt;:base-extension - 导出的文件格式&lt;/li&gt;
&lt;li&gt;:publishing-directory - 导出HTML的目标目录&lt;/li&gt;
&lt;li&gt;:recursive - 设置为t会将子目录中的文件也导出&lt;/li&gt;
&lt;li&gt;:publishing-function - 使用哪个函数来进行publish（注：org 7与8在这个地方有区别）&lt;/li&gt;
&lt;li&gt;:auto-sitemap - 自动生存sitemap&lt;/li&gt;
&lt;li&gt;:sitemap-sort-files - 我这里采用的是按照从新到旧的排列方式&lt;/li&gt;
&lt;li&gt;:sitemap-file-entry-format - 这里采用时间+标题的方式生成sitemap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;并不是所有的文件都需要转化为HTML的，比如说一些图片、PDF、CSS样式等，只需要原样拷贝到目标文件就行，配置代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;blog-static&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:base-directory&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/org/notes&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:base-extension&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:publishing-directory&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/org/public_html/&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:recursive&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:publishing-function&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-publish-attachment&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把这两段代码查到刚刚给的框架里面去即可。&lt;/p&gt;

&lt;p&gt;最后，我们再加一段代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;blog&amp;#34;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:components&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;blog-notes&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;blog-static&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，基本的配置已经完成了，现在可以写一些org文件来生成HTML了。&lt;/p&gt;

&lt;p&gt;比如说我已经写完了一些org文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;.
├── blog-history.org
├── css
│   └── worg.css
├── cv.org
├── front-end-development
│   ├── css.org
│   └── html.org
├── how-to-use-org-mode-build-blog.org
├── index.org
├── personal
│   ├── how-to-study-efficiently.org
│   └── index.org
└── sitemap.org&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后使用&lt;code&gt;M-x org-publish-project&lt;/code&gt;，输入&lt;code&gt;blog&lt;/code&gt;，就会自动开始生成HTML文件了，现在已经可以在public_html文件夹中访问了。&lt;/p&gt;

&lt;p&gt;当然，index页面是需要自己来写的，可以参照我的主页来写，或者自由发挥。&lt;/p&gt;

&lt;h2 id=&#34;个性化定制&#34;&gt;个性化定制&lt;/h2&gt;

&lt;h3 id=&#34;添加css文件&#34;&gt;添加CSS文件&lt;/h3&gt;

&lt;p&gt;首先需要在notes文件夹内新建一个css文件夹，里面保存需要用到的CSS文件，这里我使用的是org-mode官网上用的CSS文件，非常的简洁。&lt;/p&gt;

&lt;p&gt;然后我们需要在 &lt;code&gt;blog-notes&lt;/code&gt; 这个配置中新增一条属性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt; &lt;span class=&#34;ss&#34;&gt;:html-head&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;link rel=\&amp;#34;stylesheet\&amp;#34; type=\&amp;#34;text/css\&amp;#34; href=\&amp;#34;/css/worg.css\&amp;#34;/&amp;gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样子的话再每次生成HTML的时候都会自动加上CSS，这里建议使用绝对路径来访问css文件，要不然在notes文件夹中新建文件夹的时候就无效了。&lt;/p&gt;

&lt;h3 id=&#34;添加评论功能&#34;&gt;添加评论功能&lt;/h3&gt;

&lt;p&gt;这里使用的Disqus的评论系统，使用Duoshuo的话配置过程应该也一样。&lt;/p&gt;

&lt;p&gt;首先在Disqus中注册一个服务，获得一段代码，在 &lt;code&gt;blog-notes&lt;/code&gt; 中新增加一条属性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;  &lt;span class=&#34;ss&#34;&gt;:html-postamble&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;p class=\&amp;#34;postamble\&amp;#34;&amp;gt;Last Updated %C. Created by %a&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;div id=\&amp;#34;disqus_thread\&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;script type=\&amp;#34;text/javascript\&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  var disqus_shortname = &amp;#39;yourshortname&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  (function() {
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           var dsq = document.createElement(&amp;#39;script&amp;#39;); dsq.type = &amp;#39;text/javascript&amp;#39;; dsq.async = true;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           dsq.src = &amp;#39;//&amp;#39; + disqus_shortname + &amp;#39;.disqus.com/embed.js&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           (document.getElementsByTagName(&amp;#39;head&amp;#39;)[0] || document.getElementsByTagName(&amp;#39;body&amp;#39;)[0]).appendChild(dsq);
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           })();
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是代码中的双引号前面需要加上反斜杠来转义。&lt;/p&gt;

&lt;h3 id=&#34;添加统计功能&#34;&gt;添加统计功能&lt;/h3&gt;

&lt;p&gt;使用百度和Google的统计服务，和添加评论功能类似，还是添加在这条属性里面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;    &lt;span class=&#34;ss&#34;&gt;:html-postamble&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;p class=\&amp;#34;postamble\&amp;#34;&amp;gt;Last Updated %C. Created by %a&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  var _hmt = _hmt || [];
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  (function() {
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           var hm = document.createElement(\&amp;#34;script\&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           hm.src = \&amp;#34;//hm.baidu.com/hm.js?yourkey\&amp;#34;;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           var s = document.getElementsByTagName(\&amp;#34;script\&amp;#34;)[0];
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           s.parentNode.insertBefore(hm, s);
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           })();
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;div id=\&amp;#34;disqus_thread\&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;script type=\&amp;#34;text/javascript\&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  var disqus_shortname = &amp;#39;yourshortname&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  (function() {
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           var dsq = document.createElement(&amp;#39;script&amp;#39;); dsq.type = &amp;#39;text/javascript&amp;#39;; dsq.async = true;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           dsq.src = &amp;#39;//&amp;#39; + disqus_shortname + &amp;#39;.disqus.com/embed.js&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           (document.getElementsByTagName(&amp;#39;head&amp;#39;)[0] || document.getElementsByTagName(&amp;#39;body&amp;#39;)[0]).appendChild(dsq);
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           })();
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  (function(i,s,o,g,r,a,m){i[&amp;#39;GoogleAnalyticsObject&amp;#39;]=r;i[r]=i[r]||function(){
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           })(window,document,&amp;#39;script&amp;#39;,&amp;#39;//www.google-analytics.com/analytics.js&amp;#39;,&amp;#39;ga&amp;#39;);
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  ga(&amp;#39;create&amp;#39;, &amp;#39;yourkey&amp;#39;, &amp;#39;auto&amp;#39;);
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  ga(&amp;#39;send&amp;#39;, &amp;#39;pageview&amp;#39;);
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样注意双引号的转义问题即可。&lt;/p&gt;

&lt;h2 id=&#34;托管到github上&#34;&gt;托管到GitHub上&lt;/h2&gt;

&lt;p&gt;生成了HTML文件之后需要把public_html目录托管到GitHub上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ git add .
$ git commit -m &amp;#34;first commit&amp;#34;
$ git remote add origin xxx
$ git push -u origin master&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中&lt;code&gt;xxx&lt;/code&gt;为你之前创建仓库的SSH路径。以后每次generate之后add、commit、push就可以了。&lt;/p&gt;

&lt;p&gt;现在访问 &lt;code&gt;xxx.github.io&lt;/code&gt; 已经可以看到你的博客啦：）&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
