<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Essay on Lifelong Hacker</title>
    <link>http://blog.jiayuanzhang.com/categories/essay/</link>
    <description>Recent content in Essay on Lifelong Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 26 Jul 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://blog.jiayuanzhang.com/categories/essay/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>每周评论 第一期</title>
      <link>http://blog.jiayuanzhang.com/post/weekly-readings-review-01/</link>
      <pubDate>Fri, 26 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/weekly-readings-review-01/</guid>
      <description>

&lt;p&gt;两年前曾经写过类似的文章：&lt;a href=&#34;http://blog.jiayuanzhang.com/post/weekly-reading-report-issue-01/&#34;&gt;这周在读什么 Issue#1&lt;/a&gt;，主要是为了分享一下最近在读、或者是看到的比较好的内容，但是没能坚持写下去，草稿箱里还躺着几篇未发布的阅读分享。这一次打算重写开始写，阮一峰老师已经写了&lt;a href=&#34;http://www.ruanyifeng.com/blog/2019/06/weekly-issue-60.html&#34;&gt;60 期&lt;/a&gt;了。&lt;/p&gt;

&lt;p&gt;分享些什么内容？我的主要阅读来源是 Hacker News 和一些订阅的网站（我使用
inoreader RSS 服务），所以可能分享的大部分内容都是英文的，主题主要涵盖 &lt;strong&gt;编程&lt;/strong&gt; 、 &lt;strong&gt;创业&lt;/strong&gt; 、 &lt;strong&gt;效率&lt;/strong&gt; 这三个方面，每一次分享我会分别推荐几篇文章并写一些简单的评论，这些文章并不一定是最近发布的，主要看我阅读的时间。&lt;/p&gt;

&lt;p&gt;发布时间不定，但是保证一周至少发布一篇文章。&lt;/p&gt;

&lt;p&gt;我的稍后读流程（之后会写一篇文章来详细说明）：&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/%e9%98%85%e8%af%bb%e6%b5%81%e7%a8%8b.jpg&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;「每周评论」的标题借用陈独秀和李大钊在 1918 年创办的期刊&amp;nbsp;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-1&#34;&gt;&lt;a href=&#34;#fn:fn-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&#34;编程&#34;&gt;编程&lt;/h2&gt;

&lt;h3 id=&#34;hacker-tools-hacker-tools&#34;&gt;&lt;a href=&#34;https://hacker-tools.github.io/&#34;&gt;Hacker Tools · hacker tools&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;这是 MIT 开设的一门课程，主要介绍了一些程序员使用的工具。计算机作为我们使用的工具，肯定是越高效越好，如何才能变得高效？在我看来，主要有这几点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;把重复性工作自动化，如果需要每天都重复做的事情，不如写几行脚本自动化；&lt;/li&gt;
&lt;li&gt;使用开源的工具，如果工具不适应你的工作流，完全可以自己动手改造它；&lt;/li&gt;
&lt;li&gt;KISS（Keep It Simple, Stupid）&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-2&#34;&gt;&lt;a href=&#34;#fn:fn-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;，例如命令行工具是符合 KISS 的，但是可以通过组合不同的 KISS 工具实现复杂的功能（例如管道）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Emacs 是一个 Hacker&amp;rsquo;s Tool，这门课程中推荐使用 Vim（我推荐 Emacs 和 Vim 双修，使用 Emacs 的 Evil 模式）。&lt;/p&gt;

&lt;p&gt;除了编辑器，这门课还讲了数据挖掘、版本控制系统、容器等内容，并且这门课在 Youtube
上有视频：&lt;a href=&#34;https://www.youtube.com/playlist?list=PLyzOVJj3bHQuiujH1lpn8cA9dsyulbYRv&#34;&gt;6.HT 2019 - YouTube&lt;/a&gt; 。&lt;/p&gt;

&lt;h2 id=&#34;创业&#34;&gt;创业&lt;/h2&gt;

&lt;h3 id=&#34;there-were-17-000-youtubes-before-youtube&#34;&gt;&lt;a href=&#34;https://thenextweb.com/boris/2013/10/28/17000-youtubes-youtube/&#34;&gt;There were 17,000 YouTubes Before YouTube&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;在 Google launch 之前有 18 家做搜索引擎的，至少有两家和 Google 是做完全一样的业务；在 YouTube 之前有 17000 家（夸张？）做在线视频分享的服务；在 Facebook 前有
myspace、ICQ、MSN。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In other words; nothing is new, everything is a copy of something, or at least
an iteration on a previous idea.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Idea 被做过又怎么样，关键看你能不能有所创新或抓住时机。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Their value is not in the idea itself, but the perfect timing and excution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;吸取别人失败的经验，站在巨人的肩膀上。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The goal isn’t to reinvent the wheel or come up with an idea that no one else
has ever come up with. You can be very successful just taking something that
someone else failed at and do a better version, at a better time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;as-a-startup-founder-what-are-the-pros-and-cons-of-building-something-you-would-want-to-use-yourself&#34;&gt;&lt;a href=&#34;https://www.quora.com/As-a-startup-founder-what-are-the-pros-and-cons-of-building-something-you-would-want-to-use-yourself&#34;&gt;As a startup founder, what are the pros and cons of building something you would want to use yourself?&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;创业做自己想用的东西有什么优缺点？Quora 的 Founder 给出了回答。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Building a product you would want to use yourself is motivating.&lt;/p&gt;

&lt;p&gt;It’s rare to hear about people who create software for fun that they themselves won’t use.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Motivation 可以让工作变得更加 enjoyable，连续加班也不觉得累，这是成功和个人发展的决定性因素。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Second, if you use a product yourself, your intuition will point more closely
toward the right strategy for the business.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;总的来说，没有什么坏处，都是显而易见的好处。&lt;/p&gt;

&lt;p&gt;为了创业而创业就会陷入下面的境地：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you are not a typical customer of your product, you can build up this
intuition over time as you run a company, but you won’t start out with it,
because you haven’t been exposed to customers’ preferences in a deep way. This
can make it a lot harder to get initial traction or funding.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;效率&#34;&gt;效率&lt;/h2&gt;

&lt;h3 id=&#34;augmenting-long-term-memory&#34;&gt;&lt;a href=&#34;http://augmentingcognition.com/ltm.html&#34;&gt;Augmenting Long-term Memory&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Anki 是一个 Flashcard 软件，类似于 Supermemo，一般大家都用来背单词。这篇文章作者（是一个量子物理学家）介绍了他是如何用 Anki 来阅读论文的，包括如何在短时间内阅读并理解 AlphaGo 的论文。&lt;/p&gt;

&lt;p&gt;Anki 是一个长期记忆的工具，你可以用它来记住任何东西。Anki 的算法完全是开源的，你可以在 GitHub 上看到它的源码：&lt;a href=&#34;https://github.com/dae/anki&#34;&gt;https://github.com/dae/anki&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;个人使用 Anki 的经验：&lt;/p&gt;

&lt;p&gt;作为背单词的工具，可以配置 Chrome 或 Firefox 的插件「Anki 划词制卡助手」，可以在阅读网页的过程中自动查词并保存到 Anki 对应的 Deck 中，还包含了阅读时的上下文。&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190726124109.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;图中绿框内即为当时阅读时的上下文，这种情境式背单词的方法比直接拿一本单词书来背效果好太多。&lt;/p&gt;

&lt;p&gt;除了用 Anki 来背单词，还可以用它来做卡片笔记，纳博科夫&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-3&#34;&gt;&lt;a href=&#34;#fn:fn-3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;就是使用卡片笔记来写作的。这种单个的卡片笔记方便记忆（一张卡片就一个知识点），例如下面是我记的一个卡片笔记：&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190726124607.png&#34;/&gt; 
&lt;/figure&gt;

&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-1&#34;&gt;: &lt;a href=&#34;https://zh.wikipedia.org/wiki/每周评论&#34;&gt;每周评论 - 维基百科，自由的百科全书&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-2&#34;&gt;: &lt;a href=&#34;https://en.wikipedia.org/wiki/KISS%5Fprinciple&#34;&gt;KISS principle - Wikipedia&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-3&#34;&gt;: &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E5%BC%97%E6%8B%89%E5%9F%BA%E7%B1%B3%E7%88%BE%C2%B7%E5%BC%97%E6%8B%89%E5%9F%BA%E7%B1%B3%E7%BE%85%E7%B6%AD%E5%A5%87%C2%B7%E7%B4%8D%E5%8D%9A%E7%A7%91%E5%A4%AB&#34;&gt;弗拉基米爾·弗拉基米羅維奇·納博科夫&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>给博客添加了全文 RSS</title>
      <link>http://blog.jiayuanzhang.com/post/add-full-content-rss/</link>
      <pubDate>Wed, 24 Jul 2019 21:59:00 +0800</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/add-full-content-rss/</guid>
      <description>&lt;p&gt;之前博客虽然也有 RSS，但是不是全文索引的，为了方便读者能够直接在 RSS 阅读器中阅读，花了点时间给博客添加了全文 RSS 输出。&lt;/p&gt;

&lt;p&gt;查阅文档&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-1&#34;&gt;&lt;a href=&#34;#fn:fn-1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;可知，Hugo 的 RSS 模板搜索顺序如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nil&#34; data-lang=&#34;nil&#34;&gt;[layouts/index.rss.xml
layouts/home.rss.xml
layouts/rss.xml
layouts/list.rss.xml
layouts/index.xml
layouts/home.xml
layouts/list.xml
layouts/_default/index.rss.xml
layouts/_default/home.rss.xml
layouts/_default/rss.xml
layouts/_default/list.rss.xml
layouts/_default/index.xml
layouts/_default/home.xml
layouts/_default/list.xml
layouts/_internal/_default/rss.xml]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;我们随便按照顺序建立一个 xml 模板文件即可，例如，我们这里建立
&lt;code&gt;layouts/index.rss.xml&lt;/code&gt; 文件，使用 Hugo 官方提供的 RSS 模板：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;{{ printf &amp;#34;&lt;span class=&#34;cp&#34;&gt;&amp;lt;?xml version=\&amp;#34;1.0\&amp;#34; encoding=\&amp;#34;utf-8\&amp;#34; standalone=\&amp;#34;yes\&amp;#34; ?&amp;gt;&lt;/span&gt;&amp;#34; | safeHTML }}
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rss&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;xmlns:atom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;http://www.w3.org/2005/Atom&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ if eq  .Title  .Site.Title }}{{ .Site.Title }}{{ else }}{{ with .Title }}{{.}} on {{ end }}{{ .Site.Title }}{{ end }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Permalink }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Recent content {{ if ne  .Title  .Site.Title }}{{ with .Title }}in {{.}} {{ end }}{{ end }}on {{ .Site.Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Hugo -- gohugo.io&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;generator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ with .Site.LanguageCode }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{.}}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;language&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{end}}{{ with .Site.Author.email }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;managingEditor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;managingEditor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{end}}{{ with .Site.Author.email }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;webMaster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;webMaster&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{end}}{{ with .Site.Copyright }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;copyright&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{.}}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;copyright&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{end}}{{ if not .Date.IsZero }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lastBuildDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Date.Format &amp;#34;Mon, 02 Jan 2006 15:04:05 -0700&amp;#34; | safeHTML }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lastBuildDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ end }}
    {{ with .OutputFormats.Get &amp;#34;RSS&amp;#34; }}
        {{ printf &amp;#34;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;atom:link&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;%q&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;\&amp;#34;self\&amp;#34;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;%q&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&amp;gt;&lt;/span&gt;&amp;#34; .Permalink .MediaType | safeHTML }}
    {{ end }}
    {{ range .Pages }}
    &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Permalink }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;link&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pubDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Date.Format &amp;#34;Mon, 02 Jan 2006 15:04:05 -0700&amp;#34; | safeHTML }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;pubDate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      {{ with .Site.Author.email }}&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{end}}
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;guid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Permalink }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;guid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;{{ .Summary | html }}&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;description&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ end }}
  &lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;rss&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中，我们需要全局输出，只需要修改 &lt;code&gt;&amp;lt;description&amp;gt;{{ .Summary | html
}}&amp;lt;/description&amp;gt;&lt;/code&gt; 为 &lt;code&gt;&amp;lt;description&amp;gt;{{ .Content | html }}&amp;lt;/description&amp;gt;&lt;/code&gt; 即可。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.toml&lt;/code&gt; 配置中的一些字段可以用来控制 RSS 的输出：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-toml&#34; data-lang=&#34;toml&#34;&gt;&lt;span class=&#34;nx&#34;&gt;rssLimit&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;# 限制 RSS 文章输出的数量&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;languageCode&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;en-us&amp;#34;&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;copyright&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License.&amp;#34;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;author&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;My Name Here&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;最开始的时候生成 RSS 会抛出一些异常：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-language&#34; data-lang=&#34;language&#34;&gt; error on line 455 at column 40: PCDATA invalid Char value 8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一般来说，出现这些问题是因为 Markdown 文件中存在一些特殊字符，例如 &lt;code&gt;^H&lt;/code&gt;、&lt;code&gt;^E&lt;/code&gt; 等字符，解决办法有两个：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;通过 Hugo 的正则表达式替换掉特殊字符，参考文档&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:fn-2&#34;&gt;&lt;a href=&#34;#fn:fn-2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;li&gt;在 markdown 源文件中把特殊字符删除&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;另外，可以通过这个链接来订阅本博客：&lt;a href=&#34;http://blog.jiayuanzhang.com/index.xml&#34;&gt;http://blog.jiayuanzhang.com/index.xml&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:fn-1&#34;&gt;&lt;a href=&#34;https://gohugo.io/templates/rss/&#34;&gt;https://gohugo.io/templates/rss/&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:fn-2&#34;&gt;&lt;a href=&#34;https://gohugo.io/functions/replacere/#readout&#34;&gt;https://gohugo.io/functions/replacere/#readout&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:fn-2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>元知识：信息检索指南</title>
      <link>http://blog.jiayuanzhang.com/post/meta-knowledge-how-to-search-informations/</link>
      <pubDate>Mon, 01 Jul 2019 20:16:00 +0800</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/meta-knowledge-how-to-search-informations/</guid>
      <description>

&lt;p&gt;什么是元知识，我的理解是各个领域都通用的知识，例如交流的能力，搜索信息的能力，语言的能力等，不管你是从事什么行业的工作，这些都是必备的技能（或可以增益的技能）。什么是领域知识，例如编程能力、运营能力，这些是在特定领域发挥作用的知识，虽然编程和运营都可以运用在别的领域中，但是都是比较简单的情况（产品经理如果想学习简单的数据分析知识，不需要去学习如何编写操作系统）。&lt;/p&gt;

&lt;p&gt;信息检索是所有元知识中最重要的一个，因为如果学会了这个，完全可以通过自学习的方式去学习其他元知识，所以可以被成为「元知识」的「元知识」。&lt;/p&gt;

&lt;h2 id=&#34;定义问题&#34;&gt;定义问题&lt;/h2&gt;

&lt;p&gt;在搜索信息之前我们首先要定义问题，你到底要搜索什么样的信息？&lt;/p&gt;

&lt;p&gt;很多人其实不会问问题，经常有网友给我发邮件或私信询问编程相关的问题，很多都是直接甩过来一张错误的截图，然后留一句怎么解决（有的甚至连这句话都没有）。最开始我还会仔细看一下问题中的具体报错是什么，久而久之，这种问题多了，我也就懒得回答了。有的人我告诉他把问题描述清楚，ta 还会说你摆架子。后来，对于这种问题，我直接删除扔进垃圾箱不再去管。&lt;/p&gt;

&lt;p&gt;相反的，另外一部分人很善于问问题，问题描述地非常清楚，包括产生错误的上下文，遇见错误后自己的解决办法，对于这种问题，经常是看了上下文就能找到问题出现在哪里，或者根据它的运行环境在本地测试一下就能 debug 出问题所在，对于这样的提问者，我通常非常乐于解答。&lt;/p&gt;

&lt;p&gt;好的提问和坏的提问，可以带来不一样的反馈。所以，下次在问问题之前可以先问问自己：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;遇到的问题到底是什么？能否用简单的话描述？&lt;/li&gt;
&lt;li&gt;出现问题的上下文是什么？是否是某些失误导致的？&lt;/li&gt;
&lt;li&gt;我采取了哪些办法来解决问题？是否可行？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;说不定在你想清楚这些事后，就能自己找到问题的解决方案了。&lt;/p&gt;

&lt;p&gt;关于定义问题的方法，推荐阅读一下波利亚的&lt;a href=&#34;https://book.douban.com/subject/2124114/&#34;&gt;《如何解题——数学思维的新方法》&lt;/a&gt;，这本简短的小册子介绍了如何定义问题、描述问题、抽象模型、解决问题，是一本对思维训练非常有帮助的书。&lt;/p&gt;

&lt;p&gt;Raymond Hettinger 在今年的 PyCon 上有一场演讲就是关于如何定义问题的，有兴趣的读者可以看一下：&lt;a href=&#34;https://www.youtube.com/watch?v=%5FGP9OpZPUYc&#34;&gt;Modern solvers: Problems well-defined are problems solved&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;学会提问&#34;&gt;学会提问&lt;/h2&gt;

&lt;p&gt;学会定义问题之后就要开始提问了，从上一节也可以看出来，不同的提问方式得到的解答也不一样。好的提问会得到积极的解答，不好的提问会得不到有效的反馈，被当成伸手党。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/master/README-zh%5FCN.md&#34;&gt;提问的智慧&lt;/a&gt; 这本小册子详细介绍了在互联网上应该如何提问，虽然很大程度上是编程领域的提问指南，但是对于其他领域也同样适用。&lt;/p&gt;

&lt;h2 id=&#34;使用搜索引擎&#34;&gt;使用搜索引擎&lt;/h2&gt;

&lt;p&gt;如果遇到一个自己无法解决的问题，第一件事应该是求助于搜索引擎。所有你能想到的问题，大体上别人也都问过了，搜索引擎是你最好的老师。&lt;/p&gt;

&lt;p&gt;如何用好搜索引擎？&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;选择合适的搜索引擎&lt;/li&gt;
&lt;li&gt;定义问题，分解关键词&lt;/li&gt;
&lt;li&gt;使用高级搜索&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;你可以根据问题的不同来选择不同的搜索引擎，一般来说，中文的娱乐内容可以使用百度来搜索，其他严肃类的内容搜索，统一使用 Google。关于为什么严肃类内容不能使用百度来搜索，可以参考这篇文章：&lt;a href=&#34;https://www.huxiu.com/article/282406.html&#34;&gt;搜索引擎百度已死-虎嗅网&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;定义问题在第一节中已经讲到，将定义好的问题分解成关键词可以更好地搜索到想要的内容。例如「Python 如何使用标准库进行格式化时间字符串」可以分解为下面几个关键词：「Python」、「格式化」、「时间字符串」，还可以翻译成英文关键词：「Python」、「format」、「date string」，第一条就是 Stack Overflow 的解答：&lt;a href=&#34;https://stackoverflow.com/questions/14524322/how-to-convert-a-date-string-to-different-format&#34;&gt;python - How to convert a date string to different format - Stack Overflow&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;很多人使用搜索引擎都是简单的用关键词进行搜索，其实 Google 等搜索引擎都支持自定义的高级搜索，知乎的这篇回答详细介绍了如何使用 Google 的高级搜索语法：&lt;a href=&#34;https://www.zhihu.com/question/20161362&#34;&gt;如何用好谷歌等搜索引擎？ - 知乎&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;自动化你的搜索流程&#34;&gt;自动化你的搜索流程&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.alfredapp.com/&#34;&gt;Alfred&lt;/a&gt; 是 macOS 上的一个快速启动器，利用 Alfred Workflow，可以自定义你的搜索引擎工具箱。&lt;/p&gt;

&lt;p&gt;例如我经常会在 GitHub 上搜索一些代码片段，利用 Alfred 可以把流程简化为：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;快捷键呼出 Alfred 输入窗口；&lt;/li&gt;
&lt;li&gt;输入想要搜索的代码片段关键词（或从剪贴板粘贴）；&lt;/li&gt;
&lt;li&gt;回车！&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;结果会自动展示在浏览器的窗口中。&lt;/p&gt;

&lt;p&gt;Alfred 的设置如下（在新标签页中查看大图）：&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190701201021.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;其中，Search URL 填写的是想要搜索的地址， &lt;code&gt;query&lt;/code&gt; 是替换的搜索内容，打开 Alfred，输入 keyword 中的关键词就可以快速呼出这个搜索框了。&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190701201221.png&#34;/&gt; 
&lt;/figure&gt;


&lt;p&gt;这只是 Alfred 基础功能的最简单使用，在之前的文章中我介绍过使用 Alfred 的
Workflow 来自动生成博客：&lt;a href=&#34;http://blog.jiayuanzhang.com/post/use-devonthink-to-write-blog/&#34;&gt;使用 Devonthink 来写博客&lt;/a&gt;，在后续的文章中，我将会介绍更多的 Alfred 高级使用技巧。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>这周在读什么 Issue#1</title>
      <link>http://blog.jiayuanzhang.com/post/weekly-reading-report-issue-01/</link>
      <pubDate>Fri, 24 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/weekly-reading-report-issue-01/</guid>
      <description>

&lt;p&gt;为什么要写这个？最主要的原因还是激励自己多多阅读，读好书和好文章，然后写 review。&lt;/p&gt;

&lt;p&gt;读些什么？平常的阅读比较杂，除了书籍之外，还会读很多的博客文章，所以会写这周的 book review，主要是针对这周读完的书，读了一半放弃不打算再读的书也会写，没有读完的书不写；文章就简单写一些笔记性的 review。&lt;/p&gt;

&lt;p&gt;*注：标注了 &lt;code&gt;[TECH]&lt;/code&gt; 是和我专业相关的内容，可以跳过。&lt;/p&gt;

&lt;h2 id=&#34;books&#34;&gt;Books&lt;/h2&gt;

&lt;h3 id=&#34;清华园日记-https-book-douban-com-subject-4251102-季羡林-外语教学与研究出版社-二零零九&#34;&gt;&lt;a href=&#34;https://book.douban.com/subject/4251102/&#34;&gt;《清华园日记》&lt;/a&gt;，季羡林，外语教学与研究出版社，二零零九。&lt;/h3&gt;

&lt;p&gt;这本书断断续续得读了有一个月的时间，因为是日记体的形式，所以什么时候都可以拿出来读一下。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;日记是写给自己看的，什么样的思想，什么样在人前难以说出口的话，都写了进去。万没想到今天会把日记公开。这些话是不是要删掉呢？我考虑了一下，决定不删。一仍其旧，一句话也没有删。==我七十年前不是圣人，将来也不会成为圣人。我不想到孔庙里去陪着吃冷猪肉。我把自己活脱脱地暴露于光天化日之下。==&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这本日记是季羡林在清华园求学时所记，从大三一直写到大四。百年之前的大学生活和现在相比，并无什么太大的不同。季老也有过迷茫，对前途的忧虑，但是更多的是在勤勉地读书、写文章。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;苏东坡词「谁到人生无再少，门前流水尚能西」。难道这就是「再少」吗？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;阅读用时：7 小时 26 分，&lt;a href=&#34;https://www.evernote.com/l/AYC42MIUq-5BXIHRNGdRcL1OxXt3DPzLT5k&#34;&gt;摘录&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;articles&#34;&gt;Articles&lt;/h2&gt;

&lt;h3 id=&#34;1-how-i-got-a-second-degree-and-earned-5-developer-certifications-in-just-one-year-while-working-and-raising-two-kids-https-medium-freecodecamp-com-how-i-got-a-second-degree-and-earned-5-developer-certifications-in-just-one-year-while-working-and-2b902ee291ab-gblxpzdk0&#34;&gt;1. &lt;a href=&#34;https://medium.freecodecamp.com/how-i-got-a-second-degree-and-earned-5-developer-certifications-in-just-one-year-while-working-and-2b902ee291ab#.gblxpzdk0&#34;&gt;How I got a second degree and earned 5 developer certifications in just one year, while working and raising two kids&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;全职教师、两个孩子、五张开发者证书、一个第二学位。如何在一年内实现这么多事？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Ambitious goals are important.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;另外，你还不得不放弃一些东西。比如，剧是不能追了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It was important for me to give things up in order to accomplish my goals.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;学会使用 &lt;sup&gt;8&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt; 法则，逃出自己的 comfort zone。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Really, when learning anything, you should ask yourself if it is part of the 20% of learning content that will give you 80% of value.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这和很久前看的&lt;a href=&#34;https://www.douban.com/group/topic/34856495/&#34;&gt;一篇文章&lt;/a&gt;很像。&lt;/p&gt;

&lt;h3 id=&#34;2-unconventional-way-of-learning-a-new-programming-language-https-hackernoon-com-unconventional-way-of-learning-a-new-programming-language-e4d1f600342c-6o98rs4xs&#34;&gt;2. &lt;a href=&#34;https://hackernoon.com/unconventional-way-of-learning-a-new-programming-language-e4d1f600342c#.6o98rs4xs&#34;&gt;Unconventional way of learning a new programming language&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;Open source projects oriented programming.&lt;/p&gt;

&lt;p&gt;如何学习一门新的语言，参加关于那个语言的开源项目。开源项目没有想象的那么难。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I had a look at the issues and found a lot of “beginner” issues. I immediately started working on them and submitted a couple of pull requests. Fast forward to today, I am one of the main contributors for a couple of their open projects and also one of the 20 Open Source Community Leaders for DuckDuckGo.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;3-a-vision-of-coding-without-opening-your-eyes-https-medium-freecodecamp-com-looking-back-to-what-started-it-all-731ef5424aec-scacfw9pe&#34;&gt;3. &lt;a href=&#34;https://medium.freecodecamp.com/looking-back-to-what-started-it-all-731ef5424aec#.scacfw9pe&#34;&gt;A Vision of Coding, Without Opening your Eyes&lt;/a&gt;&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;I’m a coder. I’m also blind. Blind as a bat, you might say. And I was born this way.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这篇文章写自一个 blind coder，解释了三个（在我看来）有点 offensive 的问题：1）如何阅读；2）如何 coding；3）会做梦吗？&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I’ll try and sketch out an image for those of you who are curious about accessibility, and how blind people use computers to code, and to do the work of the 21st century.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>叛逃 Spotify</title>
      <link>http://blog.jiayuanzhang.com/post/go-to-spotify/</link>
      <pubDate>Sun, 19 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/go-to-spotify/</guid>
      <description>&lt;p&gt;不久前我还&lt;a href=&#34;mweblib://14879083243319&#34;&gt;写文&lt;/a&gt;称赞过 Apple Music，现在光速打脸，叛逃 Spotify。&lt;/p&gt;

&lt;p&gt;主要原因有几点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Apple Music 的「My Favorites Mix」一周才更新一次，不够听。&lt;/li&gt;
&lt;li&gt;推荐的歌单都是听过的，专辑也是，重复推荐，并且由于是人工编辑的歌单，难免有不合自己口味的。&lt;/li&gt;
&lt;li&gt;个性化推荐的内容太单一，经常出现歌慌，需要自己去找歌。&lt;/li&gt;
&lt;li&gt;同步问题。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Spotify 的 Premium 之前就买了，但是一直没有用。这几天用了一下，说一下使用体验：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;推荐算法很厉害，机器推荐的歌更个人一些，不会有人工歌单的主观因素在里面。&lt;/li&gt;
&lt;li&gt;「Based on the songs in this playlist」这个功能很有用，可以用来扩充歌单。&lt;/li&gt;
&lt;li&gt;Radio 功能比 Apple Music 强大。&lt;/li&gt;
&lt;li&gt;多设备同步，这个功能太方便了，我只需要在电脑上断开蓝牙连接，然后就可以直接在手机上听了（配合蓝牙耳机）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一些不满意的地方：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;不能收藏专辑，有的专辑里面并不是每首歌都喜欢听，save 专辑会把整张专辑里面的歌添加到资料库里，这不得不让我又新建一个 Loved 的歌单，专门用来放喜欢的歌，这样和 Apple Music 就是差不多的操作逻辑。&lt;/li&gt;
&lt;li&gt;没有提供加心功能，「+」仅仅是把歌曲添加到资料库，所以还得手动建一个歌单然后再添加，比较麻烦（可能我使用的方法不正确？）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不过毕竟才用了几天，还没有深度体验过。Mac 上推荐配合 Alfred 的 Workflow 来使用，可以避免到 Spotify 应用里面进行操作。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apple Music，古典音乐，阅读</title>
      <link>http://blog.jiayuanzhang.com/post/apple-music-and-classical-music-and-reading/</link>
      <pubDate>Wed, 24 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/apple-music-and-classical-music-and-reading/</guid>
      <description>

&lt;h3 id=&#34;apple-music&#34;&gt;Apple Music&lt;/h3&gt;

&lt;p&gt;自从Apple Music（以下简称「AM」）发布以来，就一直在使用，从最开始的免费试用到现在每个月10￥的订阅。自从Windows时代就使用iTunes听音乐了（当时有一部iPod），在没有AM的时候，都是从论坛下好别人买的专辑来听。一方面在国内想要在iTunes Store上购买专辑过于麻烦（两个账号需要来回切换），另一方面作为一个学生党iTunes Store上两首歌就相当于一顿饭的价钱对于我来说也有点小贵了，所以AM刚推出的时候，还是比较开心的，没想到入华后价格竟然只要10￥每月，就只相当于两首歌的钱！&lt;/p&gt;

&lt;p&gt;这几个月使用下来，发现还是存在不少的问题。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;操作逻辑复杂。例如听到一首好听的歌，标注了心之后，它是不会出现在你的播放列表中的，因为标注心只是为了优化推荐的算法。所以每次听到一首好听的曲子，都要进行两个步骤：先添加到库中，再标注心。这样才会在你的Smart Playlist中显示出来。这个估计是iTunes的遗留问题，因为iTunes是以Library的方式来管理的，所以需要先添加进Library中，才能进行进一步的操作，不过AM作为一个流媒体音乐服务，这样做显然是多此一举了。&lt;/li&gt;
&lt;li&gt;每个设备间同步存在问题。我一般都是在Mac上听音乐，不过偶尔也会使用iPhone来听，但是很多加心得歌曲到了iPhone上面就变成没有加心的了。所以现在我也懒得使用iPhone来听歌了，或者就随便打开一个推荐的播放列表来听。&lt;/li&gt;
&lt;li&gt;网络问题。这个应该是最要吐槽的一点了，听歌时断时续是最不能忍的事情了。不知道是Apple在国内没有设置服务器还是什么其他原因，有时候即使开着代理缓冲的速度也很慢。有些专辑就只能先下载下来，然后再听。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这是我使用过程中遇到的三个比较影响体验的问题，当然还有其他小的，比如说什么中文歌的名字全是英文（使用英文系统的原因，日文歌的名字全是罗马音等等之类的，只不过这些暂时还能够忍受，不是太影响听音乐的体验（个人很少听中文和日文的歌曲）。&lt;/p&gt;

&lt;p&gt;作为一个数据控，如果听歌的数据不能够记录下来，那么就好像和没听一样（强迫症的症状），虽然iTunes也可以记录歌曲的播放次数，上一次播放时间之类的数据，不过还是过于简单了。之前一直使用的是Last.fm，使用AM了之后发现Last.fm的客户端没办法抓取到数据了，后来找到了「Bowtie」这个小工具，连Radio中播放的内容都能够抓取到，太强大了。分析一首歌听了多少遍的意义并不是很大，但是累计了这么多的数据之后还是可以发现了一些有趣的东西的，比如说我听的最多的歌手是竟然是「ColdPlay」。&lt;/p&gt;

&lt;p&gt;如果作为一个音乐服务来说，AM还存在着很多问题，不过毕竟还是一个新生的流媒体服务，希望下一次大的更新之后能够提高一些用户体验。&lt;/p&gt;

&lt;p&gt;PS. 也使用过一段时间的Xiami和网易云音乐，因为种种原因放弃了。&lt;/p&gt;

&lt;h3 id=&#34;古典音乐&#34;&gt;古典音乐&lt;/h3&gt;

&lt;p&gt;关于古典音乐，其实我只有很少的了解，也只听过很少的入门曲目，最开始听古典是因为「The 50 Most Essential Pieces of Classical Music」这张专辑，这张专辑里面基本上都是一些非常经典的曲目，例如当初看《V字仇杀队》中的「1812 Festival Overture」，以及每个人都熟悉的「Canon in D Major」，如果从来没听过古典，推荐去听一下这个专辑，一定会发现很多熟悉的音乐。&lt;/p&gt;

&lt;p&gt;上学期选修了一门《西方古典音乐鉴赏》，然而并没有很认真地听课，不过还是了解了一些知识。然后看了木遥在博客上的一系列&lt;a href=&#34;http://blog.farmostwood.net/305.html&#34;&gt;介绍古典音乐的文章&lt;/a&gt;，算是对古典音乐有了一个初步的认识。&lt;/p&gt;

&lt;p&gt;如果说是欣赏古典音乐，还是达不到那个层次的，因为现在古典音乐的作用就是在阅读或者写代码的时候提供一个相对较安静的环境，说白了，还是出于一种功利的目的在听（为了更好地完成其他工作）。&lt;/p&gt;

&lt;p&gt;今天听AM的Classical Radio听到很很多以前听过，但是忘了名字的曲子（不得不说，古典音乐的曲子名字太难记了），统统加心添加进Library中。现在听音乐的基本流程就是，先范听，听到喜欢的在去把Artist的所有作品依次听下去，这样会找到不少喜欢的内容。&lt;/p&gt;

&lt;h3 id=&#34;阅读&#34;&gt;阅读&lt;/h3&gt;

&lt;p&gt;前几天Kindle上突然推送了有关Kindle Unlimited的内容，类似于AM，按月订阅，然后可以阅读所有的订阅内容。刚开始还是蛮高兴的，不过看了一下在计划中的书目，基本上没有想看的，果然想看的书还是需要付费啊。不过有7天的试用时间，不用白不用，昨天读了一本漫画书《时间管理：如何充分利用你的24小时》，很有趣的一本小册子。这个漫画好像是一个系列，准备最近把感兴趣的都看一遍。&lt;/p&gt;

&lt;p&gt;最近看书的时间有点少了，而更多的时间都在看RSS订阅的内容，Pocket上存档的文章，以及知乎、Quora、Reddit、Hacker News上的一些文字。毫无疑问，书籍的信噪比肯定是大于后者之流的，如果要搞一个排名的话，信噪比的大小应该是这样的：书籍 &amp;gt; Pocket上存档的文章 &amp;gt; Hacker News = Reddit &amp;gt; RSS订阅内容 &amp;gt; Quora &amp;gt;= 知乎（至少Quora可以练习一下英语，笑）。当然，如果你是整天阅读微信朋友圈以及QQ空间，那么信噪比可能会 &amp;lt; 1。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上是深夜的无聊吐槽内容，本来这段时间应该是去写代码或者阅读其他内容的，只不过因为结构化拖延的原因才来写Blog……&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>为什么我要写博客</title>
      <link>http://blog.jiayuanzhang.com/post/why-i-blog/</link>
      <pubDate>Wed, 01 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/why-i-blog/</guid>
      <description>

&lt;p&gt;很显然，写一个长期的&lt;strong&gt;价值博客&lt;/strong&gt;会带来很多益处，却不会有什么明显的坏处（当然，在某些特定的国家讨论某些特定的话题不在此列）。&lt;/p&gt;

&lt;p&gt;下面是我了解到的写一个长期的价值博客所带来的好处：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;督促自己进行有价值的思考&lt;/strong&gt;。写一篇优秀的文章是不容易的，在写之前，势必需要进行大量的思考、沉淀，要不然你就无事可写。（Note：这里的博客指的是干货文章，碎碎念、心情日记、吐槽文章等不算此列。关于这一点将在下文细说。）很显然，在动手写之前，搜索大量的资料、回忆以前思考过的内容、再将它们串联起来等过程就必不可少了，这就强迫了自己去思考、去总结。这样所带来的益处就是显而易见的：1）&lt;strong&gt;督促自己在平时生活学习中进行与价值的思考&lt;/strong&gt;，因为每一个有价值的思考内容都有可能成为你下一篇博客中所要论述的内容，这就不得不迫使自己思考、总结、记录平时的思考内容；2）&lt;strong&gt;升华平时的思考内容&lt;/strong&gt;，平时思考之事大多都是没有联系的，而想要完成一篇文章，必然需要有一定的结构和逻辑，这就要求自己将平时思考的内容串联起来，更加深入理解背后的本质；3）&lt;strong&gt;写本身就是最好的思考&lt;/strong&gt;，写一篇博客，需要将零散的、不具体的的内容用书面语表现出来，这就要求你需要一定的逻辑表达能力和写作功底。&lt;!-- more --&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;可以结交很多志同道合的朋友&lt;/strong&gt;。1）毫无疑问，目前大多数人的社交都是在网络上完成的，在没有网络的时代，假设你需要结交一个外国人，那么出国就是你唯一的选择。而到了网路时代，这些所有的动作&lt;strong&gt;只需要一个点击就可以全部完成&lt;/strong&gt;，你可以在家里足不出户就结交到外国的同好；2）传统的认识一个人需要通过交流来完成，这个过程&lt;strong&gt;耗时周期长&lt;/strong&gt;，并且&lt;strong&gt;效率很低&lt;/strong&gt;，因为你每结交一个人，都需要重复的完成这一动作，即使现在有了Twitter等micro blog服务，但这依然是一种低效率的方式：你并不能完全通过他的微博来断定他是一个什么样的人，因为这些社交网站上的内容大多数都是心情日记等杂乱的东西。所以，一个价值博客就显得尤为重要了，这不仅大大简化了结交朋友的途径（&lt;strong&gt;一次写作，反复阅读&lt;/strong&gt;），并且可以客观的反映一个人在各方面的水平。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;自己会不一定是真的会&lt;/strong&gt;，只有当自己能够清晰地、准确地教会其他人时，才算真的会了。大家肯定经常会有这样地经历：我自己是明白的，但是就是不知道怎么说，更通俗地讲就是“只可意会，不可言传”。这其实不能算真的会，或者说是会的不彻底。如果想要通过博客来教会别人，势必自己会先将这些不会的部分搞懂，这在一定程度上也强迫了自己去更深入的学习。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;虚心的接受批评&lt;/strong&gt;。自己在思考的过程中难免会有一些错误，可能自己不会发现，但是当它呈现在博客上与他人分享的时候，别人就有可能发现自己的错误。并且，在与他人讨论的过程中，也可以更加深入的思考问题，或者会跳出自己当初的思考境地，以另外一个角度审视问题，这样所带来的帮助也是显而易见的。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;一个优秀的博客就是一分优秀的简历&lt;/strong&gt;。刘未鹏在&lt;a href=&#34;http://mindhacks.cn/2011/11/04/how-to-interview-a-person-for-two-years/&#34;&gt;怎样花两年时间去面试一个人&lt;/a&gt;中论述过这个问题。一个优秀的价值博客可能会给你带来职业上的帮助。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;锻炼自己持之以恒的能力&lt;/strong&gt;。写一个优秀的博客是不容易的，如果长期更新博客的同学可能就会有体会，写一篇高质量的博客往往需要话费数小时的时间，这还不包括前期思考、搜集信息的时间。&lt;strong&gt;既然写一个博客这么费力，并且还没什么报酬（大多数博客都是无偿的），我为什么要写？&lt;/strong&gt;其实，写一个长期的价值博客所带来的效益是很大的，但是它不是以可以用可见的物品来衡量的。简单的说，以上的几点都是写一个博客所带来的价值，这些价值都是不能用金钱来衡量的（如果你需要，一个优秀的博客也可以给你带来金钱效益）。但是坚持写一个博客并不那么简单，这需要你不断思考以获得可写之物，定期的更新博客会提升你自己坚持的能力。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;为什么要写价值博客&#34;&gt;为什么要写价值博客&lt;/h2&gt;

&lt;p&gt;什么是价值博客，简单的说就是可以给他人帮助的博客。显然，碎碎念、心情琐记等文章对他人并没有什么帮助，或者说帮助很小。或许你的朋友对这些文章感兴趣，这是因为他们认识你，想要了解你的生活。但是你要意识到，你的博客是面向所有人的（如果是的话），如果其他人并不认识你的话，他可能对你的生活并不怎么感兴趣，他阅读你的博客是为了获取有价值的内容。&lt;/p&gt;

&lt;p&gt;我也经常阅读一些博客的内容，但据我所见，现在的很多博客写的都是一些碎碎念，心情日记，往往这些博客我都要在几十篇文章中寻找干货来阅读，这无疑增加了读者的工作量。如果非要写这些心情琐记，个人建议是和自己的主博客（干货博客）分离开，并且这些东西只需要自己的朋友能够看到就足够了，大部分人想看的是你的价值内容。&lt;/p&gt;

&lt;p&gt;一个价值博客不是那么简单就可以写成的。现在很多人都是比较浮躁的，这些浮躁的风气在博客界也流行起来。经常在网上看到很多人声称一天一篇干货文章，或是每天一篇千字文。并不觉得这样做有什么意义，好的文章不是那么容易就写成的，一千字的文章想要详细的论说一件事情都很困难（也有可能是我的写作功底比较差），更别提能够有什么深度了。事实也正是如此，看过很多这样的文章，要不是文字十分肤浅，就是无话找话，不知所云。所以这也是一个价值博客所需要避免的（当然，一些资讯类的博客除外，例如&lt;a href=&#34;http://www.williamlong.info/&#34;&gt;月光博客&lt;/a&gt;）。&lt;/p&gt;

&lt;h2 id=&#34;如何开始&#34;&gt;如何开始&lt;/h2&gt;

&lt;p&gt;很简单，找一个可以写的地方就开始写。&lt;/p&gt;

&lt;p&gt;如果你是一个爱折腾的人，我推荐Github Pages＋Octopress，十分纯粹，在本地写，写完直接上传即可，没有多余的事情，并且可以支持Markdown语法，大大提高了写作的效率。网络上的教程很多，个人认为官方的文档最适合入门了，可以照着一步一步来完成。如果英文不好的话，可以找一些其他人写的教程（自己估计也会写一篇）。&lt;/p&gt;

&lt;p&gt;如果你不是一个爱折腾的人，可以试试Wordpress，同样的，网络上也有很多教程。&lt;/p&gt;

&lt;p&gt;关见不在于你在哪里写，用什么写，而在于你博客的价值。要知道，很多大牛都是直接用Html写网页上传的。&lt;/p&gt;

&lt;h2 id=&#34;几个问题&#34;&gt;几个问题&lt;/h2&gt;

&lt;h3 id=&#34;q1-写了博客没人来阅读怎么办&#34;&gt;Q1:写了博客没人来阅读怎么办？&lt;/h3&gt;

&lt;p&gt;这应该是大多数人所面临的一个问题，当你洋洋洒洒写了上千字时，收获的却只是几十的阅读量，这肯定会一定程度上打击写作者。如果面临这种问题，就需要自己分析一下原因了，如果你写的不是有价值的内容，那么出现这种情况是必然的。&lt;strong&gt;既然你的东西对我没有价值，我为什么要浪费自己的生命去阅读它？&lt;/strong&gt;如果你写的博客是有价值的，那么你大可不必担心，因为是金子总要发光的，或者你可以将它转载到别的地方（有价值的内容才值得转载）
。如果你的博客是有价值的，那你就坚持写下去，肯定会有人来读。&lt;/p&gt;

&lt;h3 id=&#34;q2-我不知道写些什么-怎么开始&#34;&gt;Q2:我不知道写些什么，怎么开始？&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;你在思考什么，就写什么。&lt;/strong&gt;只要是经过思考的内容，都是值得写的，如果不知道写些什么，可以先写下几个关键词，然后再由这些关键词引申出去。比如看了一本书、看了一部电影，你想到了什么？深入的思考一下，总能找到可以写的东西。&lt;/p&gt;

&lt;p&gt;再一个就需要你在生活中积累了，例如我会将大脑中不成形的想法简单的记录下来，以供以后使用。这样做的好处是，当你翻开以前记录的东西时，你会发现你简直有写不完的东西！学会思考，你就不缺东西写。&lt;/p&gt;

&lt;p&gt;如果你写的是一个技术类博客的话，那就更简单了。把技术笔记写下来就可以来，这里的笔记不是指你阅读技术书籍时所写的笔记，它必须是加工过的，因为你是写出来给别人看的,你做笔记时可以随意涂画，想怎么写就怎么写，但是要给别人看明白，就需要有条理地叙述。或者你也可以写自己地研究成果，总之有价值就行。关于技术文章的写作，以后会写一篇具体地文章来说明。&lt;/p&gt;

&lt;h3 id=&#34;q3-博客地排版怎么办&#34;&gt;Q3:博客地排版怎么办？&lt;/h3&gt;

&lt;p&gt;如果你使用Markdown写作，那么排版就不是什么大问题。如果你用其他地来排版，也应该不是什么问题，个人建议写完一篇文章之后再排版修改，要不然写一点就停下来排版势必会打断思路，也主客颠倒了。&lt;/p&gt;

&lt;h3 id=&#34;q4-如何坚持写&#34;&gt;Q4:如何坚持写？&lt;/h3&gt;

&lt;p&gt;这应该是最困难的一个问题，很多的优秀博客已经消失了，都没能坚持下来。要做到坚持更新，我认为可以尝试一下几点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;制定写作计划&lt;/strong&gt;－－没有计划的写作可能会三分钟热度，可以制定一个每周（这是最短的周期了，一周能完成一篇价值博客已经很不错了）或每月的写作计划，翻看自己思考的记录，找一些可以写的东西，然后就开始写，一旦开了头，下面的工作就十分简单了。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;设定一个Deadline&lt;/strong&gt;－－例如每周日之前必须完成这周要写的内容，当然，如果你实在没什么可写的话，就不要写，记住，只写有价值的内容，写作不是为了完成任务。这种情况很少会发生，因为如果你积极思考的话，肯定会找到很多要写的东西。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;学会自我管理&lt;/strong&gt;－－这就涉及到时间管理层面上了，这方面的内容网络上也有很多，例如GTD，读者可以自行去寻找。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;q5-有什么建议吗&#34;&gt;Q5:有什么建议吗？&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;写完一篇博客不要立即就发表，先放下来，过几天再去看它，看有没有价值发表，是不是碎碎念？往往这时候会对所写的内容有更深的看法，这时候就可以进一步加工。很多时候我们翻看以前写的文章，是不是感觉很幼稚？人总是在不断的成长。&lt;/li&gt;
&lt;li&gt;多读，多写。广泛地涉猎各个领域地书籍，平时要多阅读，这里地阅读可以是书籍、价值博客等（不是微博、每日资讯）。书籍和博客地半衰期往往很长，有的十几年前地博客文章，现在拿出来还是很好地阅读内容。当然，书籍就更不用说了。微博和新闻类地内容更新周期短，半衰期短，其实读不读都无所谓，那些新闻资讯，除了一些大事，其他的都是没有必要每天花时间阅读的，如果要读，可以每周或每月集中阅读一次，为了使这些信息有价值，别忘了做笔记。&lt;/li&gt;
&lt;li&gt;多思考。如果想要获得源源不绝的灵感，就请多思考。关于思考的方法，如果要详细讲的话，可以写很多。这里推荐一个简单的高效思考方法：利用零碎时间来思考。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;q6-有什么推荐的博客吗&#34;&gt;Q6:有什么推荐的博客吗？&lt;/h4&gt;

&lt;p&gt;下面的都是我平常经常阅读的博客，建议订阅RSS：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://mindhacks.cn/&#34;&gt;刘未鹏 | MIND HACKS&lt;/a&gt;－－思维改变生活，篇篇是干货，值得反复阅读。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ruanyifeng.com/blog/&#34;&gt;阮一峰的网络日志&lt;/a&gt;－－作者的博客内容很多很杂，但每一篇都是作者思考后的成果，值得阅读。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yangzhiping.com/&#34;&gt;杨志平的网志&lt;/a&gt;－－篇篇干货，对心理学和Ruby有研究。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;怎样才能找到这些优秀的博客呢？一个较好的方法是，从它们博客的友链中寻找，虽然并不一定准确，但也八九不离十。多用RSS聚合软件。我一般在网上遇到了较好的文章都会发送到Pocket中，不仅可以利用空闲时间阅读，也可以作为存档。&lt;/p&gt;

&lt;h2 id=&#34;后记&#34;&gt;后记&lt;/h2&gt;

&lt;p&gt;这片文章很早就准备写了，先前在Evernote中写了几点，现在的这篇是从那几点中发散出来的结果。所以不要怕没有写，开了头，后面的路就比较顺了。&lt;/p&gt;

&lt;p&gt;自己文笔有限，难免有些造句措辞使用不当，就当是笑话看看好了。&lt;/p&gt;

&lt;p&gt;以前的博客都在丢失了（空间到期为续费），现在转到这个新的环境重新开始，这样也好，以前的博客里也有很多碎碎念，现在可以推倒重来了。&lt;/p&gt;

&lt;p&gt;如果你也是一个爱思考，并且有分享精神的人，我建议你现在就去写一个博客。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
