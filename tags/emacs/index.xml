<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emacs on Lifelong Hacker</title>
    <link>http://blog.jiayuanzhang.com/tags/emacs/</link>
    <description>Recent content in emacs on Lifelong Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 14 Jul 2019 00:31:00 +0800</lastBuildDate>
    
        <atom:link href="http://blog.jiayuanzhang.com/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 Emacs &#43; ox-hugo 来写博客</title>
      <link>http://blog.jiayuanzhang.com/post/blog-with-ox-hugo/</link>
      <pubDate>Sun, 14 Jul 2019 00:31:00 +0800</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/blog-with-ox-hugo/</guid>
      <description>

&lt;p&gt;最近开始重新使用 org-mode，在这之前大概有一年左右的时间，慢慢把一些东西从
org-mode 转移到别的工具上了，比如利用 OmniFocus 来管理任务，用 Devonthink 来管理笔记，用 Ulysses 来写作。虽然这些工具非常好用，但是总能找到一两个不满意的点，为此还写了不少脚本进行优化（这些 App 均支持 AppleScript），既然都是要写代码才能完全满足使用需求，不如直接使用 Emacs 来做这些事好了（目前已经将任务管理系统又迁移到 org-mode 上来了）。&lt;/p&gt;

&lt;p&gt;从 &lt;a href=&#34;http://blog.jiayuanzhang.com/post/use-devonthink-to-write-blog/&#34;&gt;上篇文章&lt;/a&gt; 可以知道，我开始使用 Devonthink 来写博客，配合 Alfred 的 Workflow 可以方便地生成 Hugo 的博客文章，其实就是简单地将 Devonthink 中的 Metadata 生成
YAML 格式的内容插入到 Markdown 文件中。&lt;/p&gt;

&lt;p&gt;如果你只使用 Markdown 来写作的话，这种写博客的流程是非常好的，配合一个 Markdown
编辑器（推荐 iA Writer），Devonthink 可以方便的作为管理博客文章的前端，另外再配合我写的 Alfred 全局搜索（支持拼音） Workflow，可以快速地找到所写的内容。&lt;/p&gt;

&lt;p&gt;但是，比起 Markdown，我更喜欢用 org-mode 来写东西。所以，我需要对上面这些流程做一些 Hack，其实也非常简单：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;在 Devonthink 中建立 org 格式的文件（在 Devonthink 显示为 plain-text）；&lt;/li&gt;
&lt;li&gt;调用 Emacs 来打开这个文件（Open with Emacs，或者可以写一个脚本用 Alfred 来调用打开）；&lt;/li&gt;
&lt;li&gt;在 Emacs 中使用 org-mode 来完成写作；&lt;/li&gt;
&lt;li&gt;修改之前的 Alfred Workflow，检测到是 &lt;code&gt;.org&lt;/code&gt; 格式的文件就用 Pandoc 转换为 Markdown；&lt;/li&gt;
&lt;li&gt;利用 Hugo 生成博客内容。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;既然都使用 Emacs 来写了，不如直接舍弃 Devonthink 这个前端（Emacs 同样支持拼音搜索等功能），搜索了一下，发现了 ox-hugo 这个 Emacs package，这个 package 的优点在于：不需要舍弃掉之前用 Markdown 写的文章，可以在这个基础上继续用 org-mode 来写，即使之后想放弃 ox-hugo 了，也可以继续修改生成的 Markdown 文件。&lt;/p&gt;

&lt;p&gt;这篇文章我主要介绍一下如何使用 ox-hugo 来写博客，顺便介绍一下我的博客工作流，如果你是使用 Emacs 自带的 org-publish 而不是 Hugo 等外部静态网站生成工具的话，可以参考我几年前写的一篇文章：&lt;a href=&#34;http://blog.jiayuanzhang.com/post/how-to-use-emacs-and-org-mode-to-build-a-blog/&#34;&gt;使用 Emacs Org-mode + GitHub Pages 来写博客 -
Jiayuan&amp;rsquo;s Blog&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;主要用到的工具：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Emacs + org-mode：写作 &amp;amp; 管理工具&lt;/li&gt;
&lt;li&gt;Alfred：脚本快速执行工具&lt;/li&gt;
&lt;li&gt;PicGo：图床工具&lt;/li&gt;
&lt;/ul&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190606165847.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;安装与配置-ox-hugo&#34;&gt;安装与配置 ox-hugo&lt;/h2&gt;

&lt;p&gt;我使用的 Emacs 配置是 &lt;a href=&#34;https://github.com/hlissner/doom-emacs/tree/develop/&#34;&gt;Doom Emacs&lt;/a&gt;，我在 &lt;a href=&#34;https://www.bilibili.com/video/av54257764&#34;&gt;Hacking log #001 编写 Doom Emacs
private module&lt;/a&gt; 这个视频里有详细讲解如何使用 Doom Emacs 来安装第三方的 Package 以及如何编写自己的 module。这里我们把 ox-hugo 添加到自己的 &lt;code&gt;my-org&lt;/code&gt; module 中，非
Doom Emacs 的用户可以参考官方文档来进行配置：&lt;a href=&#34;https://ox-hugo.scripter.co/&#34;&gt;ox-hugo - Org to Hugo exporter&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;首先在 &lt;code&gt;my-org/packages.el&lt;/code&gt; 中添加 ox-hugo：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; packages.el&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ox-hugo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后修改 &lt;code&gt;my-org/configle.&lt;/code&gt; ，使用 Doom Emacs 自定义的 &lt;code&gt;def-package!&lt;/code&gt; macro，其他用户可以使用 &lt;code&gt;use-package&lt;/code&gt; 或者直接使用 &lt;code&gt;require&lt;/code&gt; 来进行导入。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;; config.el&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;def-package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ox-hugo&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;:after&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;ox&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;开始写作&#34;&gt;开始写作&lt;/h2&gt;

&lt;p&gt;ox-hugo 支持两种方式来管理 org 格式的博客文章，一种是所有的文章都放在同一个 org
文件里，另一种是对不同的文章使用独立的 org 文件。因为最终都是导出 Markdown 格式的文件，所以这两种方法本质上并没有什么区别。&lt;/p&gt;

&lt;p&gt;这里推荐对于非长篇类的文章可以使用同一个 org 文件进行管理，这种方法可以方便地使用 org-mode 提供的 Tag 继承功能；针对于长篇的文章，可以直接使用单独的 org 文件。&lt;/p&gt;

&lt;p&gt;这边简单介绍一下如何使用单个的 org 文件来管理博客文章，首先需要两个全局的
Property： &lt;code&gt;HUGO_SECTION&lt;/code&gt; 和 &lt;code&gt;HUGO_BASE_DIR&lt;/code&gt; ，&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;HUGO_SECTION&lt;/code&gt;: 这个是指定导出的内容在 content 目录所在的路径，例如我的博客文章的 Markdown 文件是放在 &lt;code&gt;/content/post&lt;/code&gt; 下的，那么这边的值就是 &lt;code&gt;post&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;HUGO_BASE_DIR&lt;/code&gt;: 博客的根目录，例如我的 Hugo 博客是在 &lt;code&gt;~/Dropbox/blog&lt;/code&gt; 下，那么这边的值就是 &lt;code&gt;~/Dorpbox/blog&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他一些设定可以参考我的 &lt;a href=&#34;https://raw.githubusercontent.com/forrestchang/blog-raw/master/content-org/post.org?token=AB36HZWPBHGMFX4PTQUDJB247MWO4&#34;&gt;org raw file&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;ox-hugo 使用 org-mode 中的 Tag 来标记文章的 Category 和 Tags，使用 &lt;code&gt;@&lt;/code&gt; 开头的
Tag 为 Category，其他的为普通的 Tags，利用 org-mode 的特性，我们可以方便地继承上级的 Tag，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-org&#34; data-lang=&#34;org&#34;&gt;&lt;span class=&#34;gh&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;gs&#34;&gt; Programming&lt;/span&gt;&lt;span class=&#34;ge&#34;&gt; :@Programming:&lt;/span&gt;
&lt;span class=&#34;gu&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; TODO&lt;/span&gt; New post
&lt;span class=&#34;c&#34;&gt;:PROPERTIES:
&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cs&#34;&gt;:EXPORT_FILE_NAME: new-post
&lt;/span&gt;&lt;span class=&#34;cs&#34;&gt;&lt;/span&gt;&lt;span class=&#34;c&#34;&gt;:END:&lt;/span&gt;
This is a test post.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中 &lt;code&gt;Programming&lt;/code&gt; 下的文章都会被分类到 &lt;code&gt;Programming&lt;/code&gt; Category 中去。&lt;/p&gt;

&lt;p&gt;一篇文章有两个状态： &lt;code&gt;TODO&lt;/code&gt; 和 &lt;code&gt;DONE&lt;/code&gt; ，TODO 代表的是未发布的文章，在生成的
Markdown 元数据中 &lt;code&gt;draft=true&lt;/code&gt; ，DONE 代表已完成的文章，DONE Date 会被作为发表的时间戳。TODO 和 DONE 的关键字是可以自己指定的，具体可以参考官方文档：&lt;a href=&#34;https://ox-hugo.scripter.co/doc/org-meta-data-to-hugo-front-matter/&#34;&gt;Org
meta-data to Hugo front-matter — ox-hugo - Org to Hugo exporter&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;另一个比较重要的参数是 &lt;code&gt;EXPORT_FILE_NAME&lt;/code&gt; ，这个参数控制了导出时的文件名，例如上面这个例子中导出后就为 &lt;code&gt;new-post.md&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;ox-hugo 的导出方式也非常简单，使用 &lt;code&gt;C-c C-e&lt;/code&gt; 就可以呼出导出菜单，然后选择 &lt;code&gt;H H&lt;/code&gt;
就会把当前文章导出到 Hugo 的目录下。&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190608114908.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;开启自动-export&#34;&gt;开启自动 Export&lt;/h2&gt;

&lt;p&gt;ox-hugo 的官方文档中介绍了一种自动 Export 的方式，只要保存了 org 格式的文章，就可以直接导出 Hugo 中。&lt;/p&gt;

&lt;p&gt;首先需要在配置中 load org-hugo-auto-export-mode：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;def-package!&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-hugo-auto-export-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后在 Hugo 的根目录下建立 &lt;code&gt;.dir-locals.el&lt;/code&gt; 文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-elisp&#34; data-lang=&#34;elisp&#34;&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;content-org/&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-mode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;eval&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;org-hugo-auto-export-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))))))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Reload 一下 Emacs 的配置就可以自动 Export 了，配合 &lt;code&gt;hugo serve -D&lt;/code&gt; 命令，可以做到实时预览。&lt;/p&gt;

&lt;figure&gt;
    &lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190608115739.png&#34;/&gt; 
&lt;/figure&gt;


&lt;h2 id=&#34;使用-picgo-plus-github-来搭建图床&#34;&gt;使用 PicGo + GitHub 来搭建图床&lt;/h2&gt;

&lt;p&gt;博客的写作中难免会用到一些图片素材，目前我使用 PicGo + GitHub 来作为博客的图床，除了 GitHub 之外，PicGo 还支持很多其他图床。&lt;/p&gt;

&lt;p&gt;使用起来也非常简单：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;调用截图工具截图（图片自动保存到剪贴板中）&lt;/li&gt;
&lt;li&gt;调用快捷键使用 PicGo 上传图片到 GitHub（可以在 PicGo 中自定义）&lt;/li&gt;
&lt;li&gt;自动生成 org link 格式的图片链接地址到剪贴板中&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;具体的配置方法可以参照下面两个链接：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PicGo: &lt;a href=&#34;https://github.com/Molunerfinn/PicGo&#34;&gt;https://github.com/Molunerfinn/PicGo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GitHub 图床的配置方法：&lt;a href=&#34;https://picgo.github.io/PicGo-Doc/zh/guide/config.html&#34;&gt;https://picgo.github.io/PicGo-Doc/zh/guide/config.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;快速获取-chrome-超链接&#34;&gt;快速获取 Chrome 超链接&lt;/h2&gt;

&lt;p&gt;写文章的时候需要一些参考链接，这个可以借助 AppleScript 和 Alfred 来完成。&lt;/p&gt;

&lt;p&gt;实现方式非常简单，使用 AppleScript 获取当前 Chrome 的链接和 title，并组合成对应格式的链接地址（markdown 或者 org-mode）放到剪贴板中，然后使用 Alfred 来调用。&lt;/p&gt;

&lt;p&gt;生成 org-mode link 的代码可以参考我写的这个：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-applescript&#34; data-lang=&#34;applescript&#34;&gt;&lt;span class=&#34;k&#34;&gt;tell&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;application&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Google Chrome&amp;#34;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tab_link&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;URL&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;active&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tab_title&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;active&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;tab&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;of&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org_link&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;to&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;[[&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tab_link&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;]&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;[&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;tab_title&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;]]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;set the clipboard to&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org_link&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;display&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;notification&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org_link&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;title&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;成功复制当前标签页链接到剪贴板&amp;#34;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;tell&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>2017 Week 19 Review</title>
      <link>http://blog.jiayuanzhang.com/post/2017-week-19-review/</link>
      <pubDate>Sun, 07 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/2017-week-19-review/</guid>
      <description>&lt;p&gt;之前有在博客上写 Weekly Review 的习惯，后来因为被朋友说博客真水然后都撤下来了，有些文章确实是类似于「流水账」的记事，但也有一些是围绕这周做的东西来讨论的。总的来说，写 Weekly Review 对自己帮助还是很大的，可以在一周中 Focus 一个特定的主题，而不是想到什么做什么，所以这个系列以后还会继续写下去，只是写的内容更加具体一天，可以围绕着这周的 Project，或者这周听的音乐，或者读的书之类的。以前的文章看情况要不要放上来。&lt;/p&gt;

&lt;p&gt;这周算是正式把我的任务管理系统从 org-mode 转移到 Todoist 上来了。在不考虑时间成本和易用性上来说，org-mode 依然是目前我认为最完备的任务和时间管理系统，我用它来：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;任务管理：类似于 OmniFocus 的多层级任务管理，支持标签和优先级，可以自定义过滤视图&lt;/li&gt;
&lt;li&gt;时间记录：按照项目的方式来记录时间，基本是在做哪件事之前把计时器打开，一个番茄时间后自动关闭，可以自定义生成各种时间报表&lt;/li&gt;
&lt;li&gt;番茄工作法&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;http://omaacpco9.bkt.clouddn.com/2017-05-07-092455.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;自定义生成的时间记录表：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://omaacpco9.bkt.clouddn.com/2017-05-07-092544.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;虽然 org-mode 的优点众多，但是始终是一个基于 Emacs 的 major mode，所以诸多限制在所难免：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;没有一个简单易用的移动端&lt;/li&gt;
&lt;li&gt;没办法做到全局 capture，虽然借助 Alfred 的 Workflow 和 Elisp 脚本能够实现这一功能，但是使用起来体验并不是很好&lt;/li&gt;
&lt;li&gt;编辑功能过重，很显然，做任务管理不需要多么高效的编辑操作，类似于 OmniFocus 使用鼠标 + 快捷键才是更高效的方法，在 Emacs 里经常编辑速度过快把整个文件搞乱了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不用 OmniFocus 的原因是本来就是从 OmniFocus 转到 org-mode 上来的，OmniFocus 有一个很致命的缺点就是不支持多标签，并且 Perspective 提供的设置选项也很有限，根不能不能满足一些复杂的过滤要求。除此之外，OmniFocus 应该是最优秀的任务管理软件了。&lt;/p&gt;

&lt;p&gt;Todoist 初次使用的时候感觉很难用，尤其是鼠标点击就进入编辑模式，这个设计真的不知道怎么想的，并且各平台的客户端一点也不 Native，基本就是 Web 版套了一个壳。macOS 客户端经常有一些莫名的 bug，反正软件的使用体验上来说和 OmniFocus 简直不能比。&lt;/p&gt;

&lt;p&gt;经过一段时间的调教，现在基本还能满足日常使用了。我认为一个可靠的任务管理系统需要满足两点：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;能够随时把想法和任务记录进去&lt;/li&gt;
&lt;li&gt;能够按照特定的要求过滤出任务&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;其他的一些东西其实都是为了服务这两点的，比如说标签系统，其实就是在过滤任务的时候多加了一个维度。Todoist 的过滤系统比 OmniFocus 好很多，但是和 org-mode 这种可以完全自定义的过滤系统相比还是差点，不过也完全够用。&lt;/p&gt;

&lt;p&gt;具体要写 Todoist 怎么用可能一篇文章也写不完（或许以后会写），另外 Todoist 还刚使用，有些东西还需要熟悉一下，下一篇文章会介绍一下目前我在用的一些过滤器。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>2016 Week 52 Review</title>
      <link>http://blog.jiayuanzhang.com/post/2016-week-52-review/</link>
      <pubDate>Mon, 26 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/2016-week-52-review/</guid>
      <description>&lt;p&gt;2016 年最后一周（实际上还有6天，不过那一周就算到 2017 年第一周吧）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;编程&lt;/strong&gt;：这周在看《Python 网络数据采集》，以前虽然也用过爬虫，但是毕竟没有系统地学过，所以还是找了一本书来看。但是说实话，这本书写得并不是很好，不知道是写书时间的原因还是什么，挺多语法错误的，而且代码的风格很差（完全不符合 PEP8 标准）。内容也比较浅，基本上都是之前已经知道了的东西，所以收获也不是很多，（下一篇的博客可以来写一写怎么写一个高效的爬虫）。面试的事情作废了，1）看了一下他们做的产品，感觉不是自己想要做的东西；2）开出的薪资太低，up to 2k（其实主要是薪资太低了，每天要往返金石滩和大连市，太累了）。所以还是好好学习准备明年的暑期实习吧。另外 GSoC 也应该放上日程了，即使有申请不上的可能，还是要试一试的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;阅读&lt;/strong&gt;：开始读金庸的《射雕英雄传》，以前上学的时候一直被家里教导不要沉迷武侠小说，所以一直没有读过金庸和古龙（然而那些时间都用来看网文玄幻了……）。最近读来还是觉得很有意思，作为实训的时候消遣很不错（主要没有网）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;生活&lt;/strong&gt;：这周五就可以离开这鬼地方了，见识过外包公司的情况后决定以后肯定是不会进这种公司的。在公司里实训也一直没有写代码，本来打算用 Python 实现一下实训的题目的，但是老师说不允许，这也没什么办法，索性就划水吧。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;博客&lt;/strong&gt;：可以看到，我博客又换样子了。用 Emacs 来写博客还是太麻烦了一些，而且 render 的速度实在是太感人，本地的 org 文件多了之后好几次 render 的时候卡住。现在这个博客是 Mweb 自带的 generator 生成的，就是主题不怎么好看，其他的都很方便。奈何自己的前端知识太渣，改了半天也没有改成自己想要的样子，所以还是凑合着先用吧。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>2016 Week 39 Review</title>
      <link>http://blog.jiayuanzhang.com/post/2016-week-39-review/</link>
      <pubDate>Sun, 25 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/2016-week-39-review/</guid>
      <description>

&lt;h2 id=&#34;编程&#34;&gt;编程&lt;/h2&gt;

&lt;p&gt;总的来说，好像这一周并没有做出什么东西来。本来是在看《Web Scraping with Python》这本书的，可以看到后面发现错误挺多的，都有一些最基本的语法错误，所以索性就直接不看了。然后知乎专栏的爬虫也一直没有开始写。&lt;/p&gt;

&lt;p&gt;从前几周就开始使用 VS Code 了，比想象中的好用很多，上一次使用还是刚出的时候，很多东西都不完善，现在 1.0 版本有了很大的改进，作为主力编辑器应该是没有什么问题了。Atom 的启动速度还是那么慢，什么时候改进一些什么时候再说吧。Emacs 已经好久没有用了，应该没有什么特殊情况不会去用了吧，写 Lisp 和 Haskell VS Code 或许也能够胜任。&lt;/p&gt;

&lt;p&gt;最近最烦心的一件事情就是不知道以后要从事什么方向的程序员了。目前自己的技术栈并不是很丰富，杂七杂八的东西研究了很多，赚钱的技能没学多少……所以还是有必要挑一个搬砖的技能好好磨练一下了。目前初步的计划是 Python Web 开发，然后顺带把 C 语言再看看然后去读 Python 的源码，再看一些经典的书（UNIX 系列）。&lt;/p&gt;

&lt;h3 id=&#34;下周的计划&#34;&gt;下周的计划&lt;/h3&gt;

&lt;p&gt;把《Flask Web Development: Developing Web Applications with Python》这本书看完，然后把书中的博客例子做出来。&lt;/p&gt;

&lt;p&gt;顺便写代码累了的时候可以刷刷《程序员修炼之道》这本书，以前看过其中的一部分，还是比较有意思的。&lt;/p&gt;

&lt;h2 id=&#34;日语&#34;&gt;日语&lt;/h2&gt;

&lt;p&gt;12月份就要考试了，然而我还没怎么开始学习。大概在 YouTube 上看了几节五十音的视频，其实五十音之前也都学过，平假名基本上还是熟悉的，就是片假名记不住-_-|||&lt;/p&gt;

&lt;h3 id=&#34;下周的计划-1&#34;&gt;下周的计划&lt;/h3&gt;

&lt;p&gt;熟练掌握五十音，包括平假名和片假名的书写、发音。先把 YouTube 上那一个系列的视频看完吧，然后直接拿单词卡片来背，Anki 中也有单词本可以用来复习。&lt;/p&gt;

&lt;h2 id=&#34;游戏&#34;&gt;游戏&lt;/h2&gt;

&lt;p&gt;这周没怎么玩游戏，守望先锋已经一周多没有玩了。&lt;/p&gt;

&lt;p&gt;平时的时候玩 「Pokemon Omega Ruby」比较多，也就是孵孵蛋，打打对战塔，刚入对战坑，好多东西还不懂，还需要学习一个。&lt;/p&gt;

&lt;p&gt;开始入门狼人杀，这周的几次聚会玩狼人杀很嗨，在某宝上买了一套卡牌，准备研究研究。&lt;/p&gt;

&lt;h2 id=&#34;阅读&#34;&gt;阅读&lt;/h2&gt;

&lt;p&gt;看了一点《胡适留学日记》，拖到现在还没有看完，Kindle 好像来学校之后就有点吃灰了。&lt;/p&gt;

&lt;h3 id=&#34;下周的计划-2&#34;&gt;下周的计划&lt;/h3&gt;

&lt;p&gt;看完《胡适留学日记》。&lt;/p&gt;

&lt;h2 id=&#34;电影&#34;&gt;电影&lt;/h2&gt;

&lt;p&gt;这周看了三部韩国的电影，分别是《隧道》、《釜山行》、《恐怖直播》，发现韩国的电影好好看！韩国的电影感觉黑色幽默和讽刺多一些，日本的电影中二气息比较多一些，国产的电影嘛……&lt;/p&gt;

&lt;p&gt;相比较最近比较火的《釜山行》，个人还是感觉《隧道》比较好看一些。亚洲地区的丧尸片估计《釜山行》应该是最佳了，但是和欧美的一些丧尸片比起来，还是有差距的，其中的一些套路也都是别人玩过了的。《隧道》这部电影让我感觉和《活埋》很像，但是一个生还了，一个 gg 了……&lt;/p&gt;

&lt;h2 id=&#34;杂项&#34;&gt;杂项&lt;/h2&gt;

&lt;p&gt;这周好像聚会比较多(≧▽≦)，已经吃了好几顿饭+去了一次 KTV，生活过得比较颓废。&lt;/p&gt;

&lt;p&gt;是时候应该沉迷学习了(╯﹏╰）&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用Emacs Org-mode &#43; GitHub Pages 来写博客</title>
      <link>http://blog.jiayuanzhang.com/post/how-to-use-emacs-and-org-mode-to-build-a-blog/</link>
      <pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/how-to-use-emacs-and-org-mode-to-build-a-blog/</guid>
      <description>

&lt;p&gt;这个博客就是使用Emacs org-mode + GitHub Pages搭建的，博客的主题是org-mode官网的主题，非常的简洁；评论采用的disqus，访问统计使用的是Google和Baidu的统计代码。&lt;/p&gt;

&lt;p&gt;另外，本文中进行操作的环境是在OSX下完成的，Windows用户请自行参考脑补:)&lt;/p&gt;

&lt;h2 id=&#34;起因&#34;&gt;起因&lt;/h2&gt;

&lt;p&gt;之前也折腾过好多的博客，Jekyll、Hexo、Farbox等，这些静态博客生成器都有一个共同点，都是采用的Markdown语法来进行书写的，而自己平时记笔记都是使用的Emacs org-mode，这样就导致了记笔记和写博客两个过程分裂开来了。&lt;/p&gt;

&lt;p&gt;昨晚偶然看到&lt;a href=&#34;http://dirlt.com/&#34;&gt;dirtysalt&amp;rsquo;s homepage&lt;/a&gt;，被深深的震撼了，博主写了很多的干货，专注与博客的内容而不是博客的外观。而自己也是一个极简主义者，觉得这样的博客样式还是挺好看的（很有Web1.0时代的复古风啊）。恰巧博主也是使用的Emacs来写博客，于是便花了一个上午的时间搜集相关的资料并把博客搭建起来了。&lt;/p&gt;

&lt;h2 id=&#34;准备&#34;&gt;准备&lt;/h2&gt;

&lt;h3 id=&#34;github帐号与github-pages&#34;&gt;GitHub帐号与GitHub Pages&lt;/h3&gt;

&lt;p&gt;首先你需要一个存放博客的地方，这里采用的是GitHub，当让也可以使用其他的服务，只要支持静态页面展示即可。&lt;/p&gt;

&lt;p&gt;GitHub的注册过程省略。&lt;/p&gt;

&lt;p&gt;注册完GitHub帐号之后建立一个新的仓库，命名为 &lt;code&gt;xxx.github.io&lt;/code&gt; ，其中 &lt;code&gt;xxx&lt;/code&gt; 为你的用户名。&lt;/p&gt;

&lt;h3 id=&#34;emacs环境&#34;&gt;Emacs环境&lt;/h3&gt;

&lt;p&gt;我使用的是最近比较火的&lt;a href=&#34;https://github.com/syl20bnr/spacemacs&#34;&gt;spacemacs&lt;/a&gt; ，很多功能都配置好了，基本上手即用。&lt;/p&gt;

&lt;p&gt;如果不是用的spacemacs，确保你的Emacs版本为24，org-mode版本为8.0以上，不排除可能因为版本的原因出现各种各样的错误。&lt;/p&gt;

&lt;p&gt;什么，你还不知道Emacs是什么，那先去下载一个Emacs吧，使用org-mode基本不需要什么Emacs的基础，只需要记住几个快捷键就可以了。&lt;/p&gt;

&lt;h2 id=&#34;建立目录结构&#34;&gt;建立目录结构&lt;/h2&gt;

&lt;p&gt;随便在哪里建一个心得目录，这个目录就是存放你的org文件和html文件的地方。假设我们已经有了这么一个目录 &lt;code&gt;org&lt;/code&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ mkdir notes
$ mkdir public_html
$ mkdir gtd&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;当然，那个gtd目录你可以不要，那是用来做时间管理的，如果你不想用Emacs做时间管理的话，可以不用建那个目录。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;notes: 这个目录就是用来存放元数据的地方，你的org文件、图片、CSS文件、PDF等全都是存放在这里的。&lt;/li&gt;
&lt;li&gt;public_html: 这个目录是用来存放导出的HTML文件的，那些非org格式的文件还会原封不动地拷贝过来。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;配置emacs&#34;&gt;配置Emacs&lt;/h2&gt;

&lt;p&gt;这一步有一些复杂，没有Elisp基础的同学可能看不怎么懂，不过没关系，照着做就是了，现在看不懂可以以后学嘛。&lt;/p&gt;

&lt;p&gt;Emacs org-mode自带了很强大的导出功能，可以导出成HTML、markdown、PDF等格式的文件，我们这里使用自带的导出Project的功能，只不过在导出之前，要做一些配置，告诉Emacs要导出哪些东西，导出到哪里，采用什么规则。&lt;/p&gt;

&lt;p&gt;首先我们在配置文件中添加以下代码（普通的在.emacs中添加，spacemacs用户在.spacemacs中添加）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;ox-publish&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;setq&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-publish-project-alist&lt;/span&gt;
        &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;

          &lt;span class=&#34;c1&#34;&gt;;; 把各部分的配置文件写到这里面来&lt;/span&gt;

          &lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后把其他的配置文件依次添加进来就可以了，主要有生成HTML的部分和原样拷贝的部分。&lt;/p&gt;

&lt;p&gt;下面来配置需要转换成HTML的内容：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;  (&amp;#34;blog-notes&amp;#34;
   :base-directory &amp;#34;~/org/notes&amp;#34;
   :base-extension &amp;#34;org&amp;#34;
   :publishing-directory &amp;#34;~/org/public_html/&amp;#34;
   :recursive t
   :publishing-function org-html-publish-to-html
   :headline-levels 4             ; Just the default for this project.
   :auto-preamble t
   :section-numbers nil
   :author &amp;#34;Yourname&amp;#34;
   :email &amp;#34;example@test.com&amp;#34;
   :auto-sitemap t                ; Generate sitemap.org automagically...
   :sitemap-filename &amp;#34;sitemap.org&amp;#34;  ; ... call it sitemap.org (it&amp;#39;s the default)...
   :sitemap-title &amp;#34;Sitemap&amp;#34;         ; ... with title &amp;#39;Sitemap&amp;#39;.
   :sitemap-sort-files anti-chronologically
   :sitemap-file-entry-format &amp;#34;%d %t&amp;#34;
   )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;:base-directory - 你存放笔记的目录（想将哪里的org文件导出成HTML）&lt;/li&gt;
&lt;li&gt;:base-extension - 导出的文件格式&lt;/li&gt;
&lt;li&gt;:publishing-directory - 导出HTML的目标目录&lt;/li&gt;
&lt;li&gt;:recursive - 设置为t会将子目录中的文件也导出&lt;/li&gt;
&lt;li&gt;:publishing-function - 使用哪个函数来进行publish（注：org 7与8在这个地方有区别）&lt;/li&gt;
&lt;li&gt;:auto-sitemap - 自动生存sitemap&lt;/li&gt;
&lt;li&gt;:sitemap-sort-files - 我这里采用的是按照从新到旧的排列方式&lt;/li&gt;
&lt;li&gt;:sitemap-file-entry-format - 这里采用时间+标题的方式生成sitemap&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;并不是所有的文件都需要转化为HTML的，比如说一些图片、PDF、CSS样式等，只需要原样拷贝到目标文件就行，配置代码如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;blog-static&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:base-directory&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/org/notes&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:base-extension&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:publishing-directory&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;~/org/public_html/&amp;#34;&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:recursive&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;
   &lt;span class=&#34;ss&#34;&gt;:publishing-function&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;org-publish-attachment&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;把这两段代码查到刚刚给的框架里面去即可。&lt;/p&gt;

&lt;p&gt;最后，我们再加一段代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;blog&amp;#34;&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;:components&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;blog-notes&amp;#34;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;blog-static&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;至此，基本的配置已经完成了，现在可以写一些org文件来生成HTML了。&lt;/p&gt;

&lt;p&gt;比如说我已经写完了一些org文件：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;.
├── blog-history.org
├── css
│   └── worg.css
├── cv.org
├── front-end-development
│   ├── css.org
│   └── html.org
├── how-to-use-org-mode-build-blog.org
├── index.org
├── personal
│   ├── how-to-study-efficiently.org
│   └── index.org
└── sitemap.org&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后使用&lt;code&gt;M-x org-publish-project&lt;/code&gt;，输入&lt;code&gt;blog&lt;/code&gt;，就会自动开始生成HTML文件了，现在已经可以在public_html文件夹中访问了。&lt;/p&gt;

&lt;p&gt;当然，index页面是需要自己来写的，可以参照我的主页来写，或者自由发挥。&lt;/p&gt;

&lt;h2 id=&#34;个性化定制&#34;&gt;个性化定制&lt;/h2&gt;

&lt;h3 id=&#34;添加css文件&#34;&gt;添加CSS文件&lt;/h3&gt;

&lt;p&gt;首先需要在notes文件夹内新建一个css文件夹，里面保存需要用到的CSS文件，这里我使用的是org-mode官网上用的CSS文件，非常的简洁。&lt;/p&gt;

&lt;p&gt;然后我们需要在 &lt;code&gt;blog-notes&lt;/code&gt; 这个配置中新增一条属性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt; &lt;span class=&#34;ss&#34;&gt;:html-head&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;link rel=\&amp;#34;stylesheet\&amp;#34; type=\&amp;#34;text/css\&amp;#34; href=\&amp;#34;/css/worg.css\&amp;#34;/&amp;gt;&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样子的话再每次生成HTML的时候都会自动加上CSS，这里建议使用绝对路径来访问css文件，要不然在notes文件夹中新建文件夹的时候就无效了。&lt;/p&gt;

&lt;h3 id=&#34;添加评论功能&#34;&gt;添加评论功能&lt;/h3&gt;

&lt;p&gt;这里使用的Disqus的评论系统，使用Duoshuo的话配置过程应该也一样。&lt;/p&gt;

&lt;p&gt;首先在Disqus中注册一个服务，获得一段代码，在 &lt;code&gt;blog-notes&lt;/code&gt; 中新增加一条属性：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;  &lt;span class=&#34;ss&#34;&gt;:html-postamble&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;p class=\&amp;#34;postamble\&amp;#34;&amp;gt;Last Updated %C. Created by %a&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;div id=\&amp;#34;disqus_thread\&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;script type=\&amp;#34;text/javascript\&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  var disqus_shortname = &amp;#39;yourshortname&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  (function() {
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           var dsq = document.createElement(&amp;#39;script&amp;#39;); dsq.type = &amp;#39;text/javascript&amp;#39;; dsq.async = true;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           dsq.src = &amp;#39;//&amp;#39; + disqus_shortname + &amp;#39;.disqus.com/embed.js&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           (document.getElementsByTagName(&amp;#39;head&amp;#39;)[0] || document.getElementsByTagName(&amp;#39;body&amp;#39;)[0]).appendChild(dsq);
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           })();
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;需要注意的是代码中的双引号前面需要加上反斜杠来转义。&lt;/p&gt;

&lt;h3 id=&#34;添加统计功能&#34;&gt;添加统计功能&lt;/h3&gt;

&lt;p&gt;使用百度和Google的统计服务，和添加评论功能类似，还是添加在这条属性里面：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-lisp&#34; data-lang=&#34;lisp&#34;&gt;    &lt;span class=&#34;ss&#34;&gt;:html-postamble&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;lt;p class=\&amp;#34;postamble\&amp;#34;&amp;gt;Last Updated %C. Created by %a&amp;lt;/p&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  var _hmt = _hmt || [];
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  (function() {
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           var hm = document.createElement(\&amp;#34;script\&amp;#34;);
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           hm.src = \&amp;#34;//hm.baidu.com/hm.js?yourkey\&amp;#34;;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           var s = document.getElementsByTagName(\&amp;#34;script\&amp;#34;)[0];
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           s.parentNode.insertBefore(hm, s);
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           })();
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;div id=\&amp;#34;disqus_thread\&amp;#34;&amp;gt;&amp;lt;/div&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;script type=\&amp;#34;text/javascript\&amp;#34;&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  var disqus_shortname = &amp;#39;yourshortname&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  (function() {
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           var dsq = document.createElement(&amp;#39;script&amp;#39;); dsq.type = &amp;#39;text/javascript&amp;#39;; dsq.async = true;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           dsq.src = &amp;#39;//&amp;#39; + disqus_shortname + &amp;#39;.disqus.com/embed.js&amp;#39;;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           (document.getElementsByTagName(&amp;#39;head&amp;#39;)[0] || document.getElementsByTagName(&amp;#39;body&amp;#39;)[0]).appendChild(dsq);
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           })();
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  (function(i,s,o,g,r,a,m){i[&amp;#39;GoogleAnalyticsObject&amp;#39;]=r;i[r]=i[r]||function(){
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;           })(window,document,&amp;#39;script&amp;#39;,&amp;#39;//www.google-analytics.com/analytics.js&amp;#39;,&amp;#39;ga&amp;#39;);
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  ga(&amp;#39;create&amp;#39;, &amp;#39;yourkey&amp;#39;, &amp;#39;auto&amp;#39;);
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  ga(&amp;#39;send&amp;#39;, &amp;#39;pageview&amp;#39;);
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;lt;/script&amp;gt;
&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;  &amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;同样注意双引号的转义问题即可。&lt;/p&gt;

&lt;h2 id=&#34;托管到github上&#34;&gt;托管到GitHub上&lt;/h2&gt;

&lt;p&gt;生成了HTML文件之后需要把public_html目录托管到GitHub上：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;$ git add .
$ git commit -m &amp;#34;first commit&amp;#34;
$ git remote add origin xxx
$ git push -u origin master&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;其中&lt;code&gt;xxx&lt;/code&gt;为你之前创建仓库的SSH路径。以后每次generate之后add、commit、push就可以了。&lt;/p&gt;

&lt;p&gt;现在访问 &lt;code&gt;xxx.github.io&lt;/code&gt; 已经可以看到你的博客啦：）&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
