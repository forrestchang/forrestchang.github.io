<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>computer-science on Lifelong Hacker</title>
    <link>http://blog.jiayuanzhang.com/tags/computer-science/</link>
    <description>Recent content in computer-science on Lifelong Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 03 Feb 2016 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://blog.jiayuanzhang.com/tags/computer-science/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>学院派编程自学指南</title>
      <link>http://blog.jiayuanzhang.com/post/self-learning-programer-manual-college-part/</link>
      <pubDate>Wed, 03 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/self-learning-programer-manual-college-part/</guid>
      <description>

&lt;p&gt;由于本人目前也处在学习的阶段，文章中列出来的内容也并未全部学习过，所以文章的客观性可能存在一些问题，还望读者自行判断。&lt;/p&gt;

&lt;p&gt;这份指南会不定期更新，有好的建议也可以留言或者给我发邮件。&lt;/p&gt;

&lt;h1 id=&#34;准备&#34;&gt;准备&lt;/h1&gt;

&lt;p&gt;需要的所有工具就是一台可以连接上网络的电脑以及你本人。&lt;/p&gt;

&lt;h2 id=&#34;科学上网&#34;&gt;科学上网&lt;/h2&gt;

&lt;p&gt;很可惜，即使是现在，大部分学习计算机的学生还是不会科学上网。在当前的网络环境下，不会科学上网，意味着你不能用 Google 查资料，不能在 Hacker News 查看最新资讯，需要忍受龟速的 GitHub，云云。然而，科学上网本身却是一件成本非常低的事情，不想折腾的话，一年花个几百块钱买个现成的服务；有折腾精神的人，可以买个服务器自己假设架设上网工具。这一步很重要，不能跳过，否则后面指南中的许多内容都无法进行访问。&lt;/p&gt;

&lt;p&gt;关于科学上网的具体内容，就不再多说了，给你一个关键词：&lt;strong&gt;Lantern&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;学会使用-google-搜索&#34;&gt;学会使用 Google 搜索&lt;/h2&gt;

&lt;p&gt;学会了科学上网，你就能够使用 Google 了，为什么不是 Baidu？相信你用了 Google 之后就自然明白了。&lt;/p&gt;

&lt;p&gt;当了一个学期的助教之后发现，很多的同学其实是没有使用搜索引擎的意识的，遇到问题要么自己死磕，或者就直接求助于他人。这两种都不是很好的办法，正确的做法是&lt;strong&gt;在自己思考后没有结果，然后使用搜索引擎查找问题&lt;/strong&gt;，现阶段，你遇到的所有问题（几乎）都能在 Google 上找到现成的答案，如果没找到，肯定是你搜索的方式不正确。&lt;/p&gt;

&lt;p&gt;使用Google的基本搜索功能就能够解决大部分问题了，当然，如果想要学习更加高级的技巧，这里有一份指南：&lt;a href=&#34;https://www.zhihu.com/question/20161362&#34;&gt;如何用好Google等搜索引擎？&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&#34;英语&#34;&gt;英语&lt;/h2&gt;

&lt;p&gt;你不得不承认，目前为止，编程世界的主流语言还是英文，所以英语能力的好坏决定了你编程能力的上界。中文资料和英文资料相比，实在是太匮乏了，就质量而言，也相对较低。比如我后面提到的很多的课程，都是英文的内容。&lt;/p&gt;

&lt;p&gt;值得庆幸的是，阅读编程资料所需要的英文水平并不需要很高，就个人经验来说，基本上四级水平就足够了，可能还会存在一些生词，但是基本上并不妨碍理解。&lt;/p&gt;

&lt;p&gt;英文的学习应该一直贯穿于编程的学习之中，作为一门工具语言，只需要花少量时间就可以带来比较大的收益（2/8法则）。&lt;/p&gt;

&lt;p&gt;本人的英文水平也不算好，但是基本上能够阅读技术书籍和文档，能够听懂公开课，所以还是有一些简单的经验可以分享一下。&lt;/p&gt;

&lt;h3 id=&#34;把系统换成英文的&#34;&gt;把系统换成英文的&lt;/h3&gt;

&lt;p&gt;有些同学可能看到英文就头疼，这很正常，因为在中文的环境下面生活的太久了。为此，可以试着将平常用的系统换成英文的，虽说不能学到几个单词（Copy/Paste 之类的词），但是可以让你不那么排斥英文。&lt;/p&gt;

&lt;h3 id=&#34;安装电子词典&#34;&gt;安装电子词典&lt;/h3&gt;

&lt;p&gt;OS X下推荐欧路词典，在APP Store中购买完整版的，因为需要添加外部的词典。&lt;/p&gt;

&lt;p&gt;这里推荐一部比较好的词典：《Collins 英汉双解词典》，它是这个样子的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/forrestchang/img-repo/master/20190326142830.png&#34; alt=&#34;eudi&#34; /&gt;&lt;/p&gt;

&lt;p&gt;主要看它的英文解释，一个词看得次数多了也就记住了。&lt;/p&gt;

&lt;h3 id=&#34;每天阅读英文的资料&#34;&gt;每天阅读英文的资料&lt;/h3&gt;

&lt;p&gt;一些个人经常阅读的网站：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://quora.com/&#34;&gt;Quora&lt;/a&gt;：一个类似于知乎的问答类网站，可以挑自己感兴趣的内容来阅读。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/&#34;&gt;Hacker News&lt;/a&gt;：互联网资讯，业界发生的最新的事件都会在上面。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/programming/&#34;&gt;PROGRAMMING&lt;/a&gt;：Reddit 的 Programming 板块，和 Hacker News 类似，不过更加专注于技术内容方面。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;不要花太多时间在上面，每天浏览一下就行。&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;英文学习的总结&#34;&gt;英文学习的总结&lt;/h2&gt;

&lt;p&gt;英语不是能够速成的东西，也不是三言两语能够讲完的东西，这里只是提供一个简单的指导，具体的学习计划还请自行搜索更加专业的学习指南。&lt;/p&gt;

&lt;h1 id=&#34;编程基础&#34;&gt;编程基础&lt;/h1&gt;

&lt;p&gt;完成了这一部分内容的学习后你应该具备：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;了解什么是 Computer Science&lt;/li&gt;
&lt;li&gt;基本的计算机数学能力&lt;/li&gt;
&lt;li&gt;基本的程序开发能力&lt;/li&gt;
&lt;li&gt;基本的算法与数据结构的知识&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;计算机科学导论&#34;&gt;计算机科学导论&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-00sc-introduction-to-computer-science-and-programming-spring-2011/&#34;&gt;Introduction to Computer Science and Programming&lt;/a&gt;：面向&lt;strong&gt;无编程基础或者只有一点基础的人群&lt;/strong&gt;，使用&lt;strong&gt;Python&lt;/strong&gt;作为教学语言。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.extension.harvard.edu/open-learning-initiative/intensive-introduction-computer-science&#34;&gt;Intensive Introduction to Computer Science Open Learning Course&lt;/a&gt;：CS50，哈佛很火的一门课，在网易公开课上可以找到翻译的视频内容。涵盖的主题有算法（设计、应用、分析）；软件开发（抽象、封装、数据结构、Debug、测试）；计算机体系结构等等。基本上是一门大杂烩的导论课。使用的语言是&lt;strong&gt;C&lt;/strong&gt;、&lt;strong&gt;PHP&lt;/strong&gt;、&lt;strong&gt;JavaScript&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/view_play_list?p=FE6E58F856038C69&#34;&gt;Programming Abstractions&lt;/a&gt;：介绍了更加高级的编程主题（递归、算法分析、数据抽象等等），使用C++作为教学语言。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;数学&#34;&gt;数学&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-fall-2010/&#34;&gt;Mathematics for Computer Science&lt;/a&gt;：介绍了学习计算机所需要的一些数学知识，内容包括集合、关系、证明方法、数论、图论等等。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=h_9WjWENWV8&amp;amp;feature=share&amp;amp;list=PLTdIp1DywMlUpLHEg3ADhE6rrxhW_T5Rx&#34;&gt;Discrete Mathematics&lt;/a&gt;：离散数学。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;编程语言&#34;&gt;编程语言&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/course/programming1&#34;&gt;Learn to Program: The Fundamentals&lt;/a&gt;：面向&lt;strong&gt;无编程基础或者只有一点基础的人群&lt;/strong&gt;，使用&lt;strong&gt;Python&lt;/strong&gt;作为教学语言。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/course/programming2&#34;&gt;Learn to Program: Crafting Quality Code&lt;/a&gt;：如何编写高效与正确的代码。需要有&lt;a href=&#34;https://www.coursera.org/course/programming1&#34;&gt;Learn to Program: The Fundamentals&lt;/a&gt;的基础。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://cs61a.org/&#34;&gt;The Structure and Interpretation of Computer Programs&lt;/a&gt;：经典的 SICP 的 Python 版。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;计算理论&#34;&gt;计算理论&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL601FC994BDD963E4&#34;&gt;Introduction to the Theory of Computation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/course/principlescomputing1&#34;&gt;Principles of Computing (Part 1)&lt;/a&gt;：介绍了 CS 中基本的数学和编程理论，需要有&lt;strong&gt;Python&lt;/strong&gt;基础。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;算法与数据结构&#34;&gt;算法与数据结构&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-006-introduction-to-algorithms-fall-2011/&#34;&gt;Introduction to Algorithms&lt;/a&gt;：MIT的算法导论课，用《算法导论》作为教材，网上可以找到视频资源，网易公开课上有老版的翻译。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;核心课程&#34;&gt;核心课程&lt;/h1&gt;

&lt;p&gt;学完了「编程基础」部分的内容后，应该已经可以开发一些复杂的程序了，「核心课程」的内容将深入学习计算机科学理论的几个重要的内容。&lt;/p&gt;

&lt;h2 id=&#34;数学-1&#34;&gt;数学&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/course/matrix&#34;&gt;Coding the Matrix: Linear Algebra through Computer Science Applications&lt;/a&gt;：线性代数以及在计算机中的应用。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://inst.eecs.berkeley.edu/~cs70/sp16/&#34;&gt;Discrete Mathematics and Probability Theory&lt;/a&gt;：离散数学与概率论。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;计算理论-1&#34;&gt;计算理论&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLslgisHe5tBM8UTCt1f66oMkpmjCblzkt&#34;&gt;Theory of Computation - Fall 2011&lt;/a&gt;：介绍了机器模型、上下文无关文法、图灵机等，使用的教材是 Michael Sipser 的 &lt;a href=&#34;http://www.amazon.com/Introduction-Theory-Computation-Michael-Sipser/dp/113318779X&#34;&gt;Introduction to the Theory of Computation&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;算法与数据结构-1&#34;&gt;算法与数据结构&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www-inst.eecs.berkeley.edu/~cs61b/fa15/&#34;&gt;Data Structures and Advanced Programming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.berkeley.edu/~jrs/170/&#34;&gt;Efficient Algorithms and Intractable Problems&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;操作系统&#34;&gt;操作系统&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cs162.eecs.berkeley.edu/&#34;&gt;Operating Systems and Systems Programming&lt;/a&gt;：UCB 经典的操作系统课程，介绍了操作系统的基本概念、系统编程、网络、分布式系统、内存分配、多线程等等。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.edx.org/course/introduction-linux-linuxfoundationx-lfs101x-2#!&#34;&gt;Introduction to Linux&lt;/a&gt;：介绍了 Linux 以及一些简单的命令行使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;程序语言理论&#34;&gt;程序语言理论&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL9D558D49CA734A02&#34;&gt;Programming Paradigms&lt;/a&gt;：编程范式。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/course/compilers&#34;&gt;Compilers&lt;/a&gt;：Stanford 的编译原理课。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://freevideolectures.com/Course/2249/Principles-of-Programming-Languages/1&#34;&gt;Principles of Programming Languages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;计算机体系结构&#34;&gt;计算机体系结构&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PL5PHm2jkkXmgVhh8CHAu9N76TShJqfYDt&#34;&gt;Computer Architecture&lt;/a&gt;：CMU&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.coursera.org/course/comparch&#34;&gt;Computer Architecture&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;计算机网络&#34;&gt;计算机网络&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.cs.berkeley.edu/~istoica/classes/cs268/10/&#34;&gt;Computer Networks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCb1OiccPJ0wbMZMOleCvhWQ&#34;&gt;Fundamentals of Computer Networking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;编程工具&#34;&gt;编程工具&lt;/h1&gt;

&lt;h2 id=&#34;ide&#34;&gt;IDE&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Python: &lt;a href=&#34;https://www.jetbrains.com/pycharm/&#34;&gt;PyCharm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java:&lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C/C++: &lt;a href=&#34;https://www.visualstudio.com/en-us/visual-studio-homepage-vs.aspx&#34;&gt;Visual Studio&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;编辑器&#34;&gt;编辑器&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Emacs/Vim&lt;/li&gt;
&lt;li&gt;Sublime Text 3&lt;/li&gt;
&lt;li&gt;VS Code&lt;/li&gt;
&lt;li&gt;Atom&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;并不一定要用 Emacs 或者 Vim，Sublime Text 其实已经很强大了，足够做日常简单的编辑工作。（这里黑一下 Atom，启动速度太感人了，所以放在最后一个。）&lt;/p&gt;

&lt;h2 id=&#34;git-github&#34;&gt;Git &amp;amp; GitHub&lt;/h2&gt;

&lt;p&gt;使用版本控制来管理自己平时写的代码。&lt;/p&gt;

&lt;p&gt;推荐阅读：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/geeeeeeeeek/git-recipes/wiki&#34;&gt;git-recipes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://git-scm.com/book/zh/v2?f=tt&amp;amp;hmsr=toutiao.io&amp;amp;utm_medium=toutiao.io&amp;amp;utm_source=toutiao.io&#34;&gt;Pro Git 2nd Edition&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000&#34;&gt;Git教程 - 廖雪峰&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;如何克服拖延&#34;&gt;如何克服拖延&lt;/h1&gt;

&lt;p&gt;资料是有了，但是拖延症不去学怎么办？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.pomodorotechnique.com/&#34;&gt;番茄工作法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;参考资料&#34;&gt;参考资料&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/prakhar1989/awesome-courses&#34;&gt;https://github.com/prakhar1989/awesome-courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.agupieware.com/2014/05/online-learning-bachelors-level.html&#34;&gt;http://blog.agupieware.com/2014/05/online-learning-bachelors-level.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1_kdHrT8izbROJNaxGflpcZm2ivsjRGF8j1hMzl3b8O0/htmlview&#34;&gt;https://docs.google.com/spreadsheets/d/1_kdHrT8izbROJNaxGflpcZm2ivsjRGF8j1hMzl3b8O0/htmlview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/programming/wiki/faq&#34;&gt;https://www.reddit.com/r/programming/wiki/faq&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>
