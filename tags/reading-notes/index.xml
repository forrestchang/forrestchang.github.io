<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Reading Notes on Jiayuan&#39;s Blog</title>
    <link>http://blog.jiayuanzhang.com/tags/reading-notes/</link>
    <description>Recent content in Reading Notes on Jiayuan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 02 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.jiayuanzhang.com/tags/reading-notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>读《代码大全》</title>
      <link>http://blog.jiayuanzhang.com/post/notes-on-code-complete-part-1/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/notes-on-code-complete-part-1/</guid>
      <description>这本书最开始是大一的时候买的，买回来后翻了一些章节就成为了显示器的支架，直到最近工作了一段时间才重新开始读，这一次阅读和几年前初次阅读有很大不同，大一阅读时候的编码经验仅仅是局限于算法方面，对大型项目的构建没有特别多感触；这一次是在写了很多业务代码，积累了一定问题的基础上去阅读的，阅读的深度自然不是第一次阅读可以比较的。
和这本书类似的还有一本叫做 《程序员修炼之道——从小工到专家》（我也写过 笔记）。这本书讲了很多软件工程领域的行话和规则，比如熟悉的 DRY 原则，如果觉得《代码大全》比较厚（大概九百多页），也可以先读一下这本书。
《代码大全》并不是一本需要从头到尾依次阅读的书，章节和章节之间的联系也不是很大，完全可以随便挑选感兴趣的章节来阅读。这次阅读我主要遵从书上的建议，按照以下顺序来阅读：
 第 11 章：变量名的力量 第 8 章：防御式编程 第 7 章：高质量的子程序 第 18 章：表驱动法 第 4 章：关键的「构建」决策 第 33 章：个人性格 第 32 章：自说明代码 其他章节按照顺序或者兴趣度依次阅读  这个「读《代码大全》」系列的文章主要是记录一些阅读笔记。之前的阅读笔记比较喜欢把书上的内容抄下来，但是实际上发现，「抄书」可能抄完就忘了，因为「抄」其实很简单，不需要动脑，打字快的话也不会觉得很累。这次阅读笔记主要是「问题 - 回答」的模式来写，在阅读每章之前，先提出几个问题，然后在阅读的过程中解决问题。
第 11 章：变量名的力量 问题：
 怎样给一个变量命名？ 长名字还是短名字？ 命名的最佳实践有哪些？ 有哪些常见的命名方法？ 在命名中应该要避免的东西有哪些？  怎样给一个变量命名？  通常，对变量的描述就是最佳的变量名。
 书中举了几个简单的例子，例如表示美国奥林匹克代表团成员数量的变量 numberOfPeopleOnTheUsOlympicTeam，表示某国代表团在现代奥运会上获得的最高分数的变量 maximumNumberOfPointsInModernOlympics。这种变量命名的好处是一眼就能看出这个变量表示的是什么，它们都是非常明确的。而像 nums 和 maxPoints 就相对来说没有那么明确，至于 n 和 m 这样的命名就是非常差的描述，移除了上下文根本无法理解。
这种对变量描述的命名方法也有一个缺点：变量名太长了，这一点会之后讨论。
另外一个命名的方法是「以问题为导向（Problem Orientation）」。
 一个好名字通常表达的是「什么（what）」，而不是「如何（how）」。如果一个名字反映了计算的某些方面而不是问题本省，那么它反应的就是「how」，而不是「what」了，应该避免取这样的名字。 书中也举了几个例子，例如一条员工数据记录可以称作 inputRec 或者 employeeData，inputRec 是一个反映输入、记录这些计算概念的计算机术语，二 employeeData 则直指问题领域。</description>
    </item>
    
    <item>
      <title>《程序员修炼之道》阅读笔记（二）</title>
      <link>http://blog.jiayuanzhang.com/post/notes-on-the-pragmatic-programmer-part-2/</link>
      <pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/notes-on-the-pragmatic-programmer-part-2/</guid>
      <description>重复的危害 系统中的每一项知识都必须具有单一、无歧义、权威的表示。（感觉翻译得怪怪的）
 Tip 11 DRY - Don&amp;rsquo;t Repeat Yourself 不要重复你自己
 重复是怎样发生的  强加的重复（imposed duplication）：开发者觉得他们无可选择 —— 环境似乎要求重复。 无意的重复（inadvertent duplication）：开发者没有意识到他们在重复信息。 无耐性的重复（impatient duplication）：开发者偷懒，他们重复，因为那样似乎更容易。 开发者之间的重复（interdeveloper duplication）：同一团队（或不同团队）的几个人重复了同样的信息。  强加的重复  信息的多种表示
我们也许在编写客户-服务器应用，在客户和服务器端使用了不同的语言，并且需要在两端都表示某种共有的结构。我们或许需要一个类，其属性是某个数据库表的 schema。
解决办法是编写简单的过滤器或代码生成器。可以在每次构建（build）软件时，使用简单的代码生成器，根据公共的元数据表示构建多种语言下的结构。可以用最初用于构建 schema 的元数据，自动生成类定义。
 代码中的文档
代码为什么需要注释：糟糕的代码才需要许多注释。
DRY 法则告诉我们，要把低级的知识放在代码中，它属于那里；把注释保留给其他高级说明。否则，我们就是在重复知识，而每一次改变都意味着既要改变代码，也要改变注释。注释将不可避免地变得过时，而不可信任的注释比完全没有注释更糟。
 文档与代码
你撰写文档，然后编写代码。有些东西变了，你修订文档、更新代码。文档和代码都含有同一知识表示。
可以根据文档来生成测试。
 语言问题
许多语言会在源码中强加可观的重复。如果语言使模块的接口与其实现分离，就常常会出现这样的情况。C/C++ 有头文件，在其中重复了被导出变量、函数和（C++）类的名称和类型信息。
再思考一下头文件和实现文件中的注释。绝对没有理由在这两种文件之间重复函数或类头注释（head comment）。应该用头文件记载接口问题，用实现文件记载代码的使用者无需了解的实际细节。
  无意的重复 有时，重复来自设计中的错误。
举个例子：
class Line { public: Point start; Point end; double lenght; };  第一眼看上去这个类似乎是合理的。线段显然有起点和终点，并总是有长度的。但这里有重复，长度是由起点和终点决定的：改变其中一个，长度就会变化。最好是让长度编程计算字段：
class Line { public: Point start; Point end; double lenght() { return start.</description>
    </item>
    
    <item>
      <title>《程序员修炼之道》阅读笔记（一）</title>
      <link>http://blog.jiayuanzhang.com/post/notes-on-the-pragmatic-programmer-part-1/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/notes-on-the-pragmatic-programmer-part-1/</guid>
      <description>实习到现在差不多两个月了，博客也一直荒废了没写。这次更新就先来写写读书笔记好了。
这本书从书名来看其实很像那种鸡汤类的书，英文名「The Pragmatic Programmer」（注重实效的程序员）看上去就好了许多。豆瓣评分 8.6 分。大一的时候买的书，之前随意地写过几年的玩具代码，所以初读这本书的时候觉得很有道理，但是读完了之后发现什么也没有记住。用徐宥的话来说就是「读者如果没有类似的经历，看到这些珠玑，也只是觉得把玩颇为有趣而已，极少能有同感。」大一的时候读这是这种感觉。
出来实习之后，接触到实际生产中的代码，在代码量比较大的情况下（几十万行），之前书中所讲的一些问题都一一浮现了。为了写出优雅的代码，有必要把这本书再读一遍，可能以后还要反复读很多遍（不是所有的内容看一遍就能内化在心里的），所以每读一部分就记一点笔记，留作日后复习用。
给自己制定以下阅读的计划，因为这本书每一张的内容读起来都比较轻松，所以预计用两周的时间读完：
 每 1-2 天阅读一章（共 8 章） 每一章都写一篇笔记，读的时候可以做一些摘录，读完一章之后写一篇总结性的笔记；  下面是「序言」和「第一章」的笔记。
序 注重实效的程序员都有哪些特征  早期的采纳者/快速的改编者：给你一样新东西，你很快能把握它，并把它与你的知识的其余部分结合在一起（尝试新技术）； 好奇：你喜欢提问，你是收集小知识的林鼠（建立自己的知识 wiki）； 批判的思考者：你会首先抓住事实，而不是照搬别人所说的； 有现实感：你会设法理解你面临的每个问题的内在本质（事情有多困难，需要花多长时间完成？） 多才多艺：你尽力熟悉广泛的技术和环境；  （审视一下自己，上面几点好像都没有做到，或者说有的做到了但是并不到位。）
 Tip 1 Care About Your Craft 关心你的技艺
 如何做到上面所说的？在你做某件事情的时候思考你在做什么。
 Tip 2 Think! About Your Work 思考！你的工作
 它是一个持续的过程 每天为提炼你所拥有的技能而工作，为把新的工具增加到你的技能列表中二工作。草坪不是一天修成的。
第一章：注重实效的哲学 我的源码让猫给吃了  在所有的弱点中，最大的弱点就是害怕暴露弱点。—— J.B.Bossuet
 如果你确实同意要为某个结果负责，你就应该切实负起责任。当你犯错误的时候，不要责备别人或别的东西，或是拼凑借口。你可以选择提供解决方案，而不是寻找借口。
 Tip 3 Provide Options, Don&amp;rsquo;t Make Lame Excuses 提供各种选择，不要找蹩脚的借口
 在你走向任何人，告诉他们为何某件事做不到、为何耽搁、为何出现问题之前，先停下来，听一听你心里的声音。在你去告诉他们坏消息之前，是否还有其他你可以再试一试的办法？有时，你其实知道他们会说什么，所以还是不要给他们添麻烦。
（这一点深有感触，在实习的这一段时间里面，经常因为一些小事去麻烦 leader，比如说环境跑步起来，某个莫名其妙的报错等，这虽然有文档不全的原因在，不过自己也没想着去补全文档这种解决办法。）</description>
    </item>
    
  </channel>
</rss>