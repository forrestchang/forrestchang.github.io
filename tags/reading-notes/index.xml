<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>reading-notes on Lifelong Hacker</title>
    <link>http://blog.jiayuanzhang.com/tags/reading-notes/</link>
    <description>Recent content in reading-notes on Lifelong Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 02 May 2019 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://blog.jiayuanzhang.com/tags/reading-notes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>读《代码大全》</title>
      <link>http://blog.jiayuanzhang.com/post/notes-on-code-complete-part-1/</link>
      <pubDate>Thu, 02 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/notes-on-code-complete-part-1/</guid>
      <description>

&lt;p&gt;这本书最开始是大一的时候买的，买回来后翻了一些章节就成为了显示器的支架，直到最近工作了一段时间才重新开始读，这一次阅读和几年前初次阅读有很大不同，大一阅读时候的编码经验仅仅是局限于算法方面，对大型项目的构建没有特别多感触；这一次是在写了很多业务代码，积累了一定问题的基础上去阅读的，阅读的深度自然不是第一次阅读可以比较的。&lt;/p&gt;

&lt;p&gt;和这本书类似的还有一本叫做 &lt;a href=&#34;https://book.douban.com/subject/1152111/&#34;&gt;《程序员修炼之道——从小工到专家》&lt;/a&gt;（我也写过 &lt;a href=&#34;http://blog.jiayuanzhang.com/post/notes-on-the-pragmatic-programmer-part-1/&#34;&gt;笔记&lt;/a&gt;）。这本书讲了很多软件工程领域的行话和规则，比如熟悉的 &lt;a href=&#34;https://zh.wikipedia.org/wiki/%E4%B8%80%E6%AC%A1%E4%B8%94%E4%BB%85%E4%B8%80%E6%AC%A1&#34;&gt;DRY 原则&lt;/a&gt;，如果觉得《代码大全》比较厚（大概九百多页），也可以先读一下这本书。&lt;/p&gt;

&lt;p&gt;《代码大全》并不是一本需要从头到尾依次阅读的书，章节和章节之间的联系也不是很大，完全可以随便挑选感兴趣的章节来阅读。这次阅读我主要遵从书上的建议，按照以下顺序来阅读：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第 11 章：变量名的力量&lt;/li&gt;
&lt;li&gt;第 8 章：防御式编程&lt;/li&gt;
&lt;li&gt;第 7 章：高质量的子程序&lt;/li&gt;
&lt;li&gt;第 18 章：表驱动法&lt;/li&gt;
&lt;li&gt;第 4 章：关键的「构建」决策&lt;/li&gt;
&lt;li&gt;第 33 章：个人性格&lt;/li&gt;
&lt;li&gt;第 32 章：自说明代码&lt;/li&gt;
&lt;li&gt;其他章节按照顺序或者兴趣度依次阅读&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个「读《代码大全》」系列的文章主要是记录一些阅读笔记。之前的阅读笔记比较喜欢把书上的内容抄下来，但是实际上发现，「抄书」可能抄完就忘了，因为「抄」其实很简单，不需要动脑，打字快的话也不会觉得很累。这次阅读笔记主要是「问题 - 回答」的模式来写，在阅读每章之前，先提出几个问题，然后在阅读的过程中解决问题。&lt;/p&gt;

&lt;h2 id=&#34;第-11-章-变量名的力量&#34;&gt;第 11 章：变量名的力量&lt;/h2&gt;

&lt;p&gt;问题：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;怎样给一个变量命名？&lt;/li&gt;
&lt;li&gt;长名字还是短名字？&lt;/li&gt;
&lt;li&gt;命名的最佳实践有哪些？&lt;/li&gt;
&lt;li&gt;有哪些常见的命名方法？&lt;/li&gt;
&lt;li&gt;在命名中应该要避免的东西有哪些？&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;怎样给一个变量命名&#34;&gt;怎样给一个变量命名？&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;通常，对变量的描述就是最佳的变量名。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;书中举了几个简单的例子，例如表示美国奥林匹克代表团成员数量的变量 &lt;code&gt;numberOfPeopleOnTheUsOlympicTeam&lt;/code&gt;，表示某国代表团在现代奥运会上获得的最高分数的变量 &lt;code&gt;maximumNumberOfPointsInModernOlympics&lt;/code&gt;。这种变量命名的好处是一眼就能看出这个变量表示的是什么，它们都是非常明确的。而像 &lt;code&gt;nums&lt;/code&gt; 和 &lt;code&gt;maxPoints&lt;/code&gt; 就相对来说没有那么明确，至于 &lt;code&gt;n&lt;/code&gt; 和 &lt;code&gt;m&lt;/code&gt; 这样的命名就是非常差的描述，移除了上下文根本无法理解。&lt;/p&gt;

&lt;p&gt;这种对变量描述的命名方法也有一个缺点：变量名太长了，这一点会之后讨论。&lt;/p&gt;

&lt;p&gt;另外一个命名的方法是「以问题为导向（Problem Orientation）」。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;一个好名字通常表达的是「什么（what）」，而不是「如何（how）」。如果一个名字反映了计算的某些方面而不是问题本省，那么它反应的就是「how」，而不是「what」了，应该避免取这样的名字。
书中也举了几个例子，例如一条员工数据记录可以称作 &lt;code&gt;inputRec&lt;/code&gt; 或者 &lt;code&gt;employeeData&lt;/code&gt;，&lt;code&gt;inputRec&lt;/code&gt; 是一个反映输入、记录这些计算概念的计算机术语，二 &lt;code&gt;employeeData&lt;/code&gt; 则直指问题领域。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;变量命名中有很多的限定词，例如 &lt;code&gt;Total&lt;/code&gt;、&lt;code&gt;Sum&lt;/code&gt;、&lt;code&gt;Average&lt;/code&gt;、&lt;code&gt;Max&lt;/code&gt;、&lt;code&gt;Min&lt;/code&gt;、&lt;code&gt;Record&lt;/code&gt; 等。使用这样的限定词的时候，最好把这些限定词加到最后，这样做的好处有：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;避免歧义：&lt;code&gt;moneyTotal&lt;/code&gt; 和 &lt;code&gt;totalMoney&lt;/code&gt; 产生的歧义；&lt;/li&gt;
&lt;li&gt;一致性：&lt;code&gt;numberTotal&lt;/code&gt;、&lt;code&gt;moneyTotal&lt;/code&gt;、&lt;code&gt;costTotal&lt;/code&gt; 这样的命名具有一致性。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;使用好「对仗词」也可以很好得提升变量的可读性：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;begin/end&lt;/li&gt;
&lt;li&gt;first/last&lt;/li&gt;
&lt;li&gt;locked/unlocked&lt;/li&gt;
&lt;li&gt;min/max&lt;/li&gt;
&lt;li&gt;next/previous&lt;/li&gt;
&lt;li&gt;old/new&lt;/li&gt;
&lt;li&gt;opened/closed&lt;/li&gt;
&lt;li&gt;visible/invisible&lt;/li&gt;
&lt;li&gt;source/target&lt;/li&gt;
&lt;li&gt;source/destination&lt;/li&gt;
&lt;li&gt;up/down&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;个人经验：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;使用名词来命名变量名，可以是 &lt;code&gt;adj + noun&lt;/code&gt; 这种格式。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;长名字还是短名字&#34;&gt;长名字还是短名字？&lt;/h3&gt;

&lt;p&gt;上一个问题里所讲的「对变量的描述就是最佳的变量名」这种命名方法很有可能会导致变量名过长，例如 &lt;code&gt;maximumNumberOfPointsInMordernOlympics&lt;/code&gt;，虽然现代的编辑器和 IDE 都拥有非常智能的补全，这些长名字的输入也不是什么问题，但是无疑会让代码看起来过于臃肿。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Gorla 和 Benander 发现，当变量名的平均长度在 10 到 16 个字符的时候，调试程序所花费的力气是最小的（1990）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;例如上面的这个变量名可以简化为 &lt;code&gt;maxPointsInOlympics&lt;/code&gt; ，这样既保留了变量的原本意思（参考上下文的情况下），又缩短的变量名的长度。&lt;/p&gt;

&lt;p&gt;在编写变量名的时候还需要考虑作用域的问题，一般来说，小作用域里的变量名可以简短一些，因为只作用于几行代码，例如 Python 中的列表推导式（Python 3，Python 2 中的列表推导式不是块级作用域）：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;alist&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;do_something&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;elem&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;some_list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;甚至在不需要使用这个变量的时候可以把它忽略：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 生成一个随机数列表&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;random_numbers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;相反的，如果是一个全局作用域，变量名就需要取得独特一些，避免产生命名空间冲突。例如用户接口部分的雇员类可以命名为 &lt;code&gt;uiEmployee&lt;/code&gt;，数据库部分的雇员类可以命名为 &lt;code&gt;dbEmployee&lt;/code&gt;。&lt;/p&gt;

&lt;h3 id=&#34;命名的最佳实践有哪些&#34;&gt;命名的最佳实践有哪些？&lt;/h3&gt;

&lt;p&gt;程序中常见的变量类型有「循环变量」、「状态变量」、「临时变量」、「布尔变量」、「枚举变量」和「具名常量」，这一部分会针对这些不同的变量（常量）类型讨论最佳实践。&lt;/p&gt;

&lt;h4 id=&#34;循环变量&#34;&gt;循环变量&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;（不推荐）简单的循环可以使用 &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;j&lt;/code&gt;, &lt;code&gt;k&lt;/code&gt; 来命名；&lt;/li&gt;
&lt;li&gt;复杂的循环或者循环变量需要在循环外使用的应该使用富有含义的命名。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;例如，我需要便利一个用户列表信息来对每个用户的信息做处理：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_info&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;user_infos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;do_something&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;user_info&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;要注意的事，在 Python 中，&lt;code&gt;for&lt;/code&gt; 循环是不存在子作用域的，所以在循环外访问 &lt;code&gt;user_info&lt;/code&gt; 会获取 &lt;code&gt;user_infos&lt;/code&gt; 中的最后一个值。&lt;/p&gt;

&lt;p&gt;个人经验：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;便利下标可以使用 &lt;code&gt;idx&lt;/code&gt; 或者 &lt;code&gt;index&lt;/code&gt; 作为结尾，例如 &lt;code&gt;user_info_idx&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;状态变量&#34;&gt;状态变量&lt;/h4&gt;

&lt;p&gt;状态变量一般用来描述程序的状态。最常用的状态变量名就是 &lt;code&gt;flag&lt;/code&gt;，但是这种命名方法缺少具体的含义，不推荐。&lt;/p&gt;

&lt;p&gt;最好的命名方法是名字中不含有 &lt;code&gt;flag&lt;/code&gt;，并且能够精准地表述状态。例如用来描述是否符合某一条件的变量名：&lt;code&gt;matched&lt;/code&gt;，它是一个布尔值。&lt;/p&gt;

&lt;p&gt;如果某个状态含有多个值，可以使用枚举值来代替。&lt;/p&gt;

&lt;h4 id=&#34;临时变量&#34;&gt;临时变量&lt;/h4&gt;

&lt;p&gt;临时变量用于存储计算的中间结果，它常被命名为 &lt;code&gt;temp&lt;/code&gt;, &lt;code&gt;x&lt;/code&gt; 等模糊且缺乏描述性的名字。&lt;/p&gt;

&lt;p&gt;虽然临时变量是「临时」使用的，但是也不应该随意给它们命名，赋予一个更有意义的名字会让程序更加可读。&lt;/p&gt;

&lt;p&gt;例如下面一段计算二元一次方程的代码：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;math&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sqrt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;**&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;answer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;answer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;temp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;虽然上面这段代码没有什么逻辑问题，但是 &lt;code&gt;temp&lt;/code&gt; 这个变量并不能很好的表述计算的中间结果，如果把 &lt;code&gt;temp&lt;/code&gt; 改为 &lt;code&gt;discriminant&lt;/code&gt;（判别式） 会更好。&lt;/p&gt;

&lt;h4 id=&#34;布尔变量&#34;&gt;布尔变量&lt;/h4&gt;

&lt;p&gt;一些常用的布尔变量：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;done：表示某件事已经完成。在完成之前把 done 的值设为 false；&lt;/li&gt;
&lt;li&gt;error：表示有错误发生。在错误发生之前把 error 的值设为 false；&lt;/li&gt;
&lt;li&gt;found：表示某个值已经找到了。在未找到之前把 found 的值设为 false；&lt;/li&gt;
&lt;li&gt;success/ok：表示某一项操作是否成功。在操作失败的情况下把它的值设为 false。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最佳实践：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;给布尔变量赋于隐含「真/假」含义的名字；&lt;/li&gt;
&lt;li&gt;使用肯定的布尔变量名。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;个人经验：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;可以在布尔变量之前添加 &lt;code&gt;is&lt;/code&gt; 前缀来区分，例如 &lt;code&gt;is_done&lt;/code&gt;，这样做法的唯一缺点是写在条件判断中不是那么清晰，&lt;code&gt;if (done)&lt;/code&gt; 要比 &lt;code&gt;if (is_done)&lt;/code&gt; 更加清晰一些。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;枚举变量&#34;&gt;枚举变量&lt;/h4&gt;

&lt;p&gt;在使用枚举类型的时候，可以通过使用组前缀，如 &lt;code&gt;Color_&lt;/code&gt;, &lt;code&gt;Planet_&lt;/code&gt; 等来明确表示该类型的成员属于同一个组。&lt;/p&gt;

&lt;h4 id=&#34;常量&#34;&gt;常量&lt;/h4&gt;

&lt;p&gt;常量应该始终大写，并使用有意义的值，避免在程序中使用魔法变量。&lt;/p&gt;

&lt;h3 id=&#34;有哪些常见的命名方法&#34;&gt;有哪些常见的命名方法？&lt;/h3&gt;

&lt;p&gt;命名规范首先应该参考项目的规范或者所编写的语言规范，例如 Java 通常使用的是驼峰命名法，Python 使用的是下划线命名法。&lt;/p&gt;

&lt;h4 id=&#34;驼峰命名法-camelcase&#34;&gt;驼峰命名法（CamelCase）&lt;/h4&gt;

&lt;p&gt;驼峰命名法来源于 Perl 语言中普遍使用的大小写混合命名，而 Larry Wall 所著的《Programming Perl》的封面就是一匹骆驼。&lt;/p&gt;

&lt;p&gt;一般来说，变量名、函数使用小驼峰命名法（lowerCamelCase）；类使用大驼峰命名法（UpperCamelCase）。&lt;/p&gt;

&lt;p&gt;驼峰命名法常在 Java、JavaScript 等语言中被使用。&lt;/p&gt;

&lt;h4 id=&#34;下划线命名法-underline-case&#34;&gt;下划线命名法（underline_case）&lt;/h4&gt;

&lt;p&gt;下划线命名法使用下划线 &lt;code&gt;_&lt;/code&gt; 来分隔多个单词。这种命名方式通常在 Python 等语言中被使用。它的缺点是会使含有多个单词的变量名的长度增加。&lt;/p&gt;

&lt;h4 id=&#34;匈牙利命名法&#34;&gt;匈牙利命名法&lt;/h4&gt;

&lt;p&gt;在匈牙利命名法中，一个变量由一个或多个小些字母开始，这些字母有助于记忆变量的类型和用途，紧跟着的就是程序员选择的任何名称。这个后半部分的首字母可以大写，以区别前面的类型指示字母。&lt;/p&gt;

&lt;p&gt;匈牙利命名法被广泛用在 Microsoft Windows 系统的开发中。但是目前这种命名方式已经被很少使用，不推荐。&lt;/p&gt;

&lt;h3 id=&#34;在命名中应该要避免的东西有哪些&#34;&gt;在命名中应该要避免的东西有哪些？&lt;/h3&gt;

&lt;p&gt;（这是《代码大全》中列出的指导原则。）&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;避免使用令人误解的名字和缩写。要确保名字的含义是明确的。例如 FALSE 常用做 TRUE 的反义词，如果它用做「Fig and Almond Season」的缩写就很糟糕了；&lt;/li&gt;
&lt;li&gt;避免使用具有相似含义的名字。如果你能够交换两个变量的名字而不会妨碍对程序的理解，那么你就需要为这两个变量重新命名了。&lt;/li&gt;
&lt;li&gt;避免使用具有不同含义但却有相似名字的变量。如果你有两个名字相似但含义不同的变量，那么试着给其中之一重新命名。&lt;/li&gt;
&lt;li&gt;避免使用发音相近的名字。例如 wrap 和 rap，当你试图和别人讨论代码的时候，同音字会产生麻烦。&lt;/li&gt;
&lt;li&gt;避免在名字中使用数字。如果名字中的数字真的非常重要，可以使用数组来代替一组单个的变量。&lt;/li&gt;
&lt;li&gt;避免在名字中拼错单词。（后期要修改非常麻烦。）&lt;/li&gt;
&lt;li&gt;避免使用英语中常常拼错的单词。很多英语手册会包含一份常常拼错单词的清单，避免在你的变量名中使用这些单词。&lt;/li&gt;
&lt;li&gt;不要仅靠大小写来区分变量名。（大写仅作为常量命名。）&lt;/li&gt;
&lt;li&gt;避免使用多种自然语言。（统一使用标准现代英语，避免使用 emoji、中文和其他语言。）&lt;/li&gt;
&lt;li&gt;避免使用标准类型、变量和子程序的名字。所有的编程语言指南都会包含一份该语言保留的和预定的名字列表，不要使用列表上的名字作为变量名。&lt;/li&gt;
&lt;li&gt;不要使用与变量含义完全无关的名字。&lt;/li&gt;
&lt;li&gt;避免在名字中包含容易混淆的字符。要意识到有些字符看上去非常接近，很难把它们区分开来。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;变量的命名是程序开发中非常小的一个环节，但是却能够发展出这么多的理论，原因之一就是「程序首先是给人阅读的，其次才是给机器执行的」。良好的命名方法可以让代码更加易于维护，也可以让别人更好地理解你的代码。&lt;/p&gt;

&lt;p&gt;变量的命名规范首先应当符合团队或者项目制定的编码规范，如果没有制定规范或者是个人项目，可以沿用社区的编码规范。下面列出一些常见语言的编码规范：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python: &lt;a href=&#34;https://github.com/google/styleguide/blob/gh-pages/pyguide.md&#34;&gt;styleguide/pyguide.md at gh-pages · google/styleguide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Java: &lt;a href=&#34;https://github.com/alibaba/p3c&#34;&gt;alibaba/p3c: Alibaba Java Coding Guidelines pmd implements and IDE plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;JavaScript: &lt;a href=&#34;https://github.com/airbnb/javascript&#34;&gt;airbnb/javascript: JavaScript Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;C/C++: &lt;a href=&#34;https://google.github.io/styleguide/cppguide.html&#34;&gt;Google C++ Style Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Golang: &lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments&#34;&gt;CodeReviewComments · golang/go Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;编码规范也不能够完全依靠文档来约束，集成到 IDE 或者 CI 中是更好的方式。各种语言都提供了各种 format 工具，例如 Python 的 &lt;a href=&#34;https://github.com/google/yapf&#34;&gt;yapf&lt;/a&gt;，Golang 的 &lt;a href=&#34;https://golang.org/cmd/gofmt/&#34;&gt;gofmt&lt;/a&gt; 等。&lt;/p&gt;

&lt;p&gt;IDE 和代码编辑器也提供了很好的格式化代码的功能，例如 Jebbrains 的 IDE 就可以通过导入 XML 格式的文件来进行配置格式化代码的风格。&lt;/p&gt;

&lt;h2 id=&#34;参考文献&#34;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&#34;&gt;Don&amp;rsquo;t repeat yourself - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Camel_case&#34;&gt;Camel case - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Hungarian_notation&#34;&gt;Hungarian notation - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670&#34;&gt;Code Complete: A Practical Handbook of Software Construction, Second Edition: Steve McConnell: 0790145196705: Amazon.com: Books&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>读《程序员修炼之道》（二）</title>
      <link>http://blog.jiayuanzhang.com/post/notes-on-the-pragmatic-programmer-part-2/</link>
      <pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/notes-on-the-pragmatic-programmer-part-2/</guid>
      <description>

&lt;h3 id=&#34;重复的危害&#34;&gt;重复的危害&lt;/h3&gt;

&lt;p&gt;系统中的每一项知识都必须具有单一、无歧义、权威的表示。（感觉翻译得怪怪的）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 11
DRY - Don&amp;rsquo;t Repeat Yourself
不要重复你自己&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;重复是怎样发生的&#34;&gt;重复是怎样发生的&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;强加的重复（imposed duplication）：开发者觉得他们无可选择 —— 环境似乎要求重复。&lt;/li&gt;
&lt;li&gt;无意的重复（inadvertent duplication）：开发者没有意识到他们在重复信息。&lt;/li&gt;
&lt;li&gt;无耐性的重复（impatient duplication）：开发者偷懒，他们重复，因为那样似乎更容易。&lt;/li&gt;
&lt;li&gt;开发者之间的重复（interdeveloper duplication）：同一团队（或不同团队）的几个人重复了同样的信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;强加的重复&#34;&gt;强加的重复&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;信息的多种表示&lt;/p&gt;

&lt;p&gt;我们也许在编写客户-服务器应用，在客户和服务器端使用了不同的语言，并且需要在两端都表示某种共有的结构。我们或许需要一个类，其属性是某个数据库表的 schema。&lt;/p&gt;

&lt;p&gt;解决办法是编写简单的过滤器或代码生成器。可以在每次构建（build）软件时，使用简单的代码生成器，根据公共的元数据表示构建多种语言下的结构。可以用最初用于构建 schema 的元数据，自动生成类定义。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;代码中的文档&lt;/p&gt;

&lt;p&gt;代码为什么需要注释：糟糕的代码才需要许多注释。&lt;/p&gt;

&lt;p&gt;DRY 法则告诉我们，要把低级的知识放在代码中，它属于那里；把注释保留给其他高级说明。否则，我们就是在重复知识，而每一次改变都意味着既要改变代码，也要改变注释。注释将不可避免地变得过时，而不可信任的注释比完全没有注释更糟。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;文档与代码&lt;/p&gt;

&lt;p&gt;你撰写文档，然后编写代码。有些东西变了，你修订文档、更新代码。文档和代码都含有同一知识表示。&lt;/p&gt;

&lt;p&gt;可以根据文档来生成测试。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;语言问题&lt;/p&gt;

&lt;p&gt;许多语言会在源码中强加可观的重复。如果语言使模块的接口与其实现分离，就常常会出现这样的情况。C/C++ 有头文件，在其中重复了被导出变量、函数和（C++）类的名称和类型信息。&lt;/p&gt;

&lt;p&gt;再思考一下头文件和实现文件中的注释。绝对没有理由在这两种文件之间重复函数或类头注释（head comment）。应该用头文件记载接口问题，用实现文件记载代码的使用者无需了解的实际细节。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&#34;无意的重复&#34;&gt;无意的重复&lt;/h5&gt;

&lt;p&gt;有时，重复来自设计中的错误。&lt;/p&gt;

&lt;p&gt;举个例子：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lenght&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;第一眼看上去这个类似乎是合理的。线段显然有起点和终点，并总是有长度的。但这里有重复，长度是由起点和终点决定的：改变其中一个，长度就会变化。最好是让长度编程计算字段：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;6
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c++&#34; data-lang=&#34;c++&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;err&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;Line&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;n&#34;&gt;Point&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
		&lt;span class=&#34;kt&#34;&gt;double&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lenght&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;distanceTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h5 id=&#34;无耐性的重复&#34;&gt;无耐性的重复&lt;/h5&gt;

&lt;p&gt;每个项目都有时间压力。&lt;/p&gt;

&lt;p&gt;如果你觉得受到了诱惑，想一想古老的格言「欲速则不达」。你现在也许可以节省几秒钟（感觉不止），但以后可能损失几小时。（如果一个人不打算在公司长久待下去的话是会写出重复的代码的，所以 code review 要做好）&lt;/p&gt;

&lt;p&gt;无耐性的重复是一种容易检测和处理的重复形式，但那需要你接受训练，并愿意为避免以后的痛苦而预先话一些时间。&lt;/p&gt;

&lt;h5 id=&#34;开发者之间的重复&#34;&gt;开发者之间的重复&lt;/h5&gt;

&lt;p&gt;或许最难检测和处理的重复发生在项目的不同开发者之间。处理这个问题的最佳方式是鼓励开发者进行主动地交流。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 12
Make It Easy to Reuse
让复用变得容易&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;你所要做的就是营造一种环境，在其中找到并复用已有的东西，比自己编写更容易。&lt;/p&gt;

&lt;h3 id=&#34;正交性&#34;&gt;正交性&lt;/h3&gt;

&lt;p&gt;如果你想要制作易于设计、构建、测试及扩展的系统，正交性是一个十分关键的概念。&lt;/p&gt;

&lt;h4 id=&#34;什么是正交性&#34;&gt;什么是正交性&lt;/h4&gt;

&lt;p&gt;「正交性」是从几何学中借来的术语。如果两条直线相交成直角，它们就是正交的。&lt;/p&gt;

&lt;p&gt;在计算机技术中，该术语用于表示某种不相依赖性和解耦性。如果两个或更多事物中的一个发生变化，不会影响到其他事物，这些事物就是正交的。&lt;/p&gt;

&lt;h4 id=&#34;正交的好处&#34;&gt;正交的好处&lt;/h4&gt;

&lt;p&gt;非正交系统的改变与控制更复杂是其固有的性质。当任何系统的各组件互相高度依赖时，就不在具有局部修正这样的事情。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 13
Eliminate Effects Between Unrelated Things
消除无关事物之间的影响&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们想要设计自足（self-contained）的组件：独立、具有单一、良好定义的目的（内聚）。如果组件是相互隔离的，你就知道你能够改变其中之一，而不用担心其余组件。只要你不改变组件的外部接口。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;提高生产率

&lt;ul&gt;
&lt;li&gt;改动得以局部化，所以开发实践和测试时间得以降低。编写多个相对较小的、自足的组件更为容易，你可以设计、编写简单的组间，对其进行单元测试。当你增加新代码时，无需不断改动已有的代码。&lt;/li&gt;
&lt;li&gt;正交的途径还能够促进复用。如果组间具有明确而具体的、良好定义的责任，就可以把它们和新组件整合到一起。&lt;/li&gt;
&lt;li&gt;如果你对正交的组件进行组合，生产效率会有相当微妙的提高（M x N &amp;gt; M * (N - i), i 为 M、N 重复内容）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;降低风险

&lt;ul&gt;
&lt;li&gt;有问题的代码区域被隔离开来。&lt;/li&gt;
&lt;li&gt;所得的系统更健壮。&lt;/li&gt;
&lt;li&gt;政教系统很可能得到更好的测试。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;项目团队&#34;&gt;项目团队&lt;/h4&gt;

&lt;p&gt;怎样把团队划分为责任得到了良好定义的小组，并使重叠降至最低呢？没有简单的答案。我们的偏好是从使基础设施与应用分离开始。每个主要的基础设施组间（数据库、通信接口、中间件层等）有自己的子团队。如果应用功能的划分显而易见，那就照此划分。然后我们考察现有的人员，并对分组进行相应的调整。&lt;/p&gt;

&lt;p&gt;在讨论每个所需改动时需要涉及多少人。人数越多，团队的正交性就越差。&lt;/p&gt;

&lt;h4 id=&#34;设计&#34;&gt;设计&lt;/h4&gt;

&lt;p&gt;对于正交设计，有一种简单的测试方法。一旦设计好组件，问问你自己：如果我显著地改变了某个特定功能背后的需求，有多少模块会受到影响？在正交系统中，大难应该是「一个」。&lt;/p&gt;

&lt;p&gt;不要依赖你无法控制的事物属性。&lt;/p&gt;

&lt;h4 id=&#34;工具箱与库&#34;&gt;工具箱与库&lt;/h4&gt;

&lt;p&gt;在你引入第三方工具箱和库时，要注意保持系统的正交性。要明智地选择技术。它是否会迫使你对代码进行不必要的改动。如果对象持久模型（object persistence scheme）是透明的，那么它就是正交的。如果它要求你以一种特殊的方式创建或访问对象，那么它就不是正交的。&lt;/p&gt;

&lt;p&gt;正交性的另一个有趣的变体是面向切片编程（Aspect-Oriented Programming, AOP）。AOP 能让你在一个地方表达本来会分散在源码各处的某种行为。例如，日志消息通常是在源码各处、通过显式地调用某个日志函数生成的。通过 AOP，你可以把日志功能正交地实现到要进行日志记录的代码中。（Python 中的装饰器就可以实现这个功能）&lt;/p&gt;

&lt;h4 id=&#34;编码&#34;&gt;编码&lt;/h4&gt;

&lt;p&gt;你可以将若干技术用于维持正交性：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;让你的代码保持「解耦」：编写不会没有必要地向其他模块暴露任何事情、也不依赖其他模块具体实现的模块。&lt;/li&gt;
&lt;li&gt;避免使用全局数据&lt;/li&gt;
&lt;li&gt;避免编写相似的函数：使用 Strategy（策略）模式&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;养成不断地批判对待自己打的代码的习惯，寻找任何重新进行组织、以改善其结构和正交性的机会。这个过程叫重构（refactoring）。&lt;/p&gt;

&lt;h4 id=&#34;测试&#34;&gt;测试&lt;/h4&gt;

&lt;p&gt;正交地设计和实现的系统也更易于测试，因为系统的各组件间的交互是形式化和有限的，更多的系统测试可以在单个的模块进行。&lt;/p&gt;

&lt;h3 id=&#34;可撤销性&#34;&gt;可撤销性&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;如果某个想法是你唯一的想法，再没有什么比这更危险的事了。 —— Emil-Auguste Chartier&lt;/p&gt;

&lt;p&gt;Tip 14
There Are No Final Decisions
不存在最终决策&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通常，你可以把第三方产品隐藏在定义良好的抽象接口后面。&lt;/p&gt;

&lt;h3 id=&#34;曳光弹&#34;&gt;曳光弹&lt;/h3&gt;

&lt;p&gt;为了在代码中获得「曳光弹」的效果，我们要找到某种东西，让我们能快速、直观和可重复地从需求出发，满足最终系统的某个方面要求。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 15
Use Tracer Bullets to Find the Target
用曳光弹找到目标&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;曳光弹告诉你击中的是什么，那不一定总是目标，于是你调整准心，直到完全击中目标为止，这正是要点所在。&lt;/p&gt;

&lt;h3 id=&#34;原型与便笺&#34;&gt;原型与便笺&lt;/h3&gt;

&lt;p&gt;你可以为下列事物制作原型：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;架构&lt;/li&gt;
&lt;li&gt;已有系统中的新功能&lt;/li&gt;
&lt;li&gt;外部数据的结构或内容&lt;/li&gt;
&lt;li&gt;第三方工具或组件&lt;/li&gt;
&lt;li&gt;性能问题&lt;/li&gt;
&lt;li&gt;用户界面设计&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;原型制作是一种学习经验。其价值并不在于所产生的代码，而在于所学到的经验教训。那才是原型制作的要点所在。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 16
Prototype to Learn
为了学习而制作原型&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;怎样使用原型&#34;&gt;怎样使用原型&lt;/h4&gt;

&lt;p&gt;在构建原型时，你可以忽略哪些细节？&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;正确性：你也许可以在适当的地方使用虚假的数据；&lt;/li&gt;
&lt;li&gt;完整性：原型也许只能在非常有限的意义上工作；&lt;/li&gt;
&lt;li&gt;健壮性：错误检查很有可能不完整。如果你偏离预定路径，原型就可能崩溃，这没有关系；&lt;/li&gt;
&lt;li&gt;风格：原型代码可能没有多少注释或文档。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为原型应该遮盖细节，并聚焦于所考虑系统的某些具体方面，你可以用非常高级的语言实现原型。高级的脚本语言能让你推迟考虑许多细节，并且仍然能制作出可以工作的代码。&lt;/p&gt;

&lt;h4 id=&#34;制作架构原型&#34;&gt;制作架构原型&lt;/h4&gt;

&lt;p&gt;一些你可以在架构原型中寻求解答的具体问题：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;主要组间的责任是否得到了良好的定义？是否适当？&lt;/li&gt;
&lt;li&gt;主要组间间的协作是否得到了良好的定义？&lt;/li&gt;
&lt;li&gt;耦合是否得以最小化？&lt;/li&gt;
&lt;li&gt;你能否确定重复的潜在来源？&lt;/li&gt;
&lt;li&gt;接口定义和各项约束是否可接受？&lt;/li&gt;
&lt;li&gt;每个模块在执行过程中是否能访问到其所需的数据？能够在需要时进行访问？&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;领域语言&#34;&gt;领域语言&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 17
Program Close to the Problem domain
靠近问题领域编程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;无论适用于配置和控制应用程序的简单语言，还是用于指定规则或过程的更为复杂的语言，我们认为，你都应该考虑让你的项目更靠近问题领域。通过在更高的抽象层面上编码，你获得了专心解决领域问题的自由，并且可以忽略琐碎的实现细节。&lt;/p&gt;

&lt;h3 id=&#34;估算&#34;&gt;估算&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 18
Estimate to Avoid Surprises
估算，以避免发生意外&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;估算来自哪里&#34;&gt;估算来自哪里&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;理解提问内容：任何估算练习的第一步都是建立对提问内容的理解。除了上面讨论的精确度以外，你还需要把我问题域的范围。这常常隐含在问题中，但你需要养成在开始猜想之前先思考范围的习惯。&lt;/li&gt;
&lt;li&gt;建立系统的模型：根据你对所提问题的理解，建立粗略、就绪的思维模型骨架。&lt;/li&gt;
&lt;li&gt;把模型分解为组件：你需要找出描述这些组件怎样交互的数学规则。你将会发现，在典型的情况下，每个组件都有一些参数，会对它给整个模型带来什么造成影响。在这一阶段，只要确定每个参数就行了。&lt;/li&gt;
&lt;li&gt;给每个参数指定值：一旦你分解出各个参数，你就可以逐一给每个参数赋值。在这个步骤中你可能会引入一些错误。诀窍是找出哪些参数对结果的影响最大，并致力于让它们大致正确。&lt;/li&gt;
&lt;li&gt;计算答案：在计算阶段，你可能会得到看起来很奇怪的答案。不哟啊太快放弃它们，如果你的运算是正确的，那你对问题或模型的理解就很可能是错的。这是非常宝贵的信息。&lt;/li&gt;
&lt;li&gt;追踪你的估算能力&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;估算项目进度&#34;&gt;估算项目进度&lt;/h4&gt;

&lt;p&gt;在面对相当大的应用开发的各种复杂问题与反复无常的情况时，普通的估算规则可能会失效。为项目确定进度表的唯一途径常常是在相同的项目上获取经验。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;检查需求&lt;/li&gt;
&lt;li&gt;分析风险&lt;/li&gt;
&lt;li&gt;设计、实现、继承&lt;/li&gt;
&lt;li&gt;向用户确认&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 19
Iterate the Schedule with the Code
通过代码对进度表进行迭代&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;

&lt;p&gt;第二章其实更多的再讲团队和产品设计方面的问题，自己在这两方面并没有什么经验。不过 DRY 和正交性的概念还是比较重要的。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>读《程序员修炼之道》（一）</title>
      <link>http://blog.jiayuanzhang.com/post/notes-on-the-pragmatic-programmer-part-1/</link>
      <pubDate>Sun, 13 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/notes-on-the-pragmatic-programmer-part-1/</guid>
      <description>

&lt;p&gt;实习到现在差不多两个月了，博客也一直荒废了没写。这次更新就先来写写读书笔记好了。&lt;/p&gt;

&lt;p&gt;这本书从书名来看其实很像那种鸡汤类的书，英文名「The Pragmatic Programmer」（注重实效的程序员）看上去就好了许多。&lt;a href=&#34;https://book.douban.com/subject/1152111/&#34;&gt;豆瓣评分&lt;/a&gt; 8.6 分。大一的时候买的书，之前随意地写过几年的玩具代码，所以初读这本书的时候觉得很有道理，但是读完了之后发现什么也没有记住。用&lt;a href=&#34;http://blog.youxu.info&#34;&gt;徐宥&lt;/a&gt;的话来说就是「读者如果没有类似的经历，看到这些珠玑，也只是觉得把玩颇为有趣而已，极少能有同感。」大一的时候读这是这种感觉。&lt;/p&gt;

&lt;p&gt;出来实习之后，接触到实际生产中的代码，在代码量比较大的情况下（几十万行），之前书中所讲的一些问题都一一浮现了。为了写出优雅的代码，有必要把这本书再读一遍，可能以后还要反复读很多遍（不是所有的内容看一遍就能内化在心里的），所以每读一部分就记一点笔记，留作日后复习用。&lt;/p&gt;

&lt;p&gt;给自己制定以下阅读的计划，因为这本书每一张的内容读起来都比较轻松，所以预计用两周的时间读完：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;每 1-2 天阅读一章（共 8 章）&lt;/li&gt;
&lt;li&gt;每一章都写一篇笔记，读的时候可以做一些摘录，读完一章之后写一篇总结性的笔记；&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;下面是「序言」和「第一章」的笔记。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;序&#34;&gt;序&lt;/h2&gt;

&lt;h3 id=&#34;注重实效的程序员都有哪些特征&#34;&gt;注重实效的程序员都有哪些特征&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;早期的采纳者/快速的改编者：给你一样新东西，你很快能把握它，并把它与你的知识的其余部分结合在一起（尝试新技术）；&lt;/li&gt;
&lt;li&gt;好奇：你喜欢提问，你是收集小知识的林鼠（建立自己的知识 wiki）；&lt;/li&gt;
&lt;li&gt;批判的思考者：你会首先抓住事实，而不是照搬别人所说的；&lt;/li&gt;
&lt;li&gt;有现实感：你会设法理解你面临的每个问题的内在本质（事情有多困难，需要花多长时间完成？）&lt;/li&gt;
&lt;li&gt;多才多艺：你尽力熟悉广泛的技术和环境；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;（审视一下自己，上面几点好像都没有做到，或者说有的做到了但是并不到位。）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 1
Care About Your Craft
关心你的技艺&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如何做到上面所说的？&lt;strong&gt;在你做某件事情的时候思考你在做什么&lt;/strong&gt;。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 2
Think! About Your Work
思考！你的工作&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;它是一个持续的过程&#34;&gt;它是一个持续的过程&lt;/h3&gt;

&lt;p&gt;每天为提炼你所拥有的技能而工作，为把新的工具增加到你的技能列表中二工作。草坪不是一天修成的。&lt;/p&gt;

&lt;h2 id=&#34;第一章-注重实效的哲学&#34;&gt;第一章：注重实效的哲学&lt;/h2&gt;

&lt;h3 id=&#34;我的源码让猫给吃了&#34;&gt;我的源码让猫给吃了&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;在所有的弱点中，最大的弱点就是害怕暴露弱点。—— J.B.Bossuet&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如果你确实同意要为某个结果负责，你就应该切实负起责任。当你犯错误的时候，不要责备别人或别的东西，或是拼凑借口。你可以选择提供解决方案，而不是寻找借口。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 3
Provide Options, Don&amp;rsquo;t Make Lame Excuses
提供各种选择，不要找蹩脚的借口&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在你走向任何人，告诉他们为何某件事做不到、为何耽搁、为何出现问题之前，先停下来，听一听你心里的声音。在你去告诉他们坏消息之前，是否还有其他你可以再试一试的办法？有时，你其实知道他们会说什么，所以还是不要给他们添麻烦。&lt;/p&gt;

&lt;p&gt;（这一点深有感触，在实习的这一段时间里面，经常因为一些小事去麻烦 leader，比如说环境跑步起来，某个莫名其妙的报错等，这虽然有文档不全的原因在，不过自己也没想着去补全文档这种解决办法。）&lt;/p&gt;

&lt;h3 id=&#34;软件的熵&#34;&gt;软件的熵&lt;/h3&gt;

&lt;p&gt;软件中的无序增长时，程序员们称之为「软件腐烂」（software rot）。&lt;/p&gt;

&lt;p&gt;「破窗理论」：以一幢有少许破窗的建筑为例，如果那些窗不被修理好，可能将会有破坏者破坏更多的窗户。最终他们甚至会闯入建筑内，如果发现无人居住，也许就在那里占领、定居或者纵火。又或想像一条人行道有些许纸屑，如果无人清理，不久后就会有更多垃圾，最终人们会视为理所当然地将垃圾顺手丢弃在地上。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 4
Don&amp;rsquo;t Live with Broken Windows
不要容忍破窗户&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不要留着「破窗户」（低劣的设计、错误决策、或是糟糕的代码）不修，发现一个修一个。&lt;/p&gt;

&lt;p&gt;如果没有足够的时间进行适当的修理，可以把出现问题的代码放到注释中，或者是用虚拟的数据来代替。&lt;strong&gt;采取某种行动防止进一步破坏，并说明情势处在你的控制之下&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;如果你发现自己在有好些破窗户的项目里工作，会很容易产生这样的想法：「这些代码的其余部分也是垃圾，我只要照着做就行了。」&lt;/p&gt;

&lt;h3 id=&#34;石头汤与煮青蛙&#34;&gt;石头汤与煮青蛙&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 5
Be a Catalyst for Change
做变化的催化剂&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;（有的时候想要做出一个新功能，可以先开发一个简单的版本，然后诱导别人往其中添加新功能。）&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 6
Remember the Big Picture
记住大图景&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;当你设法催生变化时，你能否确定你是在做石头汤还是青蛙汤？决策是主观的还是客观的？&lt;/p&gt;

&lt;h3 id=&#34;足够好的软件&#34;&gt;足够好的软件&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 7
Make Quality a Requirements Issue
使质量称为需求问题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不要因为过度修饰和过于精于求精而破坏完好的程序。继续前进，让你的代码凭借自己的质量站立一会儿，它也许不完美，但不用担心：它不可能完美。&lt;/p&gt;

&lt;h3 id=&#34;你的知识资产&#34;&gt;你的知识资产&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;知识上的投资总能得到最好的回报。—— 本杰明·富兰克林&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;管理知识资产与管理金融资产非常相似：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;严肃的投资者定期投资&lt;/li&gt;
&lt;li&gt;多元化是长期成功的关键：你知道的不同的事情越多，你就越有价值。作为底线，你需要知道你目前所用的特定技术的各种特性，但不要就此止步。&lt;/li&gt;
&lt;li&gt;聪明的投资者在保守的投资和高风险、高回报的投资之间平衡他们的资产&lt;/li&gt;
&lt;li&gt;投资者设法低买高卖，以获取最大回报：在新兴的技术流行之前学习它可能就和找到被低估的股票一样困难，但所得到的就和那样的股票带来的收益一样。&lt;/li&gt;
&lt;li&gt;应周期性地重新评估和平衡资产&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 8
Invest Regularly in YOur Knowledge Portfolio
定期为你的知识资产投资&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;每年至少学习一种新语言&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每季度阅读一本技术书籍&lt;/strong&gt;。一旦你养成习惯，就一个月读一本书。在你掌握了你正在使用的技术之后，扩宽范围，阅读一些与你的项目无关的书籍。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;也要阅读非技术书籍&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上课&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;参加本地用户组织&lt;/strong&gt;。不要只是去听讲，而要主动参与。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;试验不同的环境&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;跟上潮流&lt;/strong&gt;。订阅商务杂志和其他期刊。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;上网&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;持续投入非常重要，一旦你熟悉了某种新语言或技术，继续前进，学习另外一种。设法把你学到的东西应用到你当前的项目当中，即使你的项目没有使用该技术，你或许也能借鉴一些想法。&lt;/p&gt;

&lt;p&gt;所有阅读和研究都需要时间，而时间已经很短缺。所以你需要预先规划。让自己在空闲的片刻时间里总有东西可读。&lt;/p&gt;

&lt;p&gt;最后一个药店是，批判地思考你读到的和听到的。你需要确保你的资产中的知识是准确的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 9
Critically Analyze What You Read and Hear
批判地分析你读到的和听到的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;交流&#34;&gt;交流&lt;/h3&gt;

&lt;blockquote&gt;
&lt;p&gt;Tip 10
It&amp;rsquo;s Both What You Say and the Way You Say It
你说什么和你怎么说同样重要&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;除非你生活在真空中，你猜不需要交流，交流越有效，你就越有影响力。&lt;/p&gt;

&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;大概花了两个多小时的时间把第一章的内容看了一遍，顺便摘录了一些内容。这一章其实更多的是讲「道」层面上的内容，与技术内容关联不大，但又是至关重要的，做好了上面几点可以从「码农」蜕变成「程序员」，能有自己的思考，能够与他人交流，能够对自己进行投资，而不是一味地按照要求写代码。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
