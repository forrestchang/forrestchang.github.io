<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Org Mode on Lifelong Hacker</title>
    <link>http://blog.jiayuanzhang.com/tags/org-mode/</link>
    <description>Recent content in Org Mode on Lifelong Hacker</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 14 Jul 2019 00:31:00 +0800</lastBuildDate>
    
	<atom:link href="http://blog.jiayuanzhang.com/tags/org-mode/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 ox-hugo 来写博客</title>
      <link>http://blog.jiayuanzhang.com/post/blog-with-ox-hugo/</link>
      <pubDate>Sun, 14 Jul 2019 00:31:00 +0800</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/blog-with-ox-hugo/</guid>
      <description>最近开始重新使用 org-mode，在这之前大概有一年左右的时间，慢慢把一些东西从 org-mode 转移到别的工具上了，比如利用 OmniFocus 来管理任务，用 Devonthink 来管理笔记，用 Ulysses 来写作。虽然这些工具非常好用，但是总能找到一两个不满意的点，为此还写了不少脚本进行优化（这些 App 均支持 AppleScript），既然都是要写代码才能完全满足使用需求，不如直接使用 Emacs 来做这些事好了（目前已经将任务管理系统又迁移到 org-mode 上来了）。
从 上篇文章 可以知道，我开始使用 Devonthink 来写博客，配合 Alfred 的 Workflow 可以方便地生成 Hugo 的博客文章，其实就是简单地将 Devonthink 中的 Metadata 生成 YAML 格式的内容插入到 Markdown 文件中。
如果你只使用 Markdown 来写作的话，这种写博客的流程是非常好的，配合一个 Markdown 编辑器（推荐 iA Writer），Devonthink 可以方便的作为管理博客文章的前端，另外再配合我写的 Alfred 全局搜索（支持拼音） Workflow，可以快速地找到所写的内容。
但是，比起 Markdown，我更喜欢用 org-mode 来写东西。所以，我需要对上面这些流程做一些 Hack，其实也非常简单：
 在 Devonthink 中建立 org 格式的文件（在 Devonthink 显示为 plain-text）； 调用 Emacs 来打开这个文件（Open with Emacs，或者可以写一个脚本用 Alfred 来调用打开）； 在 Emacs 中使用 org-mode 来完成写作； 修改之前的 Alfred Workflow，检测到是 .</description>
    </item>
    
    <item>
      <title>使用 Devonthink 来写博客</title>
      <link>http://blog.jiayuanzhang.com/post/use-devonthink-to-write-blog/</link>
      <pubDate>Sat, 04 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/use-devonthink-to-write-blog/</guid>
      <description>虽然博客没有写太多篇，但是写博客的工具却折腾过不少。从最开始的 org-mode，到 Jekyll、Hexo，再到现在的 Hugo，一直没有找到一个满意的工作流。
我的需求：
 使用统一的工具来管理笔记和写作的文章； 能够多端同步； 自动化。  之前使用 Hugo 写作的流程是：
 在命令行新建一篇文章； 打开 Typora 进行写作； 写完了再去命令行 generate 并 push 到 GitHub 上。  后来使用 Ulysses 作为写作的工具，把 Hugo 的 post 文件夹作为 Ulysses 的外部文件夹来进行写作。Ulysses 是一个很强大的写作工具，但是唯一的缺点是它自带的 Markdown 语法与通用的 Markdown 语法不兼容，这导致了之前写的很多文章都需要转码一遍才能够正确在 Ulysses 中显示。
Devonthink 是我用来做知识管理的工具，你可以把它看做是一个增强版的 Finder + Evernote，我主要用它来写笔记和剪裁网页，配合 Alfred 的搜索可以快速找到想要的内容，关于 Devonthink 的具体使用我之后会写一篇文章来介绍，如果你有疑问，可以先看一下这篇文章：DEVONthink 和 Evernote，谁是更好的知识管理工具？ - 少数派。
既然我把我写的和剪裁的东西都统一管理在 Devonthink 中，那么能不能把博客的写作流程也整合进去呢？
搜索了一下，发现 Devonthink 能够支持 AppleScript 和 JavaScript for Automation（JXA），实现的思路如下：
 用一个 Folder 统一管理写作的文章； 读取这个 Folder 中的所有文章和元数据； 把元数据生成 YAML 格式的内容插入到文章的开头； 把新生成的文章写入到 Hugo 对应的文件夹下。  实现的逻辑很简单，困难点主要在于 JXA 的文档缺乏，有一些操作需要调用系统的 Objective-C Bridge 来进行（相当于在 JavaScript 中写 Objective-C 的代码）。</description>
    </item>
    
    <item>
      <title>2017 Week 19 Review</title>
      <link>http://blog.jiayuanzhang.com/post/2017-week-19-review/</link>
      <pubDate>Sun, 07 May 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/2017-week-19-review/</guid>
      <description>之前有在博客上写 Weekly Review 的习惯，后来因为被朋友说博客真水然后都撤下来了，有些文章确实是类似于「流水账」的记事，但也有一些是围绕这周做的东西来讨论的。总的来说，写 Weekly Review 对自己帮助还是很大的，可以在一周中 Focus 一个特定的主题，而不是想到什么做什么，所以这个系列以后还会继续写下去，只是写的内容更加具体一天，可以围绕着这周的 Project，或者这周听的音乐，或者读的书之类的。以前的文章看情况要不要放上来。
这周算是正式把我的任务管理系统从 org-mode 转移到 Todoist 上来了。在不考虑时间成本和易用性上来说，org-mode 依然是目前我认为最完备的任务和时间管理系统，我用它来：
 任务管理：类似于 OmniFocus 的多层级任务管理，支持标签和优先级，可以自定义过滤视图 时间记录：按照项目的方式来记录时间，基本是在做哪件事之前把计时器打开，一个番茄时间后自动关闭，可以自定义生成各种时间报表 番茄工作法  自定义生成的时间记录表：
虽然 org-mode 的优点众多，但是始终是一个基于 Emacs 的 major mode，所以诸多限制在所难免：
 没有一个简单易用的移动端 没办法做到全局 capture，虽然借助 Alfred 的 Workflow 和 Elisp 脚本能够实现这一功能，但是使用起来体验并不是很好 编辑功能过重，很显然，做任务管理不需要多么高效的编辑操作，类似于 OmniFocus 使用鼠标 + 快捷键才是更高效的方法，在 Emacs 里经常编辑速度过快把整个文件搞乱了  不用 OmniFocus 的原因是本来就是从 OmniFocus 转到 org-mode 上来的，OmniFocus 有一个很致命的缺点就是不支持多标签，并且 Perspective 提供的设置选项也很有限，根不能不能满足一些复杂的过滤要求。除此之外，OmniFocus 应该是最优秀的任务管理软件了。
Todoist 初次使用的时候感觉很难用，尤其是鼠标点击就进入编辑模式，这个设计真的不知道怎么想的，并且各平台的客户端一点也不 Native，基本就是 Web 版套了一个壳。macOS 客户端经常有一些莫名的 bug，反正软件的使用体验上来说和 OmniFocus 简直不能比。
经过一段时间的调教，现在基本还能满足日常使用了。我认为一个可靠的任务管理系统需要满足两点：</description>
    </item>
    
    <item>
      <title>使用Emacs Org-mode &#43; GitHub Pages 来写博客</title>
      <link>http://blog.jiayuanzhang.com/post/how-to-use-emacs-and-org-mode-to-build-a-blog/</link>
      <pubDate>Sat, 10 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/how-to-use-emacs-and-org-mode-to-build-a-blog/</guid>
      <description>这个博客就是使用Emacs org-mode + GitHub Pages搭建的，博客的主题是org-mode官网的主题，非常的简洁；评论采用的disqus，访问统计使用的是Google和Baidu的统计代码。
另外，本文中进行操作的环境是在OSX下完成的，Windows用户请自行参考脑补:)
起因 之前也折腾过好多的博客，Jekyll、Hexo、Farbox等，这些静态博客生成器都有一个共同点，都是采用的Markdown语法来进行书写的，而自己平时记笔记都是使用的Emacs org-mode，这样就导致了记笔记和写博客两个过程分裂开来了。
昨晚偶然看到dirtysalt&amp;rsquo;s homepage，被深深的震撼了，博主写了很多的干货，专注与博客的内容而不是博客的外观。而自己也是一个极简主义者，觉得这样的博客样式还是挺好看的（很有Web1.0时代的复古风啊）。恰巧博主也是使用的Emacs来写博客，于是便花了一个上午的时间搜集相关的资料并把博客搭建起来了。
准备 GitHub帐号与GitHub Pages 首先你需要一个存放博客的地方，这里采用的是GitHub，当让也可以使用其他的服务，只要支持静态页面展示即可。
GitHub的注册过程省略。
注册完GitHub帐号之后建立一个新的仓库，命名为 xxx.github.io ，其中 xxx 为你的用户名。
Emacs环境 我使用的是最近比较火的spacemacs ，很多功能都配置好了，基本上手即用。
如果不是用的spacemacs，确保你的Emacs版本为24，org-mode版本为8.0以上，不排除可能因为版本的原因出现各种各样的错误。
什么，你还不知道Emacs是什么，那先去下载一个Emacs吧，使用org-mode基本不需要什么Emacs的基础，只需要记住几个快捷键就可以了。
建立目录结构 随便在哪里建一个心得目录，这个目录就是存放你的org文件和html文件的地方。假设我们已经有了这么一个目录 org ：
$ mkdir notes $ mkdir public_html $ mkdir gtd  当然，那个gtd目录你可以不要，那是用来做时间管理的，如果你不想用Emacs做时间管理的话，可以不用建那个目录。
 notes: 这个目录就是用来存放元数据的地方，你的org文件、图片、CSS文件、PDF等全都是存放在这里的。 public_html: 这个目录是用来存放导出的HTML文件的，那些非org格式的文件还会原封不动地拷贝过来。  配置Emacs 这一步有一些复杂，没有Elisp基础的同学可能看不怎么懂，不过没关系，照着做就是了，现在看不懂可以以后学嘛。
Emacs org-mode自带了很强大的导出功能，可以导出成HTML、markdown、PDF等格式的文件，我们这里使用自带的导出Project的功能，只不过在导出之前，要做一些配置，告诉Emacs要导出哪些东西，导出到哪里，采用什么规则。
首先我们在配置文件中添加以下代码（普通的在.emacs中添加，spacemacs用户在.spacemacs中添加）：
(require &#39;ox-publish) (setq org-publish-project-alist &#39;( ;; 把各部分的配置文件写到这里面来 ))  然后把其他的配置文件依次添加进来就可以了，主要有生成HTML的部分和原样拷贝的部分。
下面来配置需要转换成HTML的内容：
(&amp;quot;blog-notes&amp;quot; :base-directory &amp;quot;~/org/notes&amp;quot; :base-extension &amp;quot;org&amp;quot; :publishing-directory &amp;quot;~/org/public_html/&amp;quot; :recursive t :publishing-function org-html-publish-to-html :headline-levels 4 ; Just the default for this project.</description>
    </item>
    
  </channel>
</rss>