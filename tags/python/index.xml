<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Jiayuan&#39;s Blog</title>
    <link>http://blog.jiayuanzhang.com/tags/python/</link>
    <description>Recent content in Python on Jiayuan&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 22 Dec 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.jiayuanzhang.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>推荐系统笔记</title>
      <link>http://blog.jiayuanzhang.com/post/notes-on-recommandation-system/</link>
      <pubDate>Thu, 22 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/notes-on-recommandation-system/</guid>
      <description>开始学习机器学习/数据挖掘相关的内容，打算每学习一部分知识就写一篇博客总结一下，当做学习过程中的笔记，也为以后看的时候提供存档。
这一篇笔记是关于推荐系统的，主要讲了两种推荐算法（基于用户和基于物品的协同过滤）。
基于用户的协同过滤 协同过滤（Collaborative filtering） 一个协作型过滤算法通常的做法是对一大群人进行搜索，并从中找出与我们品味相近的一小群人。算法会对这些人所偏爱的其他内容进行考察，并将它们组合起来构造出一个经过排名的推荐列表。
测试数据集 为了演示一些算法，我们需要从这个网站上下载一份数据集。这里因为是作为演示使用，所以只需要下载ml-latest-small.zip这一份简单的数据集就可以了。
相似度计算 在有了数据之后，我们需要有一种方法来确定人们在品味方面的相似程度。为此，我们可以将每个人与所有其他人进行对比，并计算他们的相似度评价值。
欧几里德距离评价（Euclidean Distance Score） 欧几里德距离是指多维空间中两点间的距离，这是一种用直尺测量出来的距离。如果我们将两个点分别记作$(p_1, p_2, p_3, p_4, &amp;hellip;)$和$(q_1, q_2, q_3, q_4, &amp;hellip;)$，则欧几里德距离的计算公式为：
$$ \sqrt{((p_1-q_1)^2+(p_2-q_2)^2+&amp;hellip;+(p_n-qn)^2)} = \sqrt{(\sum{i=1}^n(p_i-q_i)^2)} $$
创建 recommendations.py。
用代码表示：
from math import sqrt # 返回一个有关 person1 与 person2 的基于距离的相似度评价 def sim_distance(prefs, person1, person2): # 得到 shared_items 的列表 shared_items = {} for item in prefs[person1]: if item in prefs[person2]: shared_items[item] = 1 # 如果两者没有共同之处，则返回 0 if len(shared_items) == 0: return 0 # 计算所有差值的平方和 sum_of_squares = sum([pow(prefs[person1][item]-prefs[person2][item], 2)for item in prefs[person1] if item in prefs[person2]]) return 1 / (1 + sqrt(sum_of_squares))  欧几里德距离计算公式可以计算出距离值，偏好越相似的人，其距离就越短。不过，我们还需要一个函数，来对偏好越相近的情况给出越大的值，为此，我们可以将函数的值加 1（这样就可以避免遇到被 0 整除的错误了），并取其倒数，入上面代码最后一行所示。</description>
    </item>
    
    <item>
      <title>搭建 Python 科学计算环境</title>
      <link>http://blog.jiayuanzhang.com/post/build-python-scienfic-computing-environment/</link>
      <pubDate>Fri, 28 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/build-python-scienfic-computing-environment/</guid>
      <description>最近在看《Python for Data Analysis》（利用 Python 进行数据分析）这本书，贴一点笔记，这一篇是关于环境搭建的。另外吐槽一下，书中还是有不少错误的，语法错误就发现了好多处，大概读完了之后会整理出一份勘误表出来，可能是因为写书的时候是 14 年，两年过去了，pandas 库也有了一些变化。
安装虚拟环境 不想把系统的 python 库搞得乱乱的（其实已经很乱了），所以还是建一个独立虚拟环境专门来做科学计算吧。具体的方法我在virtualenv 相关笔记这篇博客中已经详细写了，建议将启动虚拟环境的命令添加到终端的配置文件中去（使用alias），这样就避免每次一打开就输入一长串命令了。
因为科学计算社区的一些库还是基于 Python 2.x 版本的，所以这里我们使用的 Python 版本为 2.7。
然后使用以下命令一键安装所需要的库：
sudo pip install numpy pandas matplotlib jupyter scikit-learn  安装不上的请检查是不是需要翻墙。
IPython 熟悉 Python 的同学应该对这个解释器不陌生，自带的 Python 解释器实在是太弱了。它与传统的“edit-compile-run”（编辑-编译-运行）方式的区别在于，它鼓励使用“execute-explore”（执行-探索），所以特别适合用在计算和数据分析领域，可以方便得使用「试错法」和「迭代法」进行开发。这里主要介绍它基于 Web 的交互式笔记本功能（命令行中大同小异）。
开启 IPython Notebook 使用以下命令来打开 IPython Notebook：
(ENV2.7)$ jupyter notebook  这样 server 就启动了，浏览器会自动打开一个目录树。
Note：记住在启动了虚拟环境的状态下使用这条命令，要不然就会使用系统的 IPython 版本来运行。
然后我们新建一个 IPython Notebook 用作演示：
In [1] 中的命令是为了能让我们直接在 IPython Notebook 中集成显示 matplotlib 画的图片，所以如果是用作科学计算的话，首先先执行以下这条命令再说。
内省 在变量的前面或后面加上一个 ?</description>
    </item>
    
    <item>
      <title>virtualenv 相关笔记</title>
      <link>http://blog.jiayuanzhang.com/post/notes-on-virtualenv/</link>
      <pubDate>Sun, 17 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.jiayuanzhang.com/post/notes-on-virtualenv/</guid>
      <description>安装 直接使用 pip 来进行安装：
$ sudo pip install virtualenv  用途 主要用来创建隔离的 Python 开发环境，比如说一个项目需要用到 2.7 的库，另一个项目需要用到 3.0 的库，我们就可以使用 virtualenv 来分别给这两个项目创建虚拟的 Python 环境，这样可以有效的避免冲突。
virtualenv 会创建一个拥有独立安装目录的 Python 环境，该隔离环境不会与其他 virtualenv 环境共享模块（可以选择是否访问全局安装目录）。
使用 创建虚拟环境 最基本的使用：
$ virtualenv ENV  其中 ENV 是用来存放虚拟环境的目录。
$tree -L 1 ENV ENV ├── bin ├── include ├── lib └── pip-selfcheck.json  其中 lib 和 include 目录是用来存放新的虚拟 Python 环境的依赖库，Package 被安装到 lib/pythonX.X/site-packages/ 中，bin 目录中是新的 Python 解释器。pip 和 setuptools 默认被安装的。
active script 进入虚拟环境：</description>
    </item>
    
  </channel>
</rss>